
PEPL_PPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b1c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08009d00  08009d00  0000ad00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0e4  0800a0e4  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a0e4  0800a0e4  0000b0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0ec  0800a0ec  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0ec  0800a0ec  0000b0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0f0  0800a0f0  0000b0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a0f4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  200001d4  0800a2c8  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  0800a2c8  0000c53c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017329  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c76  00000000  00000000  0002352d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  000261a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001091  00000000  00000000  000276f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294c5  00000000  00000000  00028781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017412  00000000  00000000  00051c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011448f  00000000  00000000  00069058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017d4e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cb4  00000000  00000000  0017d52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001841e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009ce4 	.word	0x08009ce4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08009ce4 	.word	0x08009ce4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2a:	f000 fd92 	bl	8001a52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2e:	f000 f83d 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f32:	f000 fa57 	bl	80013e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f36:	f000 fa2b 	bl	8001390 <MX_DMA_Init>
  MX_TIM1_Init();
 8000f3a:	f000 f949 	bl	80011d0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000f3e:	f000 f881 	bl	8001044 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8000f42:	f000 f8fb 	bl	800113c <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000f46:	f000 f9d5 	bl	80012f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);      // Start main PWM on PA9
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	4812      	ldr	r0, [pc, #72]	@ (8000f98 <main+0x74>)
 8000f4e:	f004 f8ed 	bl	800512c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);   // Start complementary PWM on PB0
 8000f52:	2104      	movs	r1, #4
 8000f54:	4810      	ldr	r0, [pc, #64]	@ (8000f98 <main+0x74>)
 8000f56:	f005 f8c5 	bl	80060e4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_Base_Start(&htim3);  // Start TIM3 base timer
 8000f5a:	4810      	ldr	r0, [pc, #64]	@ (8000f9c <main+0x78>)
 8000f5c:	f004 f81e 	bl	8004f9c <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_diff_buffer, ADC_BUFFER_SIZE);
 8000f60:	463b      	mov	r3, r7
 8000f62:	2205      	movs	r2, #5
 8000f64:	4619      	mov	r1, r3
 8000f66:	480e      	ldr	r0, [pc, #56]	@ (8000fa0 <main+0x7c>)
 8000f68:	f001 faf4 	bl	8002554 <HAL_ADC_Start_DMA>

  printf("Starting ADC Readout\r\n");
 8000f6c:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <main+0x80>)
 8000f6e:	f006 ff47 	bl	8007e00 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8000f72:	210a      	movs	r1, #10
 8000f74:	480a      	ldr	r0, [pc, #40]	@ (8000fa0 <main+0x7c>)
 8000f76:	f001 f9e7 	bl	8002348 <HAL_ADC_PollForConversion>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d107      	bne.n	8000f90 <main+0x6c>
	      {
	          uint32_t adc_val = HAL_ADC_GetValue(&hadc1);
 8000f80:	4807      	ldr	r0, [pc, #28]	@ (8000fa0 <main+0x7c>)
 8000f82:	f001 fbbb 	bl	80026fc <HAL_ADC_GetValue>
 8000f86:	60f8      	str	r0, [r7, #12]
	          printf("ADC Value: %lu\r\n", adc_val);
 8000f88:	68f9      	ldr	r1, [r7, #12]
 8000f8a:	4807      	ldr	r0, [pc, #28]	@ (8000fa8 <main+0x84>)
 8000f8c:	f006 fed0 	bl	8007d30 <iprintf>
	      }
	  HAL_Delay(100);  // Slow it down a bit for readability
 8000f90:	2064      	movs	r0, #100	@ 0x64
 8000f92:	f000 fdcf 	bl	8001b34 <HAL_Delay>
	  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8000f96:	e7ec      	b.n	8000f72 <main+0x4e>
 8000f98:	20000350 	.word	0x20000350
 8000f9c:	2000039c 	.word	0x2000039c
 8000fa0:	200001f0 	.word	0x200001f0
 8000fa4:	08009d00 	.word	0x08009d00
 8000fa8:	08009d18 	.word	0x08009d18

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	@ 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	2238      	movs	r2, #56	@ 0x38
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f006 ff28 	bl	8007e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f002 ff5c 	bl	8003e8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fde:	2340      	movs	r3, #64	@ 0x40
 8000fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fea:	2304      	movs	r3, #4
 8000fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fee:	2355      	movs	r3, #85	@ 0x55
 8000ff0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffe:	f107 0318 	add.w	r3, r7, #24
 8001002:	4618      	mov	r0, r3
 8001004:	f002 fff6 	bl	8003ff4 <HAL_RCC_OscConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800100e:	f000 fa2b 	bl	8001468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001012:	230f      	movs	r3, #15
 8001014:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001016:	2303      	movs	r3, #3
 8001018:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2104      	movs	r1, #4
 800102a:	4618      	mov	r0, r3
 800102c:	f003 faf4 	bl	8004618 <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001036:	f000 fa17 	bl	8001468 <Error_Handler>
  }
}
 800103a:	bf00      	nop
 800103c:	3750      	adds	r7, #80	@ 0x50
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	@ 0x30
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
//
  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800104a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2220      	movs	r2, #32
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f006 fed7 	bl	8007e10 <memset>
//
  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001062:	4b33      	ldr	r3, [pc, #204]	@ (8001130 <MX_ADC1_Init+0xec>)
 8001064:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001068:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106a:	4b31      	ldr	r3, [pc, #196]	@ (8001130 <MX_ADC1_Init+0xec>)
 800106c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001070:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001072:	4b2f      	ldr	r3, [pc, #188]	@ (8001130 <MX_ADC1_Init+0xec>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001078:	4b2d      	ldr	r3, [pc, #180]	@ (8001130 <MX_ADC1_Init+0xec>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107e:	4b2c      	ldr	r3, [pc, #176]	@ (8001130 <MX_ADC1_Init+0xec>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001084:	4b2a      	ldr	r3, [pc, #168]	@ (8001130 <MX_ADC1_Init+0xec>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108a:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <MX_ADC1_Init+0xec>)
 800108c:	2204      	movs	r2, #4
 800108e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001090:	4b27      	ldr	r3, [pc, #156]	@ (8001130 <MX_ADC1_Init+0xec>)
 8001092:	2200      	movs	r2, #0
 8001094:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001096:	4b26      	ldr	r3, [pc, #152]	@ (8001130 <MX_ADC1_Init+0xec>)
 8001098:	2200      	movs	r2, #0
 800109a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109c:	4b24      	ldr	r3, [pc, #144]	@ (8001130 <MX_ADC1_Init+0xec>)
 800109e:	2201      	movs	r2, #1
 80010a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a2:	4b23      	ldr	r3, [pc, #140]	@ (8001130 <MX_ADC1_Init+0xec>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80010aa:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <MX_ADC1_Init+0xec>)
 80010ac:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80010b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <MX_ADC1_Init+0xec>)
 80010b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <MX_ADC1_Init+0xec>)
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <MX_ADC1_Init+0xec>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c8:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <MX_ADC1_Init+0xec>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d0:	4817      	ldr	r0, [pc, #92]	@ (8001130 <MX_ADC1_Init+0xec>)
 80010d2:	f000 ff7d 	bl	8001fd0 <HAL_ADC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80010dc:	f000 f9c4 	bl	8001468 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	4811      	ldr	r0, [pc, #68]	@ (8001130 <MX_ADC1_Init+0xec>)
 80010ec:	f002 f8c2 	bl	8003274 <HAL_ADCEx_MultiModeConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010f6:	f000 f9b7 	bl	8001468 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <MX_ADC1_Init+0xf0>)
 80010fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010fe:	2306      	movs	r3, #6
 8001100:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001106:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <MX_ADC1_Init+0xf4>)
 8001108:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800110a:	2304      	movs	r3, #4
 800110c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <MX_ADC1_Init+0xec>)
 8001118:	f001 fb1c 	bl	8002754 <HAL_ADC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001122:	f000 f9a1 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
//
  /* USER CODE END ADC1_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	3730      	adds	r7, #48	@ 0x30
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200001f0 	.word	0x200001f0
 8001134:	04300002 	.word	0x04300002
 8001138:	407f0000 	.word	0x407f0000

0800113c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001140:	4b21      	ldr	r3, [pc, #132]	@ (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001142:	4a22      	ldr	r2, [pc, #136]	@ (80011cc <MX_LPUART1_UART_Init+0x90>)
 8001144:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001146:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001148:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800114c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800115a:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116c:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001172:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001174:	2200      	movs	r2, #0
 8001176:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001178:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 800117a:	2200      	movs	r2, #0
 800117c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800117e:	4812      	ldr	r0, [pc, #72]	@ (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001180:	f005 f9c1 	bl	8006506 <HAL_UART_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800118a:	f000 f96d 	bl	8001468 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118e:	2100      	movs	r1, #0
 8001190:	480d      	ldr	r0, [pc, #52]	@ (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001192:	f005 ffeb 	bl	800716c <HAL_UARTEx_SetTxFifoThreshold>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800119c:	f000 f964 	bl	8001468 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a0:	2100      	movs	r1, #0
 80011a2:	4809      	ldr	r0, [pc, #36]	@ (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 80011a4:	f006 f820 	bl	80071e8 <HAL_UARTEx_SetRxFifoThreshold>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80011ae:	f000 f95b 	bl	8001468 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 80011b4:	f005 ffa1 	bl	80070fa <HAL_UARTEx_DisableFifoMode>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80011be:	f000 f953 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200002bc 	.word	0x200002bc
 80011cc:	40008000 	.word	0x40008000

080011d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b098      	sub	sp, #96	@ 0x60
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
 80011f2:	615a      	str	r2, [r3, #20]
 80011f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2234      	movs	r2, #52	@ 0x34
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f006 fe07 	bl	8007e10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001202:	4b3a      	ldr	r3, [pc, #232]	@ (80012ec <MX_TIM1_Init+0x11c>)
 8001204:	4a3a      	ldr	r2, [pc, #232]	@ (80012f0 <MX_TIM1_Init+0x120>)
 8001206:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001208:	4b38      	ldr	r3, [pc, #224]	@ (80012ec <MX_TIM1_Init+0x11c>)
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800120e:	4b37      	ldr	r3, [pc, #220]	@ (80012ec <MX_TIM1_Init+0x11c>)
 8001210:	2220      	movs	r2, #32
 8001212:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 169;
 8001214:	4b35      	ldr	r3, [pc, #212]	@ (80012ec <MX_TIM1_Init+0x11c>)
 8001216:	22a9      	movs	r2, #169	@ 0xa9
 8001218:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b34      	ldr	r3, [pc, #208]	@ (80012ec <MX_TIM1_Init+0x11c>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001220:	4b32      	ldr	r3, [pc, #200]	@ (80012ec <MX_TIM1_Init+0x11c>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001226:	4b31      	ldr	r3, [pc, #196]	@ (80012ec <MX_TIM1_Init+0x11c>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800122c:	482f      	ldr	r0, [pc, #188]	@ (80012ec <MX_TIM1_Init+0x11c>)
 800122e:	f003 ff25 	bl	800507c <HAL_TIM_PWM_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001238:	f000 f916 	bl	8001468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123c:	2300      	movs	r3, #0
 800123e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001248:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800124c:	4619      	mov	r1, r3
 800124e:	4827      	ldr	r0, [pc, #156]	@ (80012ec <MX_TIM1_Init+0x11c>)
 8001250:	f005 f80a 	bl	8006268 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800125a:	f000 f905 	bl	8001468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800125e:	2360      	movs	r3, #96	@ 0x60
 8001260:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 63;
 8001262:	233f      	movs	r3, #63	@ 0x3f
 8001264:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001266:	2300      	movs	r3, #0
 8001268:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800126a:	2300      	movs	r3, #0
 800126c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800127a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800127e:	2204      	movs	r2, #4
 8001280:	4619      	mov	r1, r3
 8001282:	481a      	ldr	r0, [pc, #104]	@ (80012ec <MX_TIM1_Init+0x11c>)
 8001284:	f004 f864 	bl	8005350 <HAL_TIM_PWM_ConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800128e:	f000 f8eb 	bl	8001468 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 1;
 800129e:	2301      	movs	r3, #1
 80012a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012c2:	2300      	movs	r3, #0
 80012c4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4807      	ldr	r0, [pc, #28]	@ (80012ec <MX_TIM1_Init+0x11c>)
 80012d0:	f005 f860 	bl	8006394 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80012da:	f000 f8c5 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012de:	4803      	ldr	r0, [pc, #12]	@ (80012ec <MX_TIM1_Init+0x11c>)
 80012e0:	f000 fa26 	bl	8001730 <HAL_TIM_MspPostInit>

}
 80012e4:	bf00      	nop
 80012e6:	3760      	adds	r7, #96	@ 0x60
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000350 	.word	0x20000350
 80012f0:	40012c00 	.word	0x40012c00

080012f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001312:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <MX_TIM3_Init+0x94>)
 8001314:	4a1d      	ldr	r2, [pc, #116]	@ (800138c <MX_TIM3_Init+0x98>)
 8001316:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001318:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <MX_TIM3_Init+0x94>)
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <MX_TIM3_Init+0x94>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30000;
 8001324:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <MX_TIM3_Init+0x94>)
 8001326:	f247 5230 	movw	r2, #30000	@ 0x7530
 800132a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132c:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <MX_TIM3_Init+0x94>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001332:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <MX_TIM3_Init+0x94>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001338:	4813      	ldr	r0, [pc, #76]	@ (8001388 <MX_TIM3_Init+0x94>)
 800133a:	f003 fdd7 	bl	8004eec <HAL_TIM_Base_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001344:	f000 f890 	bl	8001468 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001348:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800134c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	4619      	mov	r1, r3
 8001354:	480c      	ldr	r0, [pc, #48]	@ (8001388 <MX_TIM3_Init+0x94>)
 8001356:	f004 f90f 	bl	8005578 <HAL_TIM_ConfigClockSource>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001360:	f000 f882 	bl	8001468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001364:	2320      	movs	r3, #32
 8001366:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	@ (8001388 <MX_TIM3_Init+0x94>)
 8001372:	f004 ff79 	bl	8006268 <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800137c:	f000 f874 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000039c 	.word	0x2000039c
 800138c:	40000400 	.word	0x40000400

08001390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001396:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <MX_DMA_Init+0x50>)
 8001398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800139a:	4a11      	ldr	r2, [pc, #68]	@ (80013e0 <MX_DMA_Init+0x50>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80013a2:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <MX_DMA_Init+0x50>)
 80013a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ae:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <MX_DMA_Init+0x50>)
 80013b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013b2:	4a0b      	ldr	r2, [pc, #44]	@ (80013e0 <MX_DMA_Init+0x50>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80013ba:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <MX_DMA_Init+0x50>)
 80013bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	200b      	movs	r0, #11
 80013cc:	f002 f935 	bl	800363a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013d0:	200b      	movs	r0, #11
 80013d2:	f002 f94c 	bl	800366e <HAL_NVIC_EnableIRQ>

}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000

080013e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <MX_GPIO_Init+0x5c>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	4a14      	ldr	r2, [pc, #80]	@ (8001440 <MX_GPIO_Init+0x5c>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <MX_GPIO_Init+0x5c>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <MX_GPIO_Init+0x5c>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	4a0e      	ldr	r2, [pc, #56]	@ (8001440 <MX_GPIO_Init+0x5c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <MX_GPIO_Init+0x5c>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <MX_GPIO_Init+0x5c>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	4a08      	ldr	r2, [pc, #32]	@ (8001440 <MX_GPIO_Init+0x5c>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <MX_GPIO_Init+0x5c>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000

08001444 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800144c:	1d39      	adds	r1, r7, #4
 800144e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001452:	2201      	movs	r2, #1
 8001454:	4803      	ldr	r0, [pc, #12]	@ (8001464 <__io_putchar+0x20>)
 8001456:	f005 f8a6 	bl	80065a6 <HAL_UART_Transmit>
  return ch;
 800145a:	687b      	ldr	r3, [r7, #4]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200002bc 	.word	0x200002bc

08001468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800146c:	b672      	cpsid	i
}
 800146e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <Error_Handler+0x8>

08001474 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <HAL_MspInit+0x44>)
 800147c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800147e:	4a0e      	ldr	r2, [pc, #56]	@ (80014b8 <HAL_MspInit+0x44>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6613      	str	r3, [r2, #96]	@ 0x60
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <HAL_MspInit+0x44>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <HAL_MspInit+0x44>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001496:	4a08      	ldr	r2, [pc, #32]	@ (80014b8 <HAL_MspInit+0x44>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800149c:	6593      	str	r3, [r2, #88]	@ 0x58
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_MspInit+0x44>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014aa:	f002 fd93 	bl	8003fd4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b09e      	sub	sp, #120	@ 0x78
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	2254      	movs	r2, #84	@ 0x54
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f006 fc97 	bl	8007e10 <memset>
  if(hadc->Instance==ADC1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014ea:	d160      	bne.n	80015ae <HAL_ADC_MspInit+0xf2>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014f2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80014f6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4618      	mov	r0, r3
 80014fe:	f003 faa7 	bl	8004a50 <HAL_RCCEx_PeriphCLKConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001508:	f7ff ffae 	bl	8001468 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800150c:	4b2a      	ldr	r3, [pc, #168]	@ (80015b8 <HAL_ADC_MspInit+0xfc>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001510:	4a29      	ldr	r2, [pc, #164]	@ (80015b8 <HAL_ADC_MspInit+0xfc>)
 8001512:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001516:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001518:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <HAL_ADC_MspInit+0xfc>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <HAL_ADC_MspInit+0xfc>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001528:	4a23      	ldr	r2, [pc, #140]	@ (80015b8 <HAL_ADC_MspInit+0xfc>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001530:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <HAL_ADC_MspInit+0xfc>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800153c:	2303      	movs	r3, #3
 800153e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001540:	2303      	movs	r3, #3
 8001542:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800154c:	4619      	mov	r1, r3
 800154e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001552:	f002 fb19 	bl	8003b88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001556:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <HAL_ADC_MspInit+0x100>)
 8001558:	4a19      	ldr	r2, [pc, #100]	@ (80015c0 <HAL_ADC_MspInit+0x104>)
 800155a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800155c:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <HAL_ADC_MspInit+0x100>)
 800155e:	2205      	movs	r2, #5
 8001560:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001562:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <HAL_ADC_MspInit+0x100>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <HAL_ADC_MspInit+0x100>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <HAL_ADC_MspInit+0x100>)
 8001570:	2280      	movs	r2, #128	@ 0x80
 8001572:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <HAL_ADC_MspInit+0x100>)
 8001576:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800157a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <HAL_ADC_MspInit+0x100>)
 800157e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001582:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001584:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <HAL_ADC_MspInit+0x100>)
 8001586:	2220      	movs	r2, #32
 8001588:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <HAL_ADC_MspInit+0x100>)
 800158c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001590:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001592:	480a      	ldr	r0, [pc, #40]	@ (80015bc <HAL_ADC_MspInit+0x100>)
 8001594:	f002 f886 	bl	80036a4 <HAL_DMA_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 800159e:	f7ff ff63 	bl	8001468 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a05      	ldr	r2, [pc, #20]	@ (80015bc <HAL_ADC_MspInit+0x100>)
 80015a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80015a8:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <HAL_ADC_MspInit+0x100>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015ae:	bf00      	nop
 80015b0:	3778      	adds	r7, #120	@ 0x78
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	2000025c 	.word	0x2000025c
 80015c0:	40020008 	.word	0x40020008

080015c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0a0      	sub	sp, #128	@ 0x80
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015dc:	f107 0318 	add.w	r3, r7, #24
 80015e0:	2254      	movs	r2, #84	@ 0x54
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f006 fc13 	bl	8007e10 <memset>
  if(huart->Instance==LPUART1)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a2d      	ldr	r2, [pc, #180]	@ (80016a4 <HAL_UART_MspInit+0xe0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d152      	bne.n	800169a <HAL_UART_MspInit+0xd6>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80015f4:	2320      	movs	r3, #32
 80015f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fc:	f107 0318 	add.w	r3, r7, #24
 8001600:	4618      	mov	r0, r3
 8001602:	f003 fa25 	bl	8004a50 <HAL_RCCEx_PeriphCLKConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800160c:	f7ff ff2c 	bl	8001468 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001610:	4b25      	ldr	r3, [pc, #148]	@ (80016a8 <HAL_UART_MspInit+0xe4>)
 8001612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001614:	4a24      	ldr	r2, [pc, #144]	@ (80016a8 <HAL_UART_MspInit+0xe4>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800161c:	4b22      	ldr	r3, [pc, #136]	@ (80016a8 <HAL_UART_MspInit+0xe4>)
 800161e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001628:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <HAL_UART_MspInit+0xe4>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162c:	4a1e      	ldr	r2, [pc, #120]	@ (80016a8 <HAL_UART_MspInit+0xe4>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001634:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <HAL_UART_MspInit+0xe4>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <HAL_UART_MspInit+0xe4>)
 8001642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001644:	4a18      	ldr	r2, [pc, #96]	@ (80016a8 <HAL_UART_MspInit+0xe4>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164c:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <HAL_UART_MspInit+0xe4>)
 800164e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001658:	2301      	movs	r3, #1
 800165a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001668:	2308      	movs	r3, #8
 800166a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001670:	4619      	mov	r1, r3
 8001672:	480e      	ldr	r0, [pc, #56]	@ (80016ac <HAL_UART_MspInit+0xe8>)
 8001674:	f002 fa88 	bl	8003b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001678:	2304      	movs	r3, #4
 800167a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001688:	230c      	movs	r3, #12
 800168a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001690:	4619      	mov	r1, r3
 8001692:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001696:	f002 fa77 	bl	8003b88 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800169a:	bf00      	nop
 800169c:	3780      	adds	r7, #128	@ 0x80
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40008000 	.word	0x40008000
 80016a8:	40021000 	.word	0x40021000
 80016ac:	48000800 	.word	0x48000800

080016b0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <HAL_TIM_PWM_MspInit+0x38>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d10b      	bne.n	80016da <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <HAL_TIM_PWM_MspInit+0x3c>)
 80016c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c6:	4a09      	ldr	r2, [pc, #36]	@ (80016ec <HAL_TIM_PWM_MspInit+0x3c>)
 80016c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ce:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <HAL_TIM_PWM_MspInit+0x3c>)
 80016d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40012c00 	.word	0x40012c00
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001728 <HAL_TIM_Base_MspInit+0x38>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d10b      	bne.n	800171a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001702:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <HAL_TIM_Base_MspInit+0x3c>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	4a09      	ldr	r2, [pc, #36]	@ (800172c <HAL_TIM_Base_MspInit+0x3c>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6593      	str	r3, [r2, #88]	@ 0x58
 800170e:	4b07      	ldr	r3, [pc, #28]	@ (800172c <HAL_TIM_Base_MspInit+0x3c>)
 8001710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40000400 	.word	0x40000400
 800172c:	40021000 	.word	0x40021000

08001730 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	@ 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a1f      	ldr	r2, [pc, #124]	@ (80017cc <HAL_TIM_MspPostInit+0x9c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d137      	bne.n	80017c2 <HAL_TIM_MspPostInit+0x92>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001752:	4b1f      	ldr	r3, [pc, #124]	@ (80017d0 <HAL_TIM_MspPostInit+0xa0>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001756:	4a1e      	ldr	r2, [pc, #120]	@ (80017d0 <HAL_TIM_MspPostInit+0xa0>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175e:	4b1c      	ldr	r3, [pc, #112]	@ (80017d0 <HAL_TIM_MspPostInit+0xa0>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <HAL_TIM_MspPostInit+0xa0>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176e:	4a18      	ldr	r2, [pc, #96]	@ (80017d0 <HAL_TIM_MspPostInit+0xa0>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001776:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <HAL_TIM_MspPostInit+0xa0>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001782:	2302      	movs	r3, #2
 8001784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001792:	2302      	movs	r3, #2
 8001794:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	480d      	ldr	r0, [pc, #52]	@ (80017d4 <HAL_TIM_MspPostInit+0xa4>)
 800179e:	f002 f9f3 	bl	8003b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017a2:	2301      	movs	r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80017b2:	2306      	movs	r3, #6
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4806      	ldr	r0, [pc, #24]	@ (80017d8 <HAL_TIM_MspPostInit+0xa8>)
 80017be:	f002 f9e3 	bl	8003b88 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	@ 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40012c00 	.word	0x40012c00
 80017d0:	40021000 	.word	0x40021000
 80017d4:	48000800 	.word	0x48000800
 80017d8:	48000400 	.word	0x48000400

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <NMI_Handler+0x4>

080017e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <MemManage_Handler+0x4>

080017f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <UsageFault_Handler+0x4>

08001804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001832:	f000 f961 	bl	8001af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <DMA1_Channel1_IRQHandler+0x10>)
 8001842:	f002 f852 	bl	80038ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000025c 	.word	0x2000025c

08001850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return 1;
 8001854:	2301      	movs	r3, #1
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_kill>:

int _kill(int pid, int sig)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800186a:	f006 fad9 	bl	8007e20 <__errno>
 800186e:	4603      	mov	r3, r0
 8001870:	2216      	movs	r2, #22
 8001872:	601a      	str	r2, [r3, #0]
  return -1;
 8001874:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_exit>:

void _exit (int status)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001888:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ffe7 	bl	8001860 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001892:	bf00      	nop
 8001894:	e7fd      	b.n	8001892 <_exit+0x12>

08001896 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	e00a      	b.n	80018be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018a8:	f3af 8000 	nop.w
 80018ac:	4601      	mov	r1, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	60ba      	str	r2, [r7, #8]
 80018b4:	b2ca      	uxtb	r2, r1
 80018b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dbf0      	blt.n	80018a8 <_read+0x12>
  }

  return len;
 80018c6:	687b      	ldr	r3, [r7, #4]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e009      	b.n	80018f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	60ba      	str	r2, [r7, #8]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fdaa 	bl	8001444 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3301      	adds	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	dbf1      	blt.n	80018e2 <_write+0x12>
  }
  return len;
 80018fe:	687b      	ldr	r3, [r7, #4]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_close>:

int _close(int file)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001910:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001930:	605a      	str	r2, [r3, #4]
  return 0;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <_isatty>:

int _isatty(int file)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001948:	2301      	movs	r3, #1
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001956:	b480      	push	{r7}
 8001958:	b085      	sub	sp, #20
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001978:	4a14      	ldr	r2, [pc, #80]	@ (80019cc <_sbrk+0x5c>)
 800197a:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <_sbrk+0x60>)
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001984:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800198c:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <_sbrk+0x64>)
 800198e:	4a12      	ldr	r2, [pc, #72]	@ (80019d8 <_sbrk+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001992:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d207      	bcs.n	80019b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a0:	f006 fa3e 	bl	8007e20 <__errno>
 80019a4:	4603      	mov	r3, r0
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b07      	ldr	r3, [pc, #28]	@ (80019d4 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a05      	ldr	r2, [pc, #20]	@ (80019d4 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20020000 	.word	0x20020000
 80019d0:	00000400 	.word	0x00000400
 80019d4:	200003e8 	.word	0x200003e8
 80019d8:	20000540 	.word	0x20000540

080019dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a00:	480d      	ldr	r0, [pc, #52]	@ (8001a38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a04:	f7ff ffea 	bl	80019dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480c      	ldr	r0, [pc, #48]	@ (8001a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a0a:	490d      	ldr	r1, [pc, #52]	@ (8001a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a44 <LoopForever+0xe>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a20:	4c0a      	ldr	r4, [pc, #40]	@ (8001a4c <LoopForever+0x16>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f006 f9fd 	bl	8007e2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a32:	f7ff fa77 	bl	8000f24 <main>

08001a36 <LoopForever>:

LoopForever:
    b LoopForever
 8001a36:	e7fe      	b.n	8001a36 <LoopForever>
  ldr   r0, =_estack
 8001a38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a44:	0800a0f4 	.word	0x0800a0f4
  ldr r2, =_sbss
 8001a48:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a4c:	2000053c 	.word	0x2000053c

08001a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC1_2_IRQHandler>

08001a52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f001 fde1 	bl	8003624 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a62:	2000      	movs	r0, #0
 8001a64:	f000 f80e 	bl	8001a84 <HAL_InitTick>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	e001      	b.n	8001a78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a74:	f7ff fcfe 	bl	8001474 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a78:	79fb      	ldrb	r3, [r7, #7]

}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a90:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <HAL_InitTick+0x68>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d022      	beq.n	8001ade <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a98:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <HAL_InitTick+0x6c>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <HAL_InitTick+0x68>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aac:	4618      	mov	r0, r3
 8001aae:	f001 fdec 	bl	800368a <HAL_SYSTICK_Config>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10f      	bne.n	8001ad8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b0f      	cmp	r3, #15
 8001abc:	d809      	bhi.n	8001ad2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ac6:	f001 fdb8 	bl	800363a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aca:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <HAL_InitTick+0x70>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	e007      	b.n	8001ae2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	e004      	b.n	8001ae2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
 8001adc:	e001      	b.n	8001ae2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000008 	.word	0x20000008
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000004 	.word	0x20000004

08001af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_IncTick+0x1c>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_IncTick+0x20>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4413      	add	r3, r2
 8001b06:	4a03      	ldr	r2, [pc, #12]	@ (8001b14 <HAL_IncTick+0x1c>)
 8001b08:	6013      	str	r3, [r2, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	200003ec 	.word	0x200003ec
 8001b18:	20000008 	.word	0x20000008

08001b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <HAL_GetTick+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	200003ec 	.word	0x200003ec

08001b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b3c:	f7ff ffee 	bl	8001b1c <HAL_GetTick>
 8001b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b4c:	d004      	beq.n	8001b58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b4e:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <HAL_Delay+0x40>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4413      	add	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b58:	bf00      	nop
 8001b5a:	f7ff ffdf 	bl	8001b1c <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d8f7      	bhi.n	8001b5a <HAL_Delay+0x26>
  {
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	bf00      	nop
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000008 	.word	0x20000008

08001b78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	609a      	str	r2, [r3, #8]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3360      	adds	r3, #96	@ 0x60
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <LL_ADC_SetOffset+0x44>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c18:	bf00      	nop
 8001c1a:	371c      	adds	r7, #28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	03fff000 	.word	0x03fff000

08001c28 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3360      	adds	r3, #96	@ 0x60
 8001c36:	461a      	mov	r2, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3360      	adds	r3, #96	@ 0x60
 8001c64:	461a      	mov	r2, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c7e:	bf00      	nop
 8001c80:	371c      	adds	r7, #28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b087      	sub	sp, #28
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3360      	adds	r3, #96	@ 0x60
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001cb4:	bf00      	nop
 8001cb6:	371c      	adds	r7, #28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3360      	adds	r3, #96	@ 0x60
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001cea:	bf00      	nop
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	615a      	str	r2, [r3, #20]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b087      	sub	sp, #28
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3330      	adds	r3, #48	@ 0x30
 8001d52:	461a      	mov	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	4413      	add	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	211f      	movs	r1, #31
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	401a      	ands	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	0e9b      	lsrs	r3, r3, #26
 8001d7a:	f003 011f 	and.w	r1, r3, #31
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d8e:	bf00      	nop
 8001d90:	371c      	adds	r7, #28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b087      	sub	sp, #28
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3314      	adds	r3, #20
 8001daa:	461a      	mov	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	0e5b      	lsrs	r3, r3, #25
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	4413      	add	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	0d1b      	lsrs	r3, r3, #20
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	2107      	movs	r1, #7
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	401a      	ands	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	0d1b      	lsrs	r3, r3, #20
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	431a      	orrs	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001de4:	bf00      	nop
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f003 0318 	and.w	r3, r3, #24
 8001e12:	4908      	ldr	r1, [pc, #32]	@ (8001e34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e14:	40d9      	lsrs	r1, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	400b      	ands	r3, r1
 8001e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	0007ffff 	.word	0x0007ffff

08001e38 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 031f 	and.w	r3, r3, #31
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6093      	str	r3, [r2, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ea4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ea8:	d101      	bne.n	8001eae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ecc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ed0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ef8:	d101      	bne.n	8001efe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <LL_ADC_IsEnabled+0x18>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <LL_ADC_IsEnabled+0x1a>
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f6a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f6e:	f043 0204 	orr.w	r2, r3, #4
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d101      	bne.n	8001f9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d101      	bne.n	8001fc0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b089      	sub	sp, #36	@ 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e1a9      	b.n	800233e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fa5f 	bl	80014bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff3f 	bl	8001e94 <LL_ADC_IsDeepPowerDownEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff25 	bl	8001e70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff5a 	bl	8001ee4 <LL_ADC_IsInternalRegulatorEnabled>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d115      	bne.n	8002062 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff3e 	bl	8001ebc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002040:	4b9c      	ldr	r3, [pc, #624]	@ (80022b4 <HAL_ADC_Init+0x2e4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	4a9c      	ldr	r2, [pc, #624]	@ (80022b8 <HAL_ADC_Init+0x2e8>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	099b      	lsrs	r3, r3, #6
 800204e:	3301      	adds	r3, #1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002054:	e002      	b.n	800205c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3b01      	subs	r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f9      	bne.n	8002056 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff3c 	bl	8001ee4 <LL_ADC_IsInternalRegulatorEnabled>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10d      	bne.n	800208e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002076:	f043 0210 	orr.w	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff75 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 8002098:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 8142 	bne.w	800232c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 813e 	bne.w	800232c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80020b8:	f043 0202 	orr.w	r2, r3, #2
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff35 	bl	8001f34 <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d141      	bne.n	8002154 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020d8:	d004      	beq.n	80020e4 <HAL_ADC_Init+0x114>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a77      	ldr	r2, [pc, #476]	@ (80022bc <HAL_ADC_Init+0x2ec>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d10f      	bne.n	8002104 <HAL_ADC_Init+0x134>
 80020e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020e8:	f7ff ff24 	bl	8001f34 <LL_ADC_IsEnabled>
 80020ec:	4604      	mov	r4, r0
 80020ee:	4873      	ldr	r0, [pc, #460]	@ (80022bc <HAL_ADC_Init+0x2ec>)
 80020f0:	f7ff ff20 	bl	8001f34 <LL_ADC_IsEnabled>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4323      	orrs	r3, r4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf0c      	ite	eq
 80020fc:	2301      	moveq	r3, #1
 80020fe:	2300      	movne	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	e012      	b.n	800212a <HAL_ADC_Init+0x15a>
 8002104:	486e      	ldr	r0, [pc, #440]	@ (80022c0 <HAL_ADC_Init+0x2f0>)
 8002106:	f7ff ff15 	bl	8001f34 <LL_ADC_IsEnabled>
 800210a:	4604      	mov	r4, r0
 800210c:	486d      	ldr	r0, [pc, #436]	@ (80022c4 <HAL_ADC_Init+0x2f4>)
 800210e:	f7ff ff11 	bl	8001f34 <LL_ADC_IsEnabled>
 8002112:	4603      	mov	r3, r0
 8002114:	431c      	orrs	r4, r3
 8002116:	486c      	ldr	r0, [pc, #432]	@ (80022c8 <HAL_ADC_Init+0x2f8>)
 8002118:	f7ff ff0c 	bl	8001f34 <LL_ADC_IsEnabled>
 800211c:	4603      	mov	r3, r0
 800211e:	4323      	orrs	r3, r4
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d012      	beq.n	8002154 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002136:	d004      	beq.n	8002142 <HAL_ADC_Init+0x172>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a5f      	ldr	r2, [pc, #380]	@ (80022bc <HAL_ADC_Init+0x2ec>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d101      	bne.n	8002146 <HAL_ADC_Init+0x176>
 8002142:	4a62      	ldr	r2, [pc, #392]	@ (80022cc <HAL_ADC_Init+0x2fc>)
 8002144:	e000      	b.n	8002148 <HAL_ADC_Init+0x178>
 8002146:	4a62      	ldr	r2, [pc, #392]	@ (80022d0 <HAL_ADC_Init+0x300>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f7ff fd12 	bl	8001b78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7f5b      	ldrb	r3, [r3, #29]
 8002158:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800215e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002164:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800216a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002172:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800217e:	2b01      	cmp	r3, #1
 8002180:	d106      	bne.n	8002190 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	045b      	lsls	r3, r3, #17
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	2b00      	cmp	r3, #0
 8002196:	d009      	beq.n	80021ac <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	4b48      	ldr	r3, [pc, #288]	@ (80022d4 <HAL_ADC_Init+0x304>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	69b9      	ldr	r1, [r7, #24]
 80021bc:	430b      	orrs	r3, r1
 80021be:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fee4 	bl	8001fa8 <LL_ADC_INJ_IsConversionOngoing>
 80021e0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d17f      	bne.n	80022e8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d17c      	bne.n	80022e8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021f2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021fa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800220a:	f023 0302 	bic.w	r3, r3, #2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	69b9      	ldr	r1, [r7, #24]
 8002214:	430b      	orrs	r3, r1
 8002216:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d017      	beq.n	8002250 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800222e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002238:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800223c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6911      	ldr	r1, [r2, #16]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	430b      	orrs	r3, r1
 800224a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800224e:	e013      	b.n	8002278 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800225e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002270:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002274:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800227e:	2b01      	cmp	r3, #1
 8002280:	d12a      	bne.n	80022d8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800228c:	f023 0304 	bic.w	r3, r3, #4
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002298:	4311      	orrs	r1, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800229e:	4311      	orrs	r1, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022a4:	430a      	orrs	r2, r1
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0201 	orr.w	r2, r2, #1
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	e019      	b.n	80022e8 <HAL_ADC_Init+0x318>
 80022b4:	20000000 	.word	0x20000000
 80022b8:	053e2d63 	.word	0x053e2d63
 80022bc:	50000100 	.word	0x50000100
 80022c0:	50000400 	.word	0x50000400
 80022c4:	50000500 	.word	0x50000500
 80022c8:	50000600 	.word	0x50000600
 80022cc:	50000300 	.word	0x50000300
 80022d0:	50000700 	.word	0x50000700
 80022d4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d10c      	bne.n	800230a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	f023 010f 	bic.w	r1, r3, #15
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	1e5a      	subs	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	631a      	str	r2, [r3, #48]	@ 0x30
 8002308:	e007      	b.n	800231a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 020f 	bic.w	r2, r2, #15
 8002318:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231e:	f023 0303 	bic.w	r3, r3, #3
 8002322:	f043 0201 	orr.w	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	65da      	str	r2, [r3, #92]	@ 0x5c
 800232a:	e007      	b.n	800233c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002330:	f043 0210 	orr.w	r2, r3, #16
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800233c:	7ffb      	ldrb	r3, [r7, #31]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	@ 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd90      	pop	{r4, r7, pc}
 8002346:	bf00      	nop

08002348 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800235a:	d004      	beq.n	8002366 <HAL_ADC_PollForConversion+0x1e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a77      	ldr	r2, [pc, #476]	@ (8002540 <HAL_ADC_PollForConversion+0x1f8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <HAL_ADC_PollForConversion+0x22>
 8002366:	4b77      	ldr	r3, [pc, #476]	@ (8002544 <HAL_ADC_PollForConversion+0x1fc>)
 8002368:	e000      	b.n	800236c <HAL_ADC_PollForConversion+0x24>
 800236a:	4b77      	ldr	r3, [pc, #476]	@ (8002548 <HAL_ADC_PollForConversion+0x200>)
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fd63 	bl	8001e38 <LL_ADC_GetMultimode>
 8002372:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b08      	cmp	r3, #8
 800237a:	d102      	bne.n	8002382 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800237c:	2308      	movs	r3, #8
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	e037      	b.n	80023f2 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2b05      	cmp	r3, #5
 800238c:	d002      	beq.n	8002394 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2b09      	cmp	r3, #9
 8002392:	d111      	bne.n	80023b8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d007      	beq.n	80023b2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a6:	f043 0220 	orr.w	r2, r3, #32
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0c1      	b.n	8002536 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80023b2:	2304      	movs	r3, #4
 80023b4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023b6:	e01c      	b.n	80023f2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023c0:	d004      	beq.n	80023cc <HAL_ADC_PollForConversion+0x84>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002540 <HAL_ADC_PollForConversion+0x1f8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d101      	bne.n	80023d0 <HAL_ADC_PollForConversion+0x88>
 80023cc:	4b5d      	ldr	r3, [pc, #372]	@ (8002544 <HAL_ADC_PollForConversion+0x1fc>)
 80023ce:	e000      	b.n	80023d2 <HAL_ADC_PollForConversion+0x8a>
 80023d0:	4b5d      	ldr	r3, [pc, #372]	@ (8002548 <HAL_ADC_PollForConversion+0x200>)
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fd3e 	bl	8001e54 <LL_ADC_GetMultiDMATransfer>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d007      	beq.n	80023ee <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e2:	f043 0220 	orr.w	r2, r3, #32
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e0a3      	b.n	8002536 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80023ee:	2304      	movs	r3, #4
 80023f0:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80023f2:	f7ff fb93 	bl	8001b1c <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023f8:	e021      	b.n	800243e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002400:	d01d      	beq.n	800243e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002402:	f7ff fb8b 	bl	8001b1c <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d302      	bcc.n	8002418 <HAL_ADC_PollForConversion+0xd0>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d112      	bne.n	800243e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10b      	bne.n	800243e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242a:	f043 0204 	orr.w	r2, r3, #4
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e07b      	b.n	8002536 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0d6      	beq.n	80023fa <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002450:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fc5d 	bl	8001d1c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d01c      	beq.n	80024a2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7f5b      	ldrb	r3, [r3, #29]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d118      	bne.n	80024a2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b08      	cmp	r3, #8
 800247c:	d111      	bne.n	80024a2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002482:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d105      	bne.n	80024a2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249a:	f043 0201 	orr.w	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a26      	ldr	r2, [pc, #152]	@ (8002540 <HAL_ADC_PollForConversion+0x1f8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d009      	beq.n	80024c0 <HAL_ADC_PollForConversion+0x178>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a26      	ldr	r2, [pc, #152]	@ (800254c <HAL_ADC_PollForConversion+0x204>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d002      	beq.n	80024bc <HAL_ADC_PollForConversion+0x174>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	e003      	b.n	80024c4 <HAL_ADC_PollForConversion+0x17c>
 80024bc:	4b24      	ldr	r3, [pc, #144]	@ (8002550 <HAL_ADC_PollForConversion+0x208>)
 80024be:	e001      	b.n	80024c4 <HAL_ADC_PollForConversion+0x17c>
 80024c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d008      	beq.n	80024de <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d002      	beq.n	80024de <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2b09      	cmp	r3, #9
 80024dc:	d104      	bne.n	80024e8 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	e014      	b.n	8002512 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a14      	ldr	r2, [pc, #80]	@ (8002540 <HAL_ADC_PollForConversion+0x1f8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d009      	beq.n	8002506 <HAL_ADC_PollForConversion+0x1be>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a15      	ldr	r2, [pc, #84]	@ (800254c <HAL_ADC_PollForConversion+0x204>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d002      	beq.n	8002502 <HAL_ADC_PollForConversion+0x1ba>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	e003      	b.n	800250a <HAL_ADC_PollForConversion+0x1c2>
 8002502:	4b13      	ldr	r3, [pc, #76]	@ (8002550 <HAL_ADC_PollForConversion+0x208>)
 8002504:	e001      	b.n	800250a <HAL_ADC_PollForConversion+0x1c2>
 8002506:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800250a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	2b08      	cmp	r3, #8
 8002516:	d104      	bne.n	8002522 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2208      	movs	r2, #8
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	e008      	b.n	8002534 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d103      	bne.n	8002534 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	220c      	movs	r2, #12
 8002532:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3720      	adds	r7, #32
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	50000100 	.word	0x50000100
 8002544:	50000300 	.word	0x50000300
 8002548:	50000700 	.word	0x50000700
 800254c:	50000500 	.word	0x50000500
 8002550:	50000400 	.word	0x50000400

08002554 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002568:	d004      	beq.n	8002574 <HAL_ADC_Start_DMA+0x20>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a5a      	ldr	r2, [pc, #360]	@ (80026d8 <HAL_ADC_Start_DMA+0x184>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d101      	bne.n	8002578 <HAL_ADC_Start_DMA+0x24>
 8002574:	4b59      	ldr	r3, [pc, #356]	@ (80026dc <HAL_ADC_Start_DMA+0x188>)
 8002576:	e000      	b.n	800257a <HAL_ADC_Start_DMA+0x26>
 8002578:	4b59      	ldr	r3, [pc, #356]	@ (80026e0 <HAL_ADC_Start_DMA+0x18c>)
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fc5c 	bl	8001e38 <LL_ADC_GetMultimode>
 8002580:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fcfb 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 809b 	bne.w	80026ca <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_Start_DMA+0x4e>
 800259e:	2302      	movs	r3, #2
 80025a0:	e096      	b.n	80026d0 <HAL_ADC_Start_DMA+0x17c>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a4d      	ldr	r2, [pc, #308]	@ (80026e4 <HAL_ADC_Start_DMA+0x190>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d008      	beq.n	80025c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b05      	cmp	r3, #5
 80025be:	d002      	beq.n	80025c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	2b09      	cmp	r3, #9
 80025c4:	d17a      	bne.n	80026bc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fd04 	bl	8002fd4 <ADC_Enable>
 80025cc:	4603      	mov	r3, r0
 80025ce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d16d      	bne.n	80026b2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a3a      	ldr	r2, [pc, #232]	@ (80026d8 <HAL_ADC_Start_DMA+0x184>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d009      	beq.n	8002608 <HAL_ADC_Start_DMA+0xb4>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a3b      	ldr	r2, [pc, #236]	@ (80026e8 <HAL_ADC_Start_DMA+0x194>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d002      	beq.n	8002604 <HAL_ADC_Start_DMA+0xb0>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	e003      	b.n	800260c <HAL_ADC_Start_DMA+0xb8>
 8002604:	4b39      	ldr	r3, [pc, #228]	@ (80026ec <HAL_ADC_Start_DMA+0x198>)
 8002606:	e001      	b.n	800260c <HAL_ADC_Start_DMA+0xb8>
 8002608:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	4293      	cmp	r3, r2
 8002612:	d002      	beq.n	800261a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d105      	bne.n	8002626 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002636:	f023 0206 	bic.w	r2, r3, #6
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	661a      	str	r2, [r3, #96]	@ 0x60
 800263e:	e002      	b.n	8002646 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264a:	4a29      	ldr	r2, [pc, #164]	@ (80026f0 <HAL_ADC_Start_DMA+0x19c>)
 800264c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002652:	4a28      	ldr	r2, [pc, #160]	@ (80026f4 <HAL_ADC_Start_DMA+0x1a0>)
 8002654:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265a:	4a27      	ldr	r2, [pc, #156]	@ (80026f8 <HAL_ADC_Start_DMA+0x1a4>)
 800265c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	221c      	movs	r2, #28
 8002664:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0210 	orr.w	r2, r2, #16
 800267c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3340      	adds	r3, #64	@ 0x40
 8002698:	4619      	mov	r1, r3
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f001 f8a9 	bl	80037f4 <HAL_DMA_Start_IT>
 80026a2:	4603      	mov	r3, r0
 80026a4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fc55 	bl	8001f5a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80026b0:	e00d      	b.n	80026ce <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80026ba:	e008      	b.n	80026ce <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80026c8:	e001      	b.n	80026ce <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
 80026cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	50000100 	.word	0x50000100
 80026dc:	50000300 	.word	0x50000300
 80026e0:	50000700 	.word	0x50000700
 80026e4:	50000600 	.word	0x50000600
 80026e8:	50000500 	.word	0x50000500
 80026ec:	50000400 	.word	0x50000400
 80026f0:	08003101 	.word	0x08003101
 80026f4:	080031d9 	.word	0x080031d9
 80026f8:	080031f5 	.word	0x080031f5

080026fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b0b6      	sub	sp, #216	@ 0xd8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800276e:	2b01      	cmp	r3, #1
 8002770:	d102      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x24>
 8002772:	2302      	movs	r3, #2
 8002774:	f000 bc13 	b.w	8002f9e <HAL_ADC_ConfigChannel+0x84a>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fbfc 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	f040 83f3 	bne.w	8002f78 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	f7ff facf 	bl	8001d42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fbea 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 80027ae:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fbf6 	bl	8001fa8 <LL_ADC_INJ_IsConversionOngoing>
 80027bc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f040 81d9 	bne.w	8002b7c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f040 81d4 	bne.w	8002b7c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027dc:	d10f      	bne.n	80027fe <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2200      	movs	r2, #0
 80027e8:	4619      	mov	r1, r3
 80027ea:	f7ff fad6 	bl	8001d9a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fa7d 	bl	8001cf6 <LL_ADC_SetSamplingTimeCommonConfig>
 80027fc:	e00e      	b.n	800281c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	461a      	mov	r2, r3
 800280c:	f7ff fac5 	bl	8001d9a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2100      	movs	r1, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fa6d 	bl	8001cf6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	695a      	ldr	r2, [r3, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	08db      	lsrs	r3, r3, #3
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b04      	cmp	r3, #4
 800283c:	d022      	beq.n	8002884 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6919      	ldr	r1, [r3, #16]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800284e:	f7ff f9c7 	bl	8001be0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6919      	ldr	r1, [r3, #16]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	461a      	mov	r2, r3
 8002860:	f7ff fa13 	bl	8001c8a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002870:	2b01      	cmp	r3, #1
 8002872:	d102      	bne.n	800287a <HAL_ADC_ConfigChannel+0x126>
 8002874:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002878:	e000      	b.n	800287c <HAL_ADC_ConfigChannel+0x128>
 800287a:	2300      	movs	r3, #0
 800287c:	461a      	mov	r2, r3
 800287e:	f7ff fa1f 	bl	8001cc0 <LL_ADC_SetOffsetSaturation>
 8002882:	e17b      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff f9cc 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002890:	4603      	mov	r3, r0
 8002892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10a      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x15c>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff f9c1 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 80028a6:	4603      	mov	r3, r0
 80028a8:	0e9b      	lsrs	r3, r3, #26
 80028aa:	f003 021f 	and.w	r2, r3, #31
 80028ae:	e01e      	b.n	80028ee <HAL_ADC_ConfigChannel+0x19a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff f9b6 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 80028bc:	4603      	mov	r3, r0
 80028be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80028de:	2320      	movs	r3, #32
 80028e0:	e004      	b.n	80028ec <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80028e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x1b2>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	0e9b      	lsrs	r3, r3, #26
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	e018      	b.n	8002938 <HAL_ADC_ConfigChannel+0x1e4>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800291a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800291e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002922:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800292a:	2320      	movs	r3, #32
 800292c:	e004      	b.n	8002938 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800292e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002938:	429a      	cmp	r2, r3
 800293a:	d106      	bne.n	800294a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2200      	movs	r2, #0
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff f985 	bl	8001c54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2101      	movs	r1, #1
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff f969 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002956:	4603      	mov	r3, r0
 8002958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x222>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2101      	movs	r1, #1
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff f95e 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 800296c:	4603      	mov	r3, r0
 800296e:	0e9b      	lsrs	r3, r3, #26
 8002970:	f003 021f 	and.w	r2, r3, #31
 8002974:	e01e      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x260>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2101      	movs	r1, #1
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff f953 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002982:	4603      	mov	r3, r0
 8002984:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002994:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002998:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800299c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80029a4:	2320      	movs	r3, #32
 80029a6:	e004      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80029a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d105      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x278>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	0e9b      	lsrs	r3, r3, #26
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	e018      	b.n	80029fe <HAL_ADC_ConfigChannel+0x2aa>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80029e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80029e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80029f0:	2320      	movs	r3, #32
 80029f2:	e004      	b.n	80029fe <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80029f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029f8:	fab3 f383 	clz	r3, r3
 80029fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d106      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2200      	movs	r2, #0
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff f922 	bl	8001c54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2102      	movs	r1, #2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff f906 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10a      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x2e8>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff f8fb 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002a32:	4603      	mov	r3, r0
 8002a34:	0e9b      	lsrs	r3, r3, #26
 8002a36:	f003 021f 	and.w	r2, r3, #31
 8002a3a:	e01e      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x326>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2102      	movs	r1, #2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff f8f0 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002a5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002a62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	e004      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002a6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d105      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x33e>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	0e9b      	lsrs	r3, r3, #26
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	e016      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x36c>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002aa4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002aa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002aaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	e004      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002ab6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d106      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2102      	movs	r1, #2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff f8c1 	bl	8001c54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2103      	movs	r1, #3
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff f8a5 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10a      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x3aa>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2103      	movs	r1, #3
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f89a 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002af4:	4603      	mov	r3, r0
 8002af6:	0e9b      	lsrs	r3, r3, #26
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	e017      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x3da>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2103      	movs	r1, #3
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff f88f 	bl	8001c28 <LL_ADC_GetOffsetChannel>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002b16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b18:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002b1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002b20:	2320      	movs	r3, #32
 8002b22:	e003      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002b24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d105      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x3f2>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	0e9b      	lsrs	r3, r3, #26
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	e011      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x416>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002b54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b56:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002b58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002b5e:	2320      	movs	r3, #32
 8002b60:	e003      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002b62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b64:	fab3 f383 	clz	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d106      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2200      	movs	r2, #0
 8002b74:	2103      	movs	r1, #3
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff f86c 	bl	8001c54 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff f9d7 	bl	8001f34 <LL_ADC_IsEnabled>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f040 813d 	bne.w	8002e08 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f7ff f928 	bl	8001df0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4aa2      	ldr	r2, [pc, #648]	@ (8002e30 <HAL_ADC_ConfigChannel+0x6dc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	f040 812e 	bne.w	8002e08 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10b      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x480>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	2b09      	cmp	r3, #9
 8002bca:	bf94      	ite	ls
 8002bcc:	2301      	movls	r3, #1
 8002bce:	2300      	movhi	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	e019      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x4b4>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002be2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002be4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002be6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002bec:	2320      	movs	r3, #32
 8002bee:	e003      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002bf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2b09      	cmp	r3, #9
 8002c00:	bf94      	ite	ls
 8002c02:	2301      	movls	r3, #1
 8002c04:	2300      	movhi	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d079      	beq.n	8002d00 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x4d4>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	0e9b      	lsrs	r3, r3, #26
 8002c1e:	3301      	adds	r3, #1
 8002c20:	069b      	lsls	r3, r3, #26
 8002c22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c26:	e015      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x500>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c38:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002c40:	2320      	movs	r3, #32
 8002c42:	e003      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	069b      	lsls	r3, r3, #26
 8002c50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d109      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x520>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0e9b      	lsrs	r3, r3, #26
 8002c66:	3301      	adds	r3, #1
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	e017      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x550>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002c82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c84:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e003      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002c90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca4:	ea42 0103 	orr.w	r1, r2, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x576>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f003 021f 	and.w	r2, r3, #31
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	051b      	lsls	r3, r3, #20
 8002cc8:	e018      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x5a8>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002ce2:	2320      	movs	r3, #32
 8002ce4:	e003      	b.n	8002cee <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f003 021f 	and.w	r2, r3, #31
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	4413      	add	r3, r2
 8002cfa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	e07e      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d107      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x5c8>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	0e9b      	lsrs	r3, r3, #26
 8002d12:	3301      	adds	r3, #1
 8002d14:	069b      	lsls	r3, r3, #26
 8002d16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d1a:	e015      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x5f4>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002d34:	2320      	movs	r3, #32
 8002d36:	e003      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	3301      	adds	r3, #1
 8002d42:	069b      	lsls	r3, r3, #26
 8002d44:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d109      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x614>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	0e9b      	lsrs	r3, r3, #26
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	2101      	movs	r1, #1
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	e017      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x644>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	61fb      	str	r3, [r7, #28]
  return result;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002d80:	2320      	movs	r3, #32
 8002d82:	e003      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	2101      	movs	r1, #1
 8002d94:	fa01 f303 	lsl.w	r3, r1, r3
 8002d98:	ea42 0103 	orr.w	r1, r2, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10d      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x670>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0e9b      	lsrs	r3, r3, #26
 8002dae:	3301      	adds	r3, #1
 8002db0:	f003 021f 	and.w	r2, r3, #31
 8002db4:	4613      	mov	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	3b1e      	subs	r3, #30
 8002dbc:	051b      	lsls	r3, r3, #20
 8002dbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002dc2:	e01b      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x6a8>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	613b      	str	r3, [r7, #16]
  return result;
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002ddc:	2320      	movs	r3, #32
 8002dde:	e003      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f003 021f 	and.w	r2, r3, #31
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	3b1e      	subs	r3, #30
 8002df6:	051b      	lsls	r3, r3, #20
 8002df8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dfc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e02:	4619      	mov	r1, r3
 8002e04:	f7fe ffc9 	bl	8001d9a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b09      	ldr	r3, [pc, #36]	@ (8002e34 <HAL_ADC_ConfigChannel+0x6e0>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80be 	beq.w	8002f92 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e1e:	d004      	beq.n	8002e2a <HAL_ADC_ConfigChannel+0x6d6>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a04      	ldr	r2, [pc, #16]	@ (8002e38 <HAL_ADC_ConfigChannel+0x6e4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10a      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x6ec>
 8002e2a:	4b04      	ldr	r3, [pc, #16]	@ (8002e3c <HAL_ADC_ConfigChannel+0x6e8>)
 8002e2c:	e009      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x6ee>
 8002e2e:	bf00      	nop
 8002e30:	407f0000 	.word	0x407f0000
 8002e34:	80080000 	.word	0x80080000
 8002e38:	50000100 	.word	0x50000100
 8002e3c:	50000300 	.word	0x50000300
 8002e40:	4b59      	ldr	r3, [pc, #356]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x854>)
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe febe 	bl	8001bc4 <LL_ADC_GetCommonPathInternalCh>
 8002e48:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a56      	ldr	r2, [pc, #344]	@ (8002fac <HAL_ADC_ConfigChannel+0x858>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d004      	beq.n	8002e60 <HAL_ADC_ConfigChannel+0x70c>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a55      	ldr	r2, [pc, #340]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x85c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d13a      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d134      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e74:	d005      	beq.n	8002e82 <HAL_ADC_ConfigChannel+0x72e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a4e      	ldr	r2, [pc, #312]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x860>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	f040 8085 	bne.w	8002f8c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e8a:	d004      	beq.n	8002e96 <HAL_ADC_ConfigChannel+0x742>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a49      	ldr	r2, [pc, #292]	@ (8002fb8 <HAL_ADC_ConfigChannel+0x864>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d101      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x746>
 8002e96:	4a49      	ldr	r2, [pc, #292]	@ (8002fbc <HAL_ADC_ConfigChannel+0x868>)
 8002e98:	e000      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x748>
 8002e9a:	4a43      	ldr	r2, [pc, #268]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x854>)
 8002e9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ea0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	f7fe fe79 	bl	8001b9e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eac:	4b44      	ldr	r3, [pc, #272]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x86c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	099b      	lsrs	r3, r3, #6
 8002eb2:	4a44      	ldr	r2, [pc, #272]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x870>)
 8002eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb8:	099b      	lsrs	r3, r3, #6
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ec6:	e002      	b.n	8002ece <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f9      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ed4:	e05a      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a3b      	ldr	r2, [pc, #236]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x874>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d125      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ee4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d11f      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a31      	ldr	r2, [pc, #196]	@ (8002fb8 <HAL_ADC_ConfigChannel+0x864>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d104      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x7ac>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a34      	ldr	r2, [pc, #208]	@ (8002fcc <HAL_ADC_ConfigChannel+0x878>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d047      	beq.n	8002f90 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f08:	d004      	beq.n	8002f14 <HAL_ADC_ConfigChannel+0x7c0>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8002fb8 <HAL_ADC_ConfigChannel+0x864>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d101      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x7c4>
 8002f14:	4a29      	ldr	r2, [pc, #164]	@ (8002fbc <HAL_ADC_ConfigChannel+0x868>)
 8002f16:	e000      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x7c6>
 8002f18:	4a23      	ldr	r2, [pc, #140]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x854>)
 8002f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f22:	4619      	mov	r1, r3
 8002f24:	4610      	mov	r0, r2
 8002f26:	f7fe fe3a 	bl	8001b9e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f2a:	e031      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a27      	ldr	r2, [pc, #156]	@ (8002fd0 <HAL_ADC_ConfigChannel+0x87c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d12d      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d127      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb8 <HAL_ADC_ConfigChannel+0x864>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d022      	beq.n	8002f92 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f54:	d004      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x80c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	@ (8002fb8 <HAL_ADC_ConfigChannel+0x864>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x810>
 8002f60:	4a16      	ldr	r2, [pc, #88]	@ (8002fbc <HAL_ADC_ConfigChannel+0x868>)
 8002f62:	e000      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x812>
 8002f64:	4a10      	ldr	r2, [pc, #64]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x854>)
 8002f66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4610      	mov	r0, r2
 8002f72:	f7fe fe14 	bl	8001b9e <LL_ADC_SetCommonPathInternalCh>
 8002f76:	e00c      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7c:	f043 0220 	orr.w	r2, r3, #32
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002f8a:	e002      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f9a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	37d8      	adds	r7, #216	@ 0xd8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	50000700 	.word	0x50000700
 8002fac:	c3210000 	.word	0xc3210000
 8002fb0:	90c00010 	.word	0x90c00010
 8002fb4:	50000600 	.word	0x50000600
 8002fb8:	50000100 	.word	0x50000100
 8002fbc:	50000300 	.word	0x50000300
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	053e2d63 	.word	0x053e2d63
 8002fc8:	c7520000 	.word	0xc7520000
 8002fcc:	50000500 	.word	0x50000500
 8002fd0:	cb840000 	.word	0xcb840000

08002fd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fe ffa5 	bl	8001f34 <LL_ADC_IsEnabled>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d176      	bne.n	80030de <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	4b3c      	ldr	r3, [pc, #240]	@ (80030e8 <ADC_Enable+0x114>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003002:	f043 0210 	orr.w	r2, r3, #16
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300e:	f043 0201 	orr.w	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e062      	b.n	80030e0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe ff74 	bl	8001f0c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800302c:	d004      	beq.n	8003038 <ADC_Enable+0x64>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a2e      	ldr	r2, [pc, #184]	@ (80030ec <ADC_Enable+0x118>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d101      	bne.n	800303c <ADC_Enable+0x68>
 8003038:	4b2d      	ldr	r3, [pc, #180]	@ (80030f0 <ADC_Enable+0x11c>)
 800303a:	e000      	b.n	800303e <ADC_Enable+0x6a>
 800303c:	4b2d      	ldr	r3, [pc, #180]	@ (80030f4 <ADC_Enable+0x120>)
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fdc0 	bl	8001bc4 <LL_ADC_GetCommonPathInternalCh>
 8003044:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800304a:	2b00      	cmp	r3, #0
 800304c:	d013      	beq.n	8003076 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800304e:	4b2a      	ldr	r3, [pc, #168]	@ (80030f8 <ADC_Enable+0x124>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	099b      	lsrs	r3, r3, #6
 8003054:	4a29      	ldr	r2, [pc, #164]	@ (80030fc <ADC_Enable+0x128>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	099b      	lsrs	r3, r3, #6
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003068:	e002      	b.n	8003070 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	3b01      	subs	r3, #1
 800306e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f9      	bne.n	800306a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003076:	f7fe fd51 	bl	8001b1c <HAL_GetTick>
 800307a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800307c:	e028      	b.n	80030d0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe ff56 	bl	8001f34 <LL_ADC_IsEnabled>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d104      	bne.n	8003098 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe ff3a 	bl	8001f0c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003098:	f7fe fd40 	bl	8001b1c <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d914      	bls.n	80030d0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d00d      	beq.n	80030d0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b8:	f043 0210 	orr.w	r2, r3, #16
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c4:	f043 0201 	orr.w	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e007      	b.n	80030e0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d1cf      	bne.n	800307e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	8000003f 	.word	0x8000003f
 80030ec:	50000100 	.word	0x50000100
 80030f0:	50000300 	.word	0x50000300
 80030f4:	50000700 	.word	0x50000700
 80030f8:	20000000 	.word	0x20000000
 80030fc:	053e2d63 	.word	0x053e2d63

08003100 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003112:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003116:	2b00      	cmp	r3, #0
 8003118:	d14b      	bne.n	80031b2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d021      	beq.n	8003178 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fe fdef 	bl	8001d1c <LL_ADC_REG_IsTriggerSourceSWStart>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d032      	beq.n	80031aa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d12b      	bne.n	80031aa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003156:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003162:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d11f      	bne.n	80031aa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316e:	f043 0201 	orr.w	r2, r3, #1
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003176:	e018      	b.n	80031aa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d111      	bne.n	80031aa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003196:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d105      	bne.n	80031aa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a2:	f043 0201 	orr.w	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f7ff fab3 	bl	8002716 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031b0:	e00e      	b.n	80031d0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff fabd 	bl	800273e <HAL_ADC_ErrorCallback>
}
 80031c4:	e004      	b.n	80031d0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	4798      	blx	r3
}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7ff fa9f 	bl	800272a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003200:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003206:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003212:	f043 0204 	orr.w	r2, r3, #4
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f7ff fa8f 	bl	800273e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <LL_ADC_IsEnabled>:
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <LL_ADC_IsEnabled+0x18>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <LL_ADC_IsEnabled+0x1a>
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <LL_ADC_REG_IsConversionOngoing>:
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b04      	cmp	r3, #4
 8003260:	d101      	bne.n	8003266 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b0a1      	sub	sp, #132	@ 0x84
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800328e:	2302      	movs	r3, #2
 8003290:	e0e7      	b.n	8003462 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800329a:	2300      	movs	r3, #0
 800329c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800329e:	2300      	movs	r3, #0
 80032a0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032aa:	d102      	bne.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032ac:	4b6f      	ldr	r3, [pc, #444]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	e009      	b.n	80032c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d102      	bne.n	80032c2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80032bc:	4b6d      	ldr	r3, [pc, #436]	@ (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032be:	60bb      	str	r3, [r7, #8]
 80032c0:	e001      	b.n	80032c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032c2:	2300      	movs	r3, #0
 80032c4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10b      	bne.n	80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d0:	f043 0220 	orr.w	r2, r3, #32
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0be      	b.n	8003462 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff ffb1 	bl	800324e <LL_ADC_REG_IsConversionOngoing>
 80032ec:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff ffab 	bl	800324e <LL_ADC_REG_IsConversionOngoing>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f040 80a0 	bne.w	8003440 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003300:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003302:	2b00      	cmp	r3, #0
 8003304:	f040 809c 	bne.w	8003440 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003310:	d004      	beq.n	800331c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a55      	ldr	r2, [pc, #340]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d101      	bne.n	8003320 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800331c:	4b56      	ldr	r3, [pc, #344]	@ (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800331e:	e000      	b.n	8003322 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003320:	4b56      	ldr	r3, [pc, #344]	@ (800347c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003322:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d04b      	beq.n	80033c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800332c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	6859      	ldr	r1, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800333e:	035b      	lsls	r3, r3, #13
 8003340:	430b      	orrs	r3, r1
 8003342:	431a      	orrs	r2, r3
 8003344:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003346:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003350:	d004      	beq.n	800335c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a45      	ldr	r2, [pc, #276]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d10f      	bne.n	800337c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800335c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003360:	f7ff ff62 	bl	8003228 <LL_ADC_IsEnabled>
 8003364:	4604      	mov	r4, r0
 8003366:	4841      	ldr	r0, [pc, #260]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003368:	f7ff ff5e 	bl	8003228 <LL_ADC_IsEnabled>
 800336c:	4603      	mov	r3, r0
 800336e:	4323      	orrs	r3, r4
 8003370:	2b00      	cmp	r3, #0
 8003372:	bf0c      	ite	eq
 8003374:	2301      	moveq	r3, #1
 8003376:	2300      	movne	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	e012      	b.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800337c:	483c      	ldr	r0, [pc, #240]	@ (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800337e:	f7ff ff53 	bl	8003228 <LL_ADC_IsEnabled>
 8003382:	4604      	mov	r4, r0
 8003384:	483b      	ldr	r0, [pc, #236]	@ (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003386:	f7ff ff4f 	bl	8003228 <LL_ADC_IsEnabled>
 800338a:	4603      	mov	r3, r0
 800338c:	431c      	orrs	r4, r3
 800338e:	483c      	ldr	r0, [pc, #240]	@ (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003390:	f7ff ff4a 	bl	8003228 <LL_ADC_IsEnabled>
 8003394:	4603      	mov	r3, r0
 8003396:	4323      	orrs	r3, r4
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d056      	beq.n	8003454 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80033ae:	f023 030f 	bic.w	r3, r3, #15
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	6811      	ldr	r1, [r2, #0]
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	6892      	ldr	r2, [r2, #8]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	431a      	orrs	r2, r3
 80033be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033c0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033c2:	e047      	b.n	8003454 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033d8:	d004      	beq.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a23      	ldr	r2, [pc, #140]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d10f      	bne.n	8003404 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80033e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80033e8:	f7ff ff1e 	bl	8003228 <LL_ADC_IsEnabled>
 80033ec:	4604      	mov	r4, r0
 80033ee:	481f      	ldr	r0, [pc, #124]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033f0:	f7ff ff1a 	bl	8003228 <LL_ADC_IsEnabled>
 80033f4:	4603      	mov	r3, r0
 80033f6:	4323      	orrs	r3, r4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e012      	b.n	800342a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003404:	481a      	ldr	r0, [pc, #104]	@ (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003406:	f7ff ff0f 	bl	8003228 <LL_ADC_IsEnabled>
 800340a:	4604      	mov	r4, r0
 800340c:	4819      	ldr	r0, [pc, #100]	@ (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800340e:	f7ff ff0b 	bl	8003228 <LL_ADC_IsEnabled>
 8003412:	4603      	mov	r3, r0
 8003414:	431c      	orrs	r4, r3
 8003416:	481a      	ldr	r0, [pc, #104]	@ (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003418:	f7ff ff06 	bl	8003228 <LL_ADC_IsEnabled>
 800341c:	4603      	mov	r3, r0
 800341e:	4323      	orrs	r3, r4
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d012      	beq.n	8003454 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800342e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003436:	f023 030f 	bic.w	r3, r3, #15
 800343a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800343c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800343e:	e009      	b.n	8003454 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003452:	e000      	b.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003454:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800345e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003462:	4618      	mov	r0, r3
 8003464:	3784      	adds	r7, #132	@ 0x84
 8003466:	46bd      	mov	sp, r7
 8003468:	bd90      	pop	{r4, r7, pc}
 800346a:	bf00      	nop
 800346c:	50000100 	.word	0x50000100
 8003470:	50000400 	.word	0x50000400
 8003474:	50000500 	.word	0x50000500
 8003478:	50000300 	.word	0x50000300
 800347c:	50000700 	.word	0x50000700
 8003480:	50000600 	.word	0x50000600

08003484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003494:	4b0c      	ldr	r3, [pc, #48]	@ (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034a0:	4013      	ands	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b6:	4a04      	ldr	r2, [pc, #16]	@ (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60d3      	str	r3, [r2, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d0:	4b04      	ldr	r3, [pc, #16]	@ (80034e4 <__NVIC_GetPriorityGrouping+0x18>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 0307 	and.w	r3, r3, #7
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	db0b      	blt.n	8003512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	4907      	ldr	r1, [pc, #28]	@ (8003520 <__NVIC_EnableIRQ+0x38>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2001      	movs	r0, #1
 800350a:	fa00 f202 	lsl.w	r2, r0, r2
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000e100 	.word	0xe000e100

08003524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	6039      	str	r1, [r7, #0]
 800352e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	2b00      	cmp	r3, #0
 8003536:	db0a      	blt.n	800354e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	490c      	ldr	r1, [pc, #48]	@ (8003570 <__NVIC_SetPriority+0x4c>)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	440b      	add	r3, r1
 8003548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800354c:	e00a      	b.n	8003564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	4908      	ldr	r1, [pc, #32]	@ (8003574 <__NVIC_SetPriority+0x50>)
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	3b04      	subs	r3, #4
 800355c:	0112      	lsls	r2, r2, #4
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	440b      	add	r3, r1
 8003562:	761a      	strb	r2, [r3, #24]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000e100 	.word	0xe000e100
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	@ 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f1c3 0307 	rsb	r3, r3, #7
 8003592:	2b04      	cmp	r3, #4
 8003594:	bf28      	it	cs
 8003596:	2304      	movcs	r3, #4
 8003598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3304      	adds	r3, #4
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d902      	bls.n	80035a8 <NVIC_EncodePriority+0x30>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3b03      	subs	r3, #3
 80035a6:	e000      	b.n	80035aa <NVIC_EncodePriority+0x32>
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	401a      	ands	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	43d9      	mvns	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	4313      	orrs	r3, r2
         );
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3724      	adds	r7, #36	@ 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035f0:	d301      	bcc.n	80035f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035f2:	2301      	movs	r3, #1
 80035f4:	e00f      	b.n	8003616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003620 <SysTick_Config+0x40>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035fe:	210f      	movs	r1, #15
 8003600:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003604:	f7ff ff8e 	bl	8003524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003608:	4b05      	ldr	r3, [pc, #20]	@ (8003620 <SysTick_Config+0x40>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800360e:	4b04      	ldr	r3, [pc, #16]	@ (8003620 <SysTick_Config+0x40>)
 8003610:	2207      	movs	r2, #7
 8003612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	e000e010 	.word	0xe000e010

08003624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ff29 	bl	8003484 <__NVIC_SetPriorityGrouping>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	4603      	mov	r3, r0
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003648:	f7ff ff40 	bl	80034cc <__NVIC_GetPriorityGrouping>
 800364c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	6978      	ldr	r0, [r7, #20]
 8003654:	f7ff ff90 	bl	8003578 <NVIC_EncodePriority>
 8003658:	4602      	mov	r2, r0
 800365a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff ff5f 	bl	8003524 <__NVIC_SetPriority>
}
 8003666:	bf00      	nop
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	4603      	mov	r3, r0
 8003676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff33 	bl	80034e8 <__NVIC_EnableIRQ>
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff ffa4 	bl	80035e0 <SysTick_Config>
 8003698:	4603      	mov	r3, r0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e08d      	b.n	80037d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	4b47      	ldr	r3, [pc, #284]	@ (80037dc <HAL_DMA_Init+0x138>)
 80036be:	429a      	cmp	r2, r3
 80036c0:	d80f      	bhi.n	80036e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	4b45      	ldr	r3, [pc, #276]	@ (80037e0 <HAL_DMA_Init+0x13c>)
 80036ca:	4413      	add	r3, r2
 80036cc:	4a45      	ldr	r2, [pc, #276]	@ (80037e4 <HAL_DMA_Init+0x140>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	009a      	lsls	r2, r3, #2
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a42      	ldr	r2, [pc, #264]	@ (80037e8 <HAL_DMA_Init+0x144>)
 80036de:	641a      	str	r2, [r3, #64]	@ 0x40
 80036e0:	e00e      	b.n	8003700 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	4b40      	ldr	r3, [pc, #256]	@ (80037ec <HAL_DMA_Init+0x148>)
 80036ea:	4413      	add	r3, r2
 80036ec:	4a3d      	ldr	r2, [pc, #244]	@ (80037e4 <HAL_DMA_Init+0x140>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	009a      	lsls	r2, r3, #2
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a3c      	ldr	r2, [pc, #240]	@ (80037f0 <HAL_DMA_Init+0x14c>)
 80036fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800371a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003724:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003730:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800373c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f9b6 	bl	8003ac4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003760:	d102      	bne.n	8003768 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800377c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d010      	beq.n	80037a8 <HAL_DMA_Init+0x104>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b04      	cmp	r3, #4
 800378c:	d80c      	bhi.n	80037a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f9d6 	bl	8003b40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037a4:	605a      	str	r2, [r3, #4]
 80037a6:	e008      	b.n	80037ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40020407 	.word	0x40020407
 80037e0:	bffdfff8 	.word	0xbffdfff8
 80037e4:	cccccccd 	.word	0xcccccccd
 80037e8:	40020000 	.word	0x40020000
 80037ec:	bffdfbf8 	.word	0xbffdfbf8
 80037f0:	40020400 	.word	0x40020400

080037f4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_DMA_Start_IT+0x20>
 8003810:	2302      	movs	r3, #2
 8003812:	e066      	b.n	80038e2 <HAL_DMA_Start_IT+0xee>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d155      	bne.n	80038d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0201 	bic.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f8fb 	bl	8003a48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	2b00      	cmp	r3, #0
 8003858:	d008      	beq.n	800386c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 020e 	orr.w	r2, r2, #14
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e00f      	b.n	800388c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0204 	bic.w	r2, r2, #4
 800387a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 020a 	orr.w	r2, r2, #10
 800388a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0201 	orr.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	e005      	b.n	80038e0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80038dc:	2302      	movs	r3, #2
 80038de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	2204      	movs	r2, #4
 800390c:	409a      	lsls	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4013      	ands	r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d026      	beq.n	8003964 <HAL_DMA_IRQHandler+0x7a>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d021      	beq.n	8003964 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d107      	bne.n	800393e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0204 	bic.w	r2, r2, #4
 800393c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003942:	f003 021f 	and.w	r2, r3, #31
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	2104      	movs	r1, #4
 800394c:	fa01 f202 	lsl.w	r2, r1, r2
 8003950:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003956:	2b00      	cmp	r3, #0
 8003958:	d071      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003962:	e06c      	b.n	8003a3e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	2202      	movs	r2, #2
 800396e:	409a      	lsls	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d02e      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d029      	beq.n	80039d6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10b      	bne.n	80039a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 020a 	bic.w	r2, r2, #10
 800399e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ac:	f003 021f 	and.w	r2, r3, #31
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b4:	2102      	movs	r1, #2
 80039b6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d038      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80039d4:	e033      	b.n	8003a3e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	2208      	movs	r2, #8
 80039e0:	409a      	lsls	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d02a      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d025      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 020e 	bic.w	r2, r2, #14
 8003a02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a08:	f003 021f 	and.w	r2, r3, #31
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a10:	2101      	movs	r1, #1
 8003a12:	fa01 f202 	lsl.w	r2, r1, r2
 8003a16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a3e:	bf00      	nop
 8003a40:	bf00      	nop
}
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a5e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d004      	beq.n	8003a72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a70:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a76:	f003 021f 	and.w	r2, r3, #31
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	2101      	movs	r1, #1
 8003a80:	fa01 f202 	lsl.w	r2, r1, r2
 8003a84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b10      	cmp	r3, #16
 8003a94:	d108      	bne.n	8003aa8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003aa6:	e007      	b.n	8003ab8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	60da      	str	r2, [r3, #12]
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4b16      	ldr	r3, [pc, #88]	@ (8003b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d802      	bhi.n	8003ade <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ad8:	4b15      	ldr	r3, [pc, #84]	@ (8003b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	e001      	b.n	8003ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003ade:	4b15      	ldr	r3, [pc, #84]	@ (8003b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ae0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	3b08      	subs	r3, #8
 8003aee:	4a12      	ldr	r2, [pc, #72]	@ (8003b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afc:	089b      	lsrs	r3, r3, #2
 8003afe:	009a      	lsls	r2, r3, #2
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4413      	add	r3, r2
 8003b04:	461a      	mov	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	2201      	movs	r2, #1
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b1e:	bf00      	nop
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40020407 	.word	0x40020407
 8003b30:	40020800 	.word	0x40020800
 8003b34:	40020820 	.word	0x40020820
 8003b38:	cccccccd 	.word	0xcccccccd
 8003b3c:	40020880 	.word	0x40020880

08003b40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4b0b      	ldr	r3, [pc, #44]	@ (8003b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a08      	ldr	r2, [pc, #32]	@ (8003b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b62:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	1000823f 	.word	0x1000823f
 8003b84:	40020940 	.word	0x40020940

08003b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b96:	e15a      	b.n	8003e4e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 814c 	beq.w	8003e48 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d005      	beq.n	8003bc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d130      	bne.n	8003c2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bfe:	2201      	movs	r2, #1
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43db      	mvns	r3, r3
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	091b      	lsrs	r3, r3, #4
 8003c14:	f003 0201 	and.w	r2, r3, #1
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d017      	beq.n	8003c66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	2203      	movs	r2, #3
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	43db      	mvns	r3, r3
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d123      	bne.n	8003cba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	08da      	lsrs	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3208      	adds	r2, #8
 8003c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	220f      	movs	r2, #15
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4013      	ands	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	08da      	lsrs	r2, r3, #3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3208      	adds	r2, #8
 8003cb4:	6939      	ldr	r1, [r7, #16]
 8003cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 0203 	and.w	r2, r3, #3
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 80a6 	beq.w	8003e48 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cfc:	4b5b      	ldr	r3, [pc, #364]	@ (8003e6c <HAL_GPIO_Init+0x2e4>)
 8003cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d00:	4a5a      	ldr	r2, [pc, #360]	@ (8003e6c <HAL_GPIO_Init+0x2e4>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d08:	4b58      	ldr	r3, [pc, #352]	@ (8003e6c <HAL_GPIO_Init+0x2e4>)
 8003d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d14:	4a56      	ldr	r2, [pc, #344]	@ (8003e70 <HAL_GPIO_Init+0x2e8>)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	089b      	lsrs	r3, r3, #2
 8003d1a:	3302      	adds	r3, #2
 8003d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	220f      	movs	r2, #15
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d3e:	d01f      	beq.n	8003d80 <HAL_GPIO_Init+0x1f8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a4c      	ldr	r2, [pc, #304]	@ (8003e74 <HAL_GPIO_Init+0x2ec>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d019      	beq.n	8003d7c <HAL_GPIO_Init+0x1f4>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a4b      	ldr	r2, [pc, #300]	@ (8003e78 <HAL_GPIO_Init+0x2f0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d013      	beq.n	8003d78 <HAL_GPIO_Init+0x1f0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a4a      	ldr	r2, [pc, #296]	@ (8003e7c <HAL_GPIO_Init+0x2f4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00d      	beq.n	8003d74 <HAL_GPIO_Init+0x1ec>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a49      	ldr	r2, [pc, #292]	@ (8003e80 <HAL_GPIO_Init+0x2f8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d007      	beq.n	8003d70 <HAL_GPIO_Init+0x1e8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a48      	ldr	r2, [pc, #288]	@ (8003e84 <HAL_GPIO_Init+0x2fc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d101      	bne.n	8003d6c <HAL_GPIO_Init+0x1e4>
 8003d68:	2305      	movs	r3, #5
 8003d6a:	e00a      	b.n	8003d82 <HAL_GPIO_Init+0x1fa>
 8003d6c:	2306      	movs	r3, #6
 8003d6e:	e008      	b.n	8003d82 <HAL_GPIO_Init+0x1fa>
 8003d70:	2304      	movs	r3, #4
 8003d72:	e006      	b.n	8003d82 <HAL_GPIO_Init+0x1fa>
 8003d74:	2303      	movs	r3, #3
 8003d76:	e004      	b.n	8003d82 <HAL_GPIO_Init+0x1fa>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e002      	b.n	8003d82 <HAL_GPIO_Init+0x1fa>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <HAL_GPIO_Init+0x1fa>
 8003d80:	2300      	movs	r3, #0
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	f002 0203 	and.w	r2, r2, #3
 8003d88:	0092      	lsls	r2, r2, #2
 8003d8a:	4093      	lsls	r3, r2
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d92:	4937      	ldr	r1, [pc, #220]	@ (8003e70 <HAL_GPIO_Init+0x2e8>)
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	089b      	lsrs	r3, r3, #2
 8003d98:	3302      	adds	r3, #2
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003da0:	4b39      	ldr	r3, [pc, #228]	@ (8003e88 <HAL_GPIO_Init+0x300>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4013      	ands	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dc4:	4a30      	ldr	r2, [pc, #192]	@ (8003e88 <HAL_GPIO_Init+0x300>)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dca:	4b2f      	ldr	r3, [pc, #188]	@ (8003e88 <HAL_GPIO_Init+0x300>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dee:	4a26      	ldr	r2, [pc, #152]	@ (8003e88 <HAL_GPIO_Init+0x300>)
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003df4:	4b24      	ldr	r3, [pc, #144]	@ (8003e88 <HAL_GPIO_Init+0x300>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e18:	4a1b      	ldr	r2, [pc, #108]	@ (8003e88 <HAL_GPIO_Init+0x300>)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003e88 <HAL_GPIO_Init+0x300>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	43db      	mvns	r3, r3
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e42:	4a11      	ldr	r2, [pc, #68]	@ (8003e88 <HAL_GPIO_Init+0x300>)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f47f ae9d 	bne.w	8003b98 <HAL_GPIO_Init+0x10>
  }
}
 8003e5e:	bf00      	nop
 8003e60:	bf00      	nop
 8003e62:	371c      	adds	r7, #28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40010000 	.word	0x40010000
 8003e74:	48000400 	.word	0x48000400
 8003e78:	48000800 	.word	0x48000800
 8003e7c:	48000c00 	.word	0x48000c00
 8003e80:	48001000 	.word	0x48001000
 8003e84:	48001400 	.word	0x48001400
 8003e88:	40010400 	.word	0x40010400

08003e8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d141      	bne.n	8003f1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e9a:	4b4b      	ldr	r3, [pc, #300]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea6:	d131      	bne.n	8003f0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ea8:	4b47      	ldr	r3, [pc, #284]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eae:	4a46      	ldr	r2, [pc, #280]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003eb8:	4b43      	ldr	r3, [pc, #268]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ec0:	4a41      	ldr	r2, [pc, #260]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ec6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ec8:	4b40      	ldr	r3, [pc, #256]	@ (8003fcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2232      	movs	r2, #50	@ 0x32
 8003ece:	fb02 f303 	mul.w	r3, r2, r3
 8003ed2:	4a3f      	ldr	r2, [pc, #252]	@ (8003fd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	0c9b      	lsrs	r3, r3, #18
 8003eda:	3301      	adds	r3, #1
 8003edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ede:	e002      	b.n	8003ee6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ee6:	4b38      	ldr	r3, [pc, #224]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef2:	d102      	bne.n	8003efa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f2      	bne.n	8003ee0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003efa:	4b33      	ldr	r3, [pc, #204]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f06:	d158      	bne.n	8003fba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e057      	b.n	8003fbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f12:	4a2d      	ldr	r2, [pc, #180]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003f1c:	e04d      	b.n	8003fba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f24:	d141      	bne.n	8003faa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f26:	4b28      	ldr	r3, [pc, #160]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f32:	d131      	bne.n	8003f98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f34:	4b24      	ldr	r3, [pc, #144]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f3a:	4a23      	ldr	r2, [pc, #140]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f44:	4b20      	ldr	r3, [pc, #128]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f54:	4b1d      	ldr	r3, [pc, #116]	@ (8003fcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2232      	movs	r2, #50	@ 0x32
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	0c9b      	lsrs	r3, r3, #18
 8003f66:	3301      	adds	r3, #1
 8003f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f6a:	e002      	b.n	8003f72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f72:	4b15      	ldr	r3, [pc, #84]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f7e:	d102      	bne.n	8003f86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f2      	bne.n	8003f6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f86:	4b10      	ldr	r3, [pc, #64]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f92:	d112      	bne.n	8003fba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e011      	b.n	8003fbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f98:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003fa8:	e007      	b.n	8003fba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003faa:	4b07      	ldr	r3, [pc, #28]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fb2:	4a05      	ldr	r2, [pc, #20]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	40007000 	.word	0x40007000
 8003fcc:	20000000 	.word	0x20000000
 8003fd0:	431bde83 	.word	0x431bde83

08003fd4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003fd8:	4b05      	ldr	r3, [pc, #20]	@ (8003ff0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4a04      	ldr	r2, [pc, #16]	@ (8003ff0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003fde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fe2:	6093      	str	r3, [r2, #8]
}
 8003fe4:	bf00      	nop
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40007000 	.word	0x40007000

08003ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e2fe      	b.n	8004604 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d075      	beq.n	80040fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004012:	4b97      	ldr	r3, [pc, #604]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800401c:	4b94      	ldr	r3, [pc, #592]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b0c      	cmp	r3, #12
 800402a:	d102      	bne.n	8004032 <HAL_RCC_OscConfig+0x3e>
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b03      	cmp	r3, #3
 8004030:	d002      	beq.n	8004038 <HAL_RCC_OscConfig+0x44>
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b08      	cmp	r3, #8
 8004036:	d10b      	bne.n	8004050 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004038:	4b8d      	ldr	r3, [pc, #564]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d05b      	beq.n	80040fc <HAL_RCC_OscConfig+0x108>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d157      	bne.n	80040fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e2d9      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004058:	d106      	bne.n	8004068 <HAL_RCC_OscConfig+0x74>
 800405a:	4b85      	ldr	r3, [pc, #532]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a84      	ldr	r2, [pc, #528]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 8004060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	e01d      	b.n	80040a4 <HAL_RCC_OscConfig+0xb0>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004070:	d10c      	bne.n	800408c <HAL_RCC_OscConfig+0x98>
 8004072:	4b7f      	ldr	r3, [pc, #508]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a7e      	ldr	r2, [pc, #504]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 8004078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	4b7c      	ldr	r3, [pc, #496]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a7b      	ldr	r2, [pc, #492]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 8004084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	e00b      	b.n	80040a4 <HAL_RCC_OscConfig+0xb0>
 800408c:	4b78      	ldr	r3, [pc, #480]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a77      	ldr	r2, [pc, #476]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 8004092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	4b75      	ldr	r3, [pc, #468]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a74      	ldr	r2, [pc, #464]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 800409e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d013      	beq.n	80040d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fd fd36 	bl	8001b1c <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b4:	f7fd fd32 	bl	8001b1c <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b64      	cmp	r3, #100	@ 0x64
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e29e      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0xc0>
 80040d2:	e014      	b.n	80040fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fd fd22 	bl	8001b1c <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fd fd1e 	bl	8001b1c <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	@ 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e28a      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ee:	4b60      	ldr	r3, [pc, #384]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0xe8>
 80040fa:	e000      	b.n	80040fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d075      	beq.n	80041f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800410a:	4b59      	ldr	r3, [pc, #356]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004114:	4b56      	ldr	r3, [pc, #344]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	2b0c      	cmp	r3, #12
 8004122:	d102      	bne.n	800412a <HAL_RCC_OscConfig+0x136>
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d002      	beq.n	8004130 <HAL_RCC_OscConfig+0x13c>
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b04      	cmp	r3, #4
 800412e:	d11f      	bne.n	8004170 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004130:	4b4f      	ldr	r3, [pc, #316]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCC_OscConfig+0x154>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e25d      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004148:	4b49      	ldr	r3, [pc, #292]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	061b      	lsls	r3, r3, #24
 8004156:	4946      	ldr	r1, [pc, #280]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 8004158:	4313      	orrs	r3, r2
 800415a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800415c:	4b45      	ldr	r3, [pc, #276]	@ (8004274 <HAL_RCC_OscConfig+0x280>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7fd fc8f 	bl	8001a84 <HAL_InitTick>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d043      	beq.n	80041f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e249      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d023      	beq.n	80041c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004178:	4b3d      	ldr	r3, [pc, #244]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a3c      	ldr	r2, [pc, #240]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 800417e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fd fcca 	bl	8001b1c <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800418c:	f7fd fcc6 	bl	8001b1c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e232      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800419e:	4b34      	ldr	r3, [pc, #208]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041aa:	4b31      	ldr	r3, [pc, #196]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	061b      	lsls	r3, r3, #24
 80041b8:	492d      	ldr	r1, [pc, #180]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	604b      	str	r3, [r1, #4]
 80041be:	e01a      	b.n	80041f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 80041c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fd fca6 	bl	8001b1c <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d4:	f7fd fca2 	bl	8001b1c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e20e      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041e6:	4b22      	ldr	r3, [pc, #136]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x1e0>
 80041f2:	e000      	b.n	80041f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d041      	beq.n	8004286 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01c      	beq.n	8004244 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800420a:	4b19      	ldr	r3, [pc, #100]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 800420c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004210:	4a17      	ldr	r2, [pc, #92]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421a:	f7fd fc7f 	bl	8001b1c <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004222:	f7fd fc7b 	bl	8001b1c <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e1e7      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004234:	4b0e      	ldr	r3, [pc, #56]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 8004236:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0ef      	beq.n	8004222 <HAL_RCC_OscConfig+0x22e>
 8004242:	e020      	b.n	8004286 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004244:	4b0a      	ldr	r3, [pc, #40]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 8004246:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800424a:	4a09      	ldr	r2, [pc, #36]	@ (8004270 <HAL_RCC_OscConfig+0x27c>)
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004254:	f7fd fc62 	bl	8001b1c <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800425a:	e00d      	b.n	8004278 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425c:	f7fd fc5e 	bl	8001b1c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d906      	bls.n	8004278 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e1ca      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
 800426e:	bf00      	nop
 8004270:	40021000 	.word	0x40021000
 8004274:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004278:	4b8c      	ldr	r3, [pc, #560]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 800427a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1ea      	bne.n	800425c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 80a6 	beq.w	80043e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004294:	2300      	movs	r3, #0
 8004296:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004298:	4b84      	ldr	r3, [pc, #528]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 800429a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_RCC_OscConfig+0x2b4>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <HAL_RCC_OscConfig+0x2b6>
 80042a8:	2300      	movs	r3, #0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00d      	beq.n	80042ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ae:	4b7f      	ldr	r3, [pc, #508]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 80042b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b2:	4a7e      	ldr	r2, [pc, #504]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 80042b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80042ba:	4b7c      	ldr	r3, [pc, #496]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 80042bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80042c6:	2301      	movs	r3, #1
 80042c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ca:	4b79      	ldr	r3, [pc, #484]	@ (80044b0 <HAL_RCC_OscConfig+0x4bc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d118      	bne.n	8004308 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d6:	4b76      	ldr	r3, [pc, #472]	@ (80044b0 <HAL_RCC_OscConfig+0x4bc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a75      	ldr	r2, [pc, #468]	@ (80044b0 <HAL_RCC_OscConfig+0x4bc>)
 80042dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e2:	f7fd fc1b 	bl	8001b1c <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ea:	f7fd fc17 	bl	8001b1c <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e183      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042fc:	4b6c      	ldr	r3, [pc, #432]	@ (80044b0 <HAL_RCC_OscConfig+0x4bc>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d108      	bne.n	8004322 <HAL_RCC_OscConfig+0x32e>
 8004310:	4b66      	ldr	r3, [pc, #408]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004316:	4a65      	ldr	r2, [pc, #404]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004320:	e024      	b.n	800436c <HAL_RCC_OscConfig+0x378>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b05      	cmp	r3, #5
 8004328:	d110      	bne.n	800434c <HAL_RCC_OscConfig+0x358>
 800432a:	4b60      	ldr	r3, [pc, #384]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 800432c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004330:	4a5e      	ldr	r2, [pc, #376]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 8004332:	f043 0304 	orr.w	r3, r3, #4
 8004336:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800433a:	4b5c      	ldr	r3, [pc, #368]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 800433c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004340:	4a5a      	ldr	r2, [pc, #360]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800434a:	e00f      	b.n	800436c <HAL_RCC_OscConfig+0x378>
 800434c:	4b57      	ldr	r3, [pc, #348]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004352:	4a56      	ldr	r2, [pc, #344]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800435c:	4b53      	ldr	r3, [pc, #332]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 800435e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004362:	4a52      	ldr	r2, [pc, #328]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 8004364:	f023 0304 	bic.w	r3, r3, #4
 8004368:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d016      	beq.n	80043a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004374:	f7fd fbd2 	bl	8001b1c <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800437a:	e00a      	b.n	8004392 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800437c:	f7fd fbce 	bl	8001b1c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e138      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004392:	4b46      	ldr	r3, [pc, #280]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0ed      	beq.n	800437c <HAL_RCC_OscConfig+0x388>
 80043a0:	e015      	b.n	80043ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a2:	f7fd fbbb 	bl	8001b1c <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043a8:	e00a      	b.n	80043c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043aa:	f7fd fbb7 	bl	8001b1c <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e121      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043c0:	4b3a      	ldr	r3, [pc, #232]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 80043c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1ed      	bne.n	80043aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043ce:	7ffb      	ldrb	r3, [r7, #31]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d105      	bne.n	80043e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d4:	4b35      	ldr	r3, [pc, #212]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 80043d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d8:	4a34      	ldr	r2, [pc, #208]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 80043da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d03c      	beq.n	8004466 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01c      	beq.n	800442e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043f4:	4b2d      	ldr	r3, [pc, #180]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 80043f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043fa:	4a2c      	ldr	r2, [pc, #176]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004404:	f7fd fb8a 	bl	8001b1c <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800440c:	f7fd fb86 	bl	8001b1c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e0f2      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800441e:	4b23      	ldr	r3, [pc, #140]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 8004420:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ef      	beq.n	800440c <HAL_RCC_OscConfig+0x418>
 800442c:	e01b      	b.n	8004466 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800442e:	4b1f      	ldr	r3, [pc, #124]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 8004430:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004434:	4a1d      	ldr	r2, [pc, #116]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 8004436:	f023 0301 	bic.w	r3, r3, #1
 800443a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443e:	f7fd fb6d 	bl	8001b1c <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004446:	f7fd fb69 	bl	8001b1c <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e0d5      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004458:	4b14      	ldr	r3, [pc, #80]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 800445a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1ef      	bne.n	8004446 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 80c9 	beq.w	8004602 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004470:	4b0e      	ldr	r3, [pc, #56]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b0c      	cmp	r3, #12
 800447a:	f000 8083 	beq.w	8004584 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d15e      	bne.n	8004544 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004486:	4b09      	ldr	r3, [pc, #36]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a08      	ldr	r2, [pc, #32]	@ (80044ac <HAL_RCC_OscConfig+0x4b8>)
 800448c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004492:	f7fd fb43 	bl	8001b1c <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004498:	e00c      	b.n	80044b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449a:	f7fd fb3f 	bl	8001b1c <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d905      	bls.n	80044b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e0ab      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b4:	4b55      	ldr	r3, [pc, #340]	@ (800460c <HAL_RCC_OscConfig+0x618>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1ec      	bne.n	800449a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044c0:	4b52      	ldr	r3, [pc, #328]	@ (800460c <HAL_RCC_OscConfig+0x618>)
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	4b52      	ldr	r3, [pc, #328]	@ (8004610 <HAL_RCC_OscConfig+0x61c>)
 80044c6:	4013      	ands	r3, r2
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6a11      	ldr	r1, [r2, #32]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044d0:	3a01      	subs	r2, #1
 80044d2:	0112      	lsls	r2, r2, #4
 80044d4:	4311      	orrs	r1, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80044da:	0212      	lsls	r2, r2, #8
 80044dc:	4311      	orrs	r1, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80044e2:	0852      	lsrs	r2, r2, #1
 80044e4:	3a01      	subs	r2, #1
 80044e6:	0552      	lsls	r2, r2, #21
 80044e8:	4311      	orrs	r1, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80044ee:	0852      	lsrs	r2, r2, #1
 80044f0:	3a01      	subs	r2, #1
 80044f2:	0652      	lsls	r2, r2, #25
 80044f4:	4311      	orrs	r1, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80044fa:	06d2      	lsls	r2, r2, #27
 80044fc:	430a      	orrs	r2, r1
 80044fe:	4943      	ldr	r1, [pc, #268]	@ (800460c <HAL_RCC_OscConfig+0x618>)
 8004500:	4313      	orrs	r3, r2
 8004502:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004504:	4b41      	ldr	r3, [pc, #260]	@ (800460c <HAL_RCC_OscConfig+0x618>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a40      	ldr	r2, [pc, #256]	@ (800460c <HAL_RCC_OscConfig+0x618>)
 800450a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800450e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004510:	4b3e      	ldr	r3, [pc, #248]	@ (800460c <HAL_RCC_OscConfig+0x618>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4a3d      	ldr	r2, [pc, #244]	@ (800460c <HAL_RCC_OscConfig+0x618>)
 8004516:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800451a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fd fafe 	bl	8001b1c <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004524:	f7fd fafa 	bl	8001b1c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e066      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004536:	4b35      	ldr	r3, [pc, #212]	@ (800460c <HAL_RCC_OscConfig+0x618>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x530>
 8004542:	e05e      	b.n	8004602 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004544:	4b31      	ldr	r3, [pc, #196]	@ (800460c <HAL_RCC_OscConfig+0x618>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a30      	ldr	r2, [pc, #192]	@ (800460c <HAL_RCC_OscConfig+0x618>)
 800454a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800454e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fd fae4 	bl	8001b1c <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004558:	f7fd fae0 	bl	8001b1c <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e04c      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800456a:	4b28      	ldr	r3, [pc, #160]	@ (800460c <HAL_RCC_OscConfig+0x618>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004576:	4b25      	ldr	r3, [pc, #148]	@ (800460c <HAL_RCC_OscConfig+0x618>)
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	4924      	ldr	r1, [pc, #144]	@ (800460c <HAL_RCC_OscConfig+0x618>)
 800457c:	4b25      	ldr	r3, [pc, #148]	@ (8004614 <HAL_RCC_OscConfig+0x620>)
 800457e:	4013      	ands	r3, r2
 8004580:	60cb      	str	r3, [r1, #12]
 8004582:	e03e      	b.n	8004602 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e039      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004590:	4b1e      	ldr	r3, [pc, #120]	@ (800460c <HAL_RCC_OscConfig+0x618>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f003 0203 	and.w	r2, r3, #3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d12c      	bne.n	80045fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	3b01      	subs	r3, #1
 80045b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d123      	bne.n	80045fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d11b      	bne.n	80045fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d113      	bne.n	80045fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e0:	085b      	lsrs	r3, r3, #1
 80045e2:	3b01      	subs	r3, #1
 80045e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d109      	bne.n	80045fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	3b01      	subs	r3, #1
 80045f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d001      	beq.n	8004602 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3720      	adds	r7, #32
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40021000 	.word	0x40021000
 8004610:	019f800c 	.word	0x019f800c
 8004614:	feeefffc 	.word	0xfeeefffc

08004618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e11e      	b.n	800486e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004630:	4b91      	ldr	r3, [pc, #580]	@ (8004878 <HAL_RCC_ClockConfig+0x260>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d910      	bls.n	8004660 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463e:	4b8e      	ldr	r3, [pc, #568]	@ (8004878 <HAL_RCC_ClockConfig+0x260>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f023 020f 	bic.w	r2, r3, #15
 8004646:	498c      	ldr	r1, [pc, #560]	@ (8004878 <HAL_RCC_ClockConfig+0x260>)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	4313      	orrs	r3, r2
 800464c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800464e:	4b8a      	ldr	r3, [pc, #552]	@ (8004878 <HAL_RCC_ClockConfig+0x260>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	429a      	cmp	r2, r3
 800465a:	d001      	beq.n	8004660 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e106      	b.n	800486e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d073      	beq.n	8004754 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b03      	cmp	r3, #3
 8004672:	d129      	bne.n	80046c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004674:	4b81      	ldr	r3, [pc, #516]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0f4      	b.n	800486e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004684:	f000 f99e 	bl	80049c4 <RCC_GetSysClockFreqFromPLLSource>
 8004688:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4a7c      	ldr	r2, [pc, #496]	@ (8004880 <HAL_RCC_ClockConfig+0x268>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d93f      	bls.n	8004712 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004692:	4b7a      	ldr	r3, [pc, #488]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d009      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d033      	beq.n	8004712 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d12f      	bne.n	8004712 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046b2:	4b72      	ldr	r3, [pc, #456]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046ba:	4a70      	ldr	r2, [pc, #448]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 80046bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80046c2:	2380      	movs	r3, #128	@ 0x80
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	e024      	b.n	8004712 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d107      	bne.n	80046e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046d0:	4b6a      	ldr	r3, [pc, #424]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0c6      	b.n	800486e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046e0:	4b66      	ldr	r3, [pc, #408]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0be      	b.n	800486e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80046f0:	f000 f8ce 	bl	8004890 <HAL_RCC_GetSysClockFreq>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4a61      	ldr	r2, [pc, #388]	@ (8004880 <HAL_RCC_ClockConfig+0x268>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d909      	bls.n	8004712 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046fe:	4b5f      	ldr	r3, [pc, #380]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004706:	4a5d      	ldr	r2, [pc, #372]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 8004708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800470c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800470e:	2380      	movs	r3, #128	@ 0x80
 8004710:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004712:	4b5a      	ldr	r3, [pc, #360]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f023 0203 	bic.w	r2, r3, #3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	4957      	ldr	r1, [pc, #348]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 8004720:	4313      	orrs	r3, r2
 8004722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004724:	f7fd f9fa 	bl	8001b1c <HAL_GetTick>
 8004728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472a:	e00a      	b.n	8004742 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800472c:	f7fd f9f6 	bl	8001b1c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800473a:	4293      	cmp	r3, r2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e095      	b.n	800486e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004742:	4b4e      	ldr	r3, [pc, #312]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 020c 	and.w	r2, r3, #12
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	429a      	cmp	r2, r3
 8004752:	d1eb      	bne.n	800472c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d023      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800476c:	4b43      	ldr	r3, [pc, #268]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	4a42      	ldr	r2, [pc, #264]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 8004772:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004776:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004784:	4b3d      	ldr	r3, [pc, #244]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800478c:	4a3b      	ldr	r2, [pc, #236]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 800478e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004792:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004794:	4b39      	ldr	r3, [pc, #228]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	4936      	ldr	r1, [pc, #216]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	608b      	str	r3, [r1, #8]
 80047a6:	e008      	b.n	80047ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2b80      	cmp	r3, #128	@ 0x80
 80047ac:	d105      	bne.n	80047ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80047ae:	4b33      	ldr	r3, [pc, #204]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	4a32      	ldr	r2, [pc, #200]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 80047b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004878 <HAL_RCC_ClockConfig+0x260>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d21d      	bcs.n	8004804 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004878 <HAL_RCC_ClockConfig+0x260>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f023 020f 	bic.w	r2, r3, #15
 80047d0:	4929      	ldr	r1, [pc, #164]	@ (8004878 <HAL_RCC_ClockConfig+0x260>)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047d8:	f7fd f9a0 	bl	8001b1c <HAL_GetTick>
 80047dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	e00a      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e0:	f7fd f99c 	bl	8001b1c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e03b      	b.n	800486e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f6:	4b20      	ldr	r3, [pc, #128]	@ (8004878 <HAL_RCC_ClockConfig+0x260>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d1ed      	bne.n	80047e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004810:	4b1a      	ldr	r3, [pc, #104]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4917      	ldr	r1, [pc, #92]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800482e:	4b13      	ldr	r3, [pc, #76]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	490f      	ldr	r1, [pc, #60]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 800483e:	4313      	orrs	r3, r2
 8004840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004842:	f000 f825 	bl	8004890 <HAL_RCC_GetSysClockFreq>
 8004846:	4602      	mov	r2, r0
 8004848:	4b0c      	ldr	r3, [pc, #48]	@ (800487c <HAL_RCC_ClockConfig+0x264>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	490c      	ldr	r1, [pc, #48]	@ (8004884 <HAL_RCC_ClockConfig+0x26c>)
 8004854:	5ccb      	ldrb	r3, [r1, r3]
 8004856:	f003 031f 	and.w	r3, r3, #31
 800485a:	fa22 f303 	lsr.w	r3, r2, r3
 800485e:	4a0a      	ldr	r2, [pc, #40]	@ (8004888 <HAL_RCC_ClockConfig+0x270>)
 8004860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004862:	4b0a      	ldr	r3, [pc, #40]	@ (800488c <HAL_RCC_ClockConfig+0x274>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7fd f90c 	bl	8001a84 <HAL_InitTick>
 800486c:	4603      	mov	r3, r0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40022000 	.word	0x40022000
 800487c:	40021000 	.word	0x40021000
 8004880:	04c4b400 	.word	0x04c4b400
 8004884:	08009d2c 	.word	0x08009d2c
 8004888:	20000000 	.word	0x20000000
 800488c:	20000004 	.word	0x20000004

08004890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004896:	4b2c      	ldr	r3, [pc, #176]	@ (8004948 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d102      	bne.n	80048a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048a2:	4b2a      	ldr	r3, [pc, #168]	@ (800494c <HAL_RCC_GetSysClockFreq+0xbc>)
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	e047      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80048a8:	4b27      	ldr	r3, [pc, #156]	@ (8004948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d102      	bne.n	80048ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048b4:	4b26      	ldr	r3, [pc, #152]	@ (8004950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	e03e      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80048ba:	4b23      	ldr	r3, [pc, #140]	@ (8004948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 030c 	and.w	r3, r3, #12
 80048c2:	2b0c      	cmp	r3, #12
 80048c4:	d136      	bne.n	8004934 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048c6:	4b20      	ldr	r3, [pc, #128]	@ (8004948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	3301      	adds	r3, #1
 80048dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d10c      	bne.n	80048fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004950 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	4a16      	ldr	r2, [pc, #88]	@ (8004948 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ee:	68d2      	ldr	r2, [r2, #12]
 80048f0:	0a12      	lsrs	r2, r2, #8
 80048f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80048f6:	fb02 f303 	mul.w	r3, r2, r3
 80048fa:	617b      	str	r3, [r7, #20]
      break;
 80048fc:	e00c      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048fe:	4a13      	ldr	r2, [pc, #76]	@ (800494c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	fbb2 f3f3 	udiv	r3, r2, r3
 8004906:	4a10      	ldr	r2, [pc, #64]	@ (8004948 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004908:	68d2      	ldr	r2, [r2, #12]
 800490a:	0a12      	lsrs	r2, r2, #8
 800490c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004910:	fb02 f303 	mul.w	r3, r2, r3
 8004914:	617b      	str	r3, [r7, #20]
      break;
 8004916:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004918:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <HAL_RCC_GetSysClockFreq+0xb8>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	0e5b      	lsrs	r3, r3, #25
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	3301      	adds	r3, #1
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	e001      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004938:	693b      	ldr	r3, [r7, #16]
}
 800493a:	4618      	mov	r0, r3
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40021000 	.word	0x40021000
 800494c:	00f42400 	.word	0x00f42400
 8004950:	016e3600 	.word	0x016e3600

08004954 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004958:	4b03      	ldr	r3, [pc, #12]	@ (8004968 <HAL_RCC_GetHCLKFreq+0x14>)
 800495a:	681b      	ldr	r3, [r3, #0]
}
 800495c:	4618      	mov	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	20000000 	.word	0x20000000

0800496c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004970:	f7ff fff0 	bl	8004954 <HAL_RCC_GetHCLKFreq>
 8004974:	4602      	mov	r2, r0
 8004976:	4b06      	ldr	r3, [pc, #24]	@ (8004990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	0a1b      	lsrs	r3, r3, #8
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	4904      	ldr	r1, [pc, #16]	@ (8004994 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004982:	5ccb      	ldrb	r3, [r1, r3]
 8004984:	f003 031f 	and.w	r3, r3, #31
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800498c:	4618      	mov	r0, r3
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40021000 	.word	0x40021000
 8004994:	08009d3c 	.word	0x08009d3c

08004998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800499c:	f7ff ffda 	bl	8004954 <HAL_RCC_GetHCLKFreq>
 80049a0:	4602      	mov	r2, r0
 80049a2:	4b06      	ldr	r3, [pc, #24]	@ (80049bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	0adb      	lsrs	r3, r3, #11
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	4904      	ldr	r1, [pc, #16]	@ (80049c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049ae:	5ccb      	ldrb	r3, [r1, r3]
 80049b0:	f003 031f 	and.w	r3, r3, #31
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40021000 	.word	0x40021000
 80049c0:	08009d3c 	.word	0x08009d3c

080049c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004a44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004a44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	091b      	lsrs	r3, r3, #4
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	3301      	adds	r3, #1
 80049e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d10c      	bne.n	8004a02 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049e8:	4a17      	ldr	r2, [pc, #92]	@ (8004a48 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f0:	4a14      	ldr	r2, [pc, #80]	@ (8004a44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049f2:	68d2      	ldr	r2, [r2, #12]
 80049f4:	0a12      	lsrs	r2, r2, #8
 80049f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80049fa:	fb02 f303 	mul.w	r3, r2, r3
 80049fe:	617b      	str	r3, [r7, #20]
    break;
 8004a00:	e00c      	b.n	8004a1c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a02:	4a12      	ldr	r2, [pc, #72]	@ (8004a4c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8004a44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a0c:	68d2      	ldr	r2, [r2, #12]
 8004a0e:	0a12      	lsrs	r2, r2, #8
 8004a10:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a14:	fb02 f303 	mul.w	r3, r2, r3
 8004a18:	617b      	str	r3, [r7, #20]
    break;
 8004a1a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a1c:	4b09      	ldr	r3, [pc, #36]	@ (8004a44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	0e5b      	lsrs	r3, r3, #25
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	3301      	adds	r3, #1
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a34:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004a36:	687b      	ldr	r3, [r7, #4]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	371c      	adds	r7, #28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	40021000 	.word	0x40021000
 8004a48:	016e3600 	.word	0x016e3600
 8004a4c:	00f42400 	.word	0x00f42400

08004a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a58:	2300      	movs	r3, #0
 8004a5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8098 	beq.w	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a72:	4b43      	ldr	r3, [pc, #268]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10d      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a7e:	4b40      	ldr	r3, [pc, #256]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a82:	4a3f      	ldr	r2, [pc, #252]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a8a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a92:	60bb      	str	r3, [r7, #8]
 8004a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a96:	2301      	movs	r3, #1
 8004a98:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a9a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a39      	ldr	r2, [pc, #228]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aa4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004aa6:	f7fd f839 	bl	8001b1c <HAL_GetTick>
 8004aaa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004aac:	e009      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aae:	f7fd f835 	bl	8001b1c <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d902      	bls.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	74fb      	strb	r3, [r7, #19]
        break;
 8004ac0:	e005      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ac2:	4b30      	ldr	r3, [pc, #192]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0ef      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ace:	7cfb      	ldrb	r3, [r7, #19]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d159      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ade:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d01e      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d019      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004af0:	4b23      	ldr	r3, [pc, #140]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004afa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004afc:	4b20      	ldr	r3, [pc, #128]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b02:	4a1f      	ldr	r2, [pc, #124]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b12:	4a1b      	ldr	r2, [pc, #108]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b1c:	4a18      	ldr	r2, [pc, #96]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d016      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2e:	f7fc fff5 	bl	8001b1c <HAL_GetTick>
 8004b32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b34:	e00b      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b36:	f7fc fff1 	bl	8001b1c <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d902      	bls.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	74fb      	strb	r3, [r7, #19]
            break;
 8004b4c:	e006      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0ec      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004b5c:	7cfb      	ldrb	r3, [r7, #19]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10b      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b62:	4b07      	ldr	r3, [pc, #28]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b70:	4903      	ldr	r1, [pc, #12]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004b78:	e008      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b7a:	7cfb      	ldrb	r3, [r7, #19]
 8004b7c:	74bb      	strb	r3, [r7, #18]
 8004b7e:	e005      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b80:	40021000 	.word	0x40021000
 8004b84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b88:	7cfb      	ldrb	r3, [r7, #19]
 8004b8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b8c:	7c7b      	ldrb	r3, [r7, #17]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d105      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b92:	4ba7      	ldr	r3, [pc, #668]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b96:	4aa6      	ldr	r2, [pc, #664]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004baa:	4ba1      	ldr	r3, [pc, #644]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb0:	f023 0203 	bic.w	r2, r3, #3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	499d      	ldr	r1, [pc, #628]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bcc:	4b98      	ldr	r3, [pc, #608]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd2:	f023 020c 	bic.w	r2, r3, #12
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	4995      	ldr	r1, [pc, #596]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bee:	4b90      	ldr	r3, [pc, #576]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	498c      	ldr	r1, [pc, #560]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c10:	4b87      	ldr	r3, [pc, #540]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	4984      	ldr	r1, [pc, #528]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c32:	4b7f      	ldr	r3, [pc, #508]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	497b      	ldr	r1, [pc, #492]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c54:	4b76      	ldr	r3, [pc, #472]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c5a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	4973      	ldr	r1, [pc, #460]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c76:	4b6e      	ldr	r3, [pc, #440]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	496a      	ldr	r1, [pc, #424]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c98:	4b65      	ldr	r3, [pc, #404]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	4962      	ldr	r1, [pc, #392]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cba:	4b5d      	ldr	r3, [pc, #372]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc8:	4959      	ldr	r1, [pc, #356]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cdc:	4b54      	ldr	r3, [pc, #336]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ce2:	f023 0203 	bic.w	r2, r3, #3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cea:	4951      	ldr	r1, [pc, #324]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cfe:	4b4c      	ldr	r3, [pc, #304]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0c:	4948      	ldr	r1, [pc, #288]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d015      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d20:	4b43      	ldr	r3, [pc, #268]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2e:	4940      	ldr	r1, [pc, #256]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d3e:	d105      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d40:	4b3b      	ldr	r3, [pc, #236]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	4a3a      	ldr	r2, [pc, #232]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d4a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d015      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d58:	4b35      	ldr	r3, [pc, #212]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d66:	4932      	ldr	r1, [pc, #200]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d76:	d105      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d78:	4b2d      	ldr	r3, [pc, #180]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d82:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d015      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d90:	4b27      	ldr	r3, [pc, #156]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9e:	4924      	ldr	r1, [pc, #144]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004daa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004dae:	d105      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004db0:	4b1f      	ldr	r3, [pc, #124]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	4a1e      	ldr	r2, [pc, #120]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d015      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dc8:	4b19      	ldr	r3, [pc, #100]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd6:	4916      	ldr	r1, [pc, #88]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004de6:	d105      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004de8:	4b11      	ldr	r3, [pc, #68]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	4a10      	ldr	r2, [pc, #64]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004df2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d019      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e00:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	4908      	ldr	r1, [pc, #32]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e1e:	d109      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e20:	4b03      	ldr	r3, [pc, #12]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	4a02      	ldr	r2, [pc, #8]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e2a:	60d3      	str	r3, [r2, #12]
 8004e2c:	e002      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004e2e:	bf00      	nop
 8004e30:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d015      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e40:	4b29      	ldr	r3, [pc, #164]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e46:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4e:	4926      	ldr	r1, [pc, #152]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e5e:	d105      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e60:	4b21      	ldr	r3, [pc, #132]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	4a20      	ldr	r2, [pc, #128]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e6a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d015      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004e78:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e86:	4918      	ldr	r1, [pc, #96]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e96:	d105      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e98:	4b13      	ldr	r3, [pc, #76]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4a12      	ldr	r2, [pc, #72]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d015      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004eb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ebe:	490a      	ldr	r1, [pc, #40]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ece:	d105      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed0:	4b05      	ldr	r3, [pc, #20]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4a04      	ldr	r2, [pc, #16]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ed6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eda:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004edc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40021000 	.word	0x40021000

08004eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e049      	b.n	8004f92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fc fbec 	bl	80016f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f000 fc3a 	bl	80057a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
	...

08004f9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d001      	beq.n	8004fb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e04c      	b.n	800504e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a26      	ldr	r2, [pc, #152]	@ (800505c <HAL_TIM_Base_Start+0xc0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d022      	beq.n	800500c <HAL_TIM_Base_Start+0x70>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fce:	d01d      	beq.n	800500c <HAL_TIM_Base_Start+0x70>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a22      	ldr	r2, [pc, #136]	@ (8005060 <HAL_TIM_Base_Start+0xc4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d018      	beq.n	800500c <HAL_TIM_Base_Start+0x70>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a21      	ldr	r2, [pc, #132]	@ (8005064 <HAL_TIM_Base_Start+0xc8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d013      	beq.n	800500c <HAL_TIM_Base_Start+0x70>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8005068 <HAL_TIM_Base_Start+0xcc>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00e      	beq.n	800500c <HAL_TIM_Base_Start+0x70>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800506c <HAL_TIM_Base_Start+0xd0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d009      	beq.n	800500c <HAL_TIM_Base_Start+0x70>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8005070 <HAL_TIM_Base_Start+0xd4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d004      	beq.n	800500c <HAL_TIM_Base_Start+0x70>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a1b      	ldr	r2, [pc, #108]	@ (8005074 <HAL_TIM_Base_Start+0xd8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d115      	bne.n	8005038 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	4b19      	ldr	r3, [pc, #100]	@ (8005078 <HAL_TIM_Base_Start+0xdc>)
 8005014:	4013      	ands	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2b06      	cmp	r3, #6
 800501c:	d015      	beq.n	800504a <HAL_TIM_Base_Start+0xae>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005024:	d011      	beq.n	800504a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0201 	orr.w	r2, r2, #1
 8005034:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005036:	e008      	b.n	800504a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	e000      	b.n	800504c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40012c00 	.word	0x40012c00
 8005060:	40000400 	.word	0x40000400
 8005064:	40000800 	.word	0x40000800
 8005068:	40000c00 	.word	0x40000c00
 800506c:	40013400 	.word	0x40013400
 8005070:	40014000 	.word	0x40014000
 8005074:	40015000 	.word	0x40015000
 8005078:	00010007 	.word	0x00010007

0800507c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e049      	b.n	8005122 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d106      	bne.n	80050a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7fc fb04 	bl	80016b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f000 fb72 	bl	80057a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d109      	bne.n	8005150 <HAL_TIM_PWM_Start+0x24>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	bf14      	ite	ne
 8005148:	2301      	movne	r3, #1
 800514a:	2300      	moveq	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	e03c      	b.n	80051ca <HAL_TIM_PWM_Start+0x9e>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b04      	cmp	r3, #4
 8005154:	d109      	bne.n	800516a <HAL_TIM_PWM_Start+0x3e>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b01      	cmp	r3, #1
 8005160:	bf14      	ite	ne
 8005162:	2301      	movne	r3, #1
 8005164:	2300      	moveq	r3, #0
 8005166:	b2db      	uxtb	r3, r3
 8005168:	e02f      	b.n	80051ca <HAL_TIM_PWM_Start+0x9e>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b08      	cmp	r3, #8
 800516e:	d109      	bne.n	8005184 <HAL_TIM_PWM_Start+0x58>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b01      	cmp	r3, #1
 800517a:	bf14      	ite	ne
 800517c:	2301      	movne	r3, #1
 800517e:	2300      	moveq	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	e022      	b.n	80051ca <HAL_TIM_PWM_Start+0x9e>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b0c      	cmp	r3, #12
 8005188:	d109      	bne.n	800519e <HAL_TIM_PWM_Start+0x72>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b01      	cmp	r3, #1
 8005194:	bf14      	ite	ne
 8005196:	2301      	movne	r3, #1
 8005198:	2300      	moveq	r3, #0
 800519a:	b2db      	uxtb	r3, r3
 800519c:	e015      	b.n	80051ca <HAL_TIM_PWM_Start+0x9e>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d109      	bne.n	80051b8 <HAL_TIM_PWM_Start+0x8c>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	bf14      	ite	ne
 80051b0:	2301      	movne	r3, #1
 80051b2:	2300      	moveq	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	e008      	b.n	80051ca <HAL_TIM_PWM_Start+0x9e>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	bf14      	ite	ne
 80051c4:	2301      	movne	r3, #1
 80051c6:	2300      	moveq	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e0a6      	b.n	8005320 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_PWM_Start+0xb6>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051e0:	e023      	b.n	800522a <HAL_TIM_PWM_Start+0xfe>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_PWM_Start+0xc6>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051f0:	e01b      	b.n	800522a <HAL_TIM_PWM_Start+0xfe>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_PWM_Start+0xd6>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005200:	e013      	b.n	800522a <HAL_TIM_PWM_Start+0xfe>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b0c      	cmp	r3, #12
 8005206:	d104      	bne.n	8005212 <HAL_TIM_PWM_Start+0xe6>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005210:	e00b      	b.n	800522a <HAL_TIM_PWM_Start+0xfe>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b10      	cmp	r3, #16
 8005216:	d104      	bne.n	8005222 <HAL_TIM_PWM_Start+0xf6>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005220:	e003      	b.n	800522a <HAL_TIM_PWM_Start+0xfe>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2202      	movs	r2, #2
 8005226:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2201      	movs	r2, #1
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 ff30 	bl	8006098 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a3a      	ldr	r2, [pc, #232]	@ (8005328 <HAL_TIM_PWM_Start+0x1fc>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d018      	beq.n	8005274 <HAL_TIM_PWM_Start+0x148>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a39      	ldr	r2, [pc, #228]	@ (800532c <HAL_TIM_PWM_Start+0x200>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d013      	beq.n	8005274 <HAL_TIM_PWM_Start+0x148>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a37      	ldr	r2, [pc, #220]	@ (8005330 <HAL_TIM_PWM_Start+0x204>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00e      	beq.n	8005274 <HAL_TIM_PWM_Start+0x148>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a36      	ldr	r2, [pc, #216]	@ (8005334 <HAL_TIM_PWM_Start+0x208>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d009      	beq.n	8005274 <HAL_TIM_PWM_Start+0x148>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a34      	ldr	r2, [pc, #208]	@ (8005338 <HAL_TIM_PWM_Start+0x20c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d004      	beq.n	8005274 <HAL_TIM_PWM_Start+0x148>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a33      	ldr	r2, [pc, #204]	@ (800533c <HAL_TIM_PWM_Start+0x210>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d101      	bne.n	8005278 <HAL_TIM_PWM_Start+0x14c>
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <HAL_TIM_PWM_Start+0x14e>
 8005278:	2300      	movs	r3, #0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800528c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a25      	ldr	r2, [pc, #148]	@ (8005328 <HAL_TIM_PWM_Start+0x1fc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d022      	beq.n	80052de <HAL_TIM_PWM_Start+0x1b2>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052a0:	d01d      	beq.n	80052de <HAL_TIM_PWM_Start+0x1b2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a26      	ldr	r2, [pc, #152]	@ (8005340 <HAL_TIM_PWM_Start+0x214>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d018      	beq.n	80052de <HAL_TIM_PWM_Start+0x1b2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a24      	ldr	r2, [pc, #144]	@ (8005344 <HAL_TIM_PWM_Start+0x218>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d013      	beq.n	80052de <HAL_TIM_PWM_Start+0x1b2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a23      	ldr	r2, [pc, #140]	@ (8005348 <HAL_TIM_PWM_Start+0x21c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00e      	beq.n	80052de <HAL_TIM_PWM_Start+0x1b2>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a19      	ldr	r2, [pc, #100]	@ (800532c <HAL_TIM_PWM_Start+0x200>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d009      	beq.n	80052de <HAL_TIM_PWM_Start+0x1b2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a18      	ldr	r2, [pc, #96]	@ (8005330 <HAL_TIM_PWM_Start+0x204>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d004      	beq.n	80052de <HAL_TIM_PWM_Start+0x1b2>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a18      	ldr	r2, [pc, #96]	@ (800533c <HAL_TIM_PWM_Start+0x210>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d115      	bne.n	800530a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	4b19      	ldr	r3, [pc, #100]	@ (800534c <HAL_TIM_PWM_Start+0x220>)
 80052e6:	4013      	ands	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b06      	cmp	r3, #6
 80052ee:	d015      	beq.n	800531c <HAL_TIM_PWM_Start+0x1f0>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052f6:	d011      	beq.n	800531c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005308:	e008      	b.n	800531c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0201 	orr.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	e000      	b.n	800531e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40012c00 	.word	0x40012c00
 800532c:	40013400 	.word	0x40013400
 8005330:	40014000 	.word	0x40014000
 8005334:	40014400 	.word	0x40014400
 8005338:	40014800 	.word	0x40014800
 800533c:	40015000 	.word	0x40015000
 8005340:	40000400 	.word	0x40000400
 8005344:	40000800 	.word	0x40000800
 8005348:	40000c00 	.word	0x40000c00
 800534c:	00010007 	.word	0x00010007

08005350 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005366:	2b01      	cmp	r3, #1
 8005368:	d101      	bne.n	800536e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800536a:	2302      	movs	r3, #2
 800536c:	e0ff      	b.n	800556e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b14      	cmp	r3, #20
 800537a:	f200 80f0 	bhi.w	800555e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800537e:	a201      	add	r2, pc, #4	@ (adr r2, 8005384 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	080053d9 	.word	0x080053d9
 8005388:	0800555f 	.word	0x0800555f
 800538c:	0800555f 	.word	0x0800555f
 8005390:	0800555f 	.word	0x0800555f
 8005394:	08005419 	.word	0x08005419
 8005398:	0800555f 	.word	0x0800555f
 800539c:	0800555f 	.word	0x0800555f
 80053a0:	0800555f 	.word	0x0800555f
 80053a4:	0800545b 	.word	0x0800545b
 80053a8:	0800555f 	.word	0x0800555f
 80053ac:	0800555f 	.word	0x0800555f
 80053b0:	0800555f 	.word	0x0800555f
 80053b4:	0800549b 	.word	0x0800549b
 80053b8:	0800555f 	.word	0x0800555f
 80053bc:	0800555f 	.word	0x0800555f
 80053c0:	0800555f 	.word	0x0800555f
 80053c4:	080054dd 	.word	0x080054dd
 80053c8:	0800555f 	.word	0x0800555f
 80053cc:	0800555f 	.word	0x0800555f
 80053d0:	0800555f 	.word	0x0800555f
 80053d4:	0800551d 	.word	0x0800551d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68b9      	ldr	r1, [r7, #8]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fa94 	bl	800590c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699a      	ldr	r2, [r3, #24]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0208 	orr.w	r2, r2, #8
 80053f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699a      	ldr	r2, [r3, #24]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0204 	bic.w	r2, r2, #4
 8005402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6999      	ldr	r1, [r3, #24]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	691a      	ldr	r2, [r3, #16]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	619a      	str	r2, [r3, #24]
      break;
 8005416:	e0a5      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68b9      	ldr	r1, [r7, #8]
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fb0e 	bl	8005a40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699a      	ldr	r2, [r3, #24]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6999      	ldr	r1, [r3, #24]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	021a      	lsls	r2, r3, #8
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	619a      	str	r2, [r3, #24]
      break;
 8005458:	e084      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	4618      	mov	r0, r3
 8005462:	f000 fb81 	bl	8005b68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0208 	orr.w	r2, r2, #8
 8005474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69da      	ldr	r2, [r3, #28]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0204 	bic.w	r2, r2, #4
 8005484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69d9      	ldr	r1, [r3, #28]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	61da      	str	r2, [r3, #28]
      break;
 8005498:	e064      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 fbf3 	bl	8005c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69da      	ldr	r2, [r3, #28]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69da      	ldr	r2, [r3, #28]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69d9      	ldr	r1, [r3, #28]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	021a      	lsls	r2, r3, #8
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	61da      	str	r2, [r3, #28]
      break;
 80054da:	e043      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fc66 	bl	8005db4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0208 	orr.w	r2, r2, #8
 80054f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0204 	bic.w	r2, r2, #4
 8005506:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800551a:	e023      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fcb0 	bl	8005e88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005536:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005546:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	021a      	lsls	r2, r3, #8
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800555c:	e002      	b.n	8005564 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	75fb      	strb	r3, [r7, #23]
      break;
 8005562:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800556c:	7dfb      	ldrb	r3, [r7, #23]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop

08005578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <HAL_TIM_ConfigClockSource+0x1c>
 8005590:	2302      	movs	r3, #2
 8005592:	e0f6      	b.n	8005782 <HAL_TIM_ConfigClockSource+0x20a>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80055b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a6f      	ldr	r2, [pc, #444]	@ (800578c <HAL_TIM_ConfigClockSource+0x214>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	f000 80c1 	beq.w	8005756 <HAL_TIM_ConfigClockSource+0x1de>
 80055d4:	4a6d      	ldr	r2, [pc, #436]	@ (800578c <HAL_TIM_ConfigClockSource+0x214>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	f200 80c6 	bhi.w	8005768 <HAL_TIM_ConfigClockSource+0x1f0>
 80055dc:	4a6c      	ldr	r2, [pc, #432]	@ (8005790 <HAL_TIM_ConfigClockSource+0x218>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	f000 80b9 	beq.w	8005756 <HAL_TIM_ConfigClockSource+0x1de>
 80055e4:	4a6a      	ldr	r2, [pc, #424]	@ (8005790 <HAL_TIM_ConfigClockSource+0x218>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	f200 80be 	bhi.w	8005768 <HAL_TIM_ConfigClockSource+0x1f0>
 80055ec:	4a69      	ldr	r2, [pc, #420]	@ (8005794 <HAL_TIM_ConfigClockSource+0x21c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	f000 80b1 	beq.w	8005756 <HAL_TIM_ConfigClockSource+0x1de>
 80055f4:	4a67      	ldr	r2, [pc, #412]	@ (8005794 <HAL_TIM_ConfigClockSource+0x21c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	f200 80b6 	bhi.w	8005768 <HAL_TIM_ConfigClockSource+0x1f0>
 80055fc:	4a66      	ldr	r2, [pc, #408]	@ (8005798 <HAL_TIM_ConfigClockSource+0x220>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	f000 80a9 	beq.w	8005756 <HAL_TIM_ConfigClockSource+0x1de>
 8005604:	4a64      	ldr	r2, [pc, #400]	@ (8005798 <HAL_TIM_ConfigClockSource+0x220>)
 8005606:	4293      	cmp	r3, r2
 8005608:	f200 80ae 	bhi.w	8005768 <HAL_TIM_ConfigClockSource+0x1f0>
 800560c:	4a63      	ldr	r2, [pc, #396]	@ (800579c <HAL_TIM_ConfigClockSource+0x224>)
 800560e:	4293      	cmp	r3, r2
 8005610:	f000 80a1 	beq.w	8005756 <HAL_TIM_ConfigClockSource+0x1de>
 8005614:	4a61      	ldr	r2, [pc, #388]	@ (800579c <HAL_TIM_ConfigClockSource+0x224>)
 8005616:	4293      	cmp	r3, r2
 8005618:	f200 80a6 	bhi.w	8005768 <HAL_TIM_ConfigClockSource+0x1f0>
 800561c:	4a60      	ldr	r2, [pc, #384]	@ (80057a0 <HAL_TIM_ConfigClockSource+0x228>)
 800561e:	4293      	cmp	r3, r2
 8005620:	f000 8099 	beq.w	8005756 <HAL_TIM_ConfigClockSource+0x1de>
 8005624:	4a5e      	ldr	r2, [pc, #376]	@ (80057a0 <HAL_TIM_ConfigClockSource+0x228>)
 8005626:	4293      	cmp	r3, r2
 8005628:	f200 809e 	bhi.w	8005768 <HAL_TIM_ConfigClockSource+0x1f0>
 800562c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005630:	f000 8091 	beq.w	8005756 <HAL_TIM_ConfigClockSource+0x1de>
 8005634:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005638:	f200 8096 	bhi.w	8005768 <HAL_TIM_ConfigClockSource+0x1f0>
 800563c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005640:	f000 8089 	beq.w	8005756 <HAL_TIM_ConfigClockSource+0x1de>
 8005644:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005648:	f200 808e 	bhi.w	8005768 <HAL_TIM_ConfigClockSource+0x1f0>
 800564c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005650:	d03e      	beq.n	80056d0 <HAL_TIM_ConfigClockSource+0x158>
 8005652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005656:	f200 8087 	bhi.w	8005768 <HAL_TIM_ConfigClockSource+0x1f0>
 800565a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800565e:	f000 8086 	beq.w	800576e <HAL_TIM_ConfigClockSource+0x1f6>
 8005662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005666:	d87f      	bhi.n	8005768 <HAL_TIM_ConfigClockSource+0x1f0>
 8005668:	2b70      	cmp	r3, #112	@ 0x70
 800566a:	d01a      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0x12a>
 800566c:	2b70      	cmp	r3, #112	@ 0x70
 800566e:	d87b      	bhi.n	8005768 <HAL_TIM_ConfigClockSource+0x1f0>
 8005670:	2b60      	cmp	r3, #96	@ 0x60
 8005672:	d050      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x19e>
 8005674:	2b60      	cmp	r3, #96	@ 0x60
 8005676:	d877      	bhi.n	8005768 <HAL_TIM_ConfigClockSource+0x1f0>
 8005678:	2b50      	cmp	r3, #80	@ 0x50
 800567a:	d03c      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x17e>
 800567c:	2b50      	cmp	r3, #80	@ 0x50
 800567e:	d873      	bhi.n	8005768 <HAL_TIM_ConfigClockSource+0x1f0>
 8005680:	2b40      	cmp	r3, #64	@ 0x40
 8005682:	d058      	beq.n	8005736 <HAL_TIM_ConfigClockSource+0x1be>
 8005684:	2b40      	cmp	r3, #64	@ 0x40
 8005686:	d86f      	bhi.n	8005768 <HAL_TIM_ConfigClockSource+0x1f0>
 8005688:	2b30      	cmp	r3, #48	@ 0x30
 800568a:	d064      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x1de>
 800568c:	2b30      	cmp	r3, #48	@ 0x30
 800568e:	d86b      	bhi.n	8005768 <HAL_TIM_ConfigClockSource+0x1f0>
 8005690:	2b20      	cmp	r3, #32
 8005692:	d060      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x1de>
 8005694:	2b20      	cmp	r3, #32
 8005696:	d867      	bhi.n	8005768 <HAL_TIM_ConfigClockSource+0x1f0>
 8005698:	2b00      	cmp	r3, #0
 800569a:	d05c      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x1de>
 800569c:	2b10      	cmp	r3, #16
 800569e:	d05a      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0x1de>
 80056a0:	e062      	b.n	8005768 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056b2:	f000 fcd1 	bl	8006058 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	609a      	str	r2, [r3, #8]
      break;
 80056ce:	e04f      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056e0:	f000 fcba 	bl	8006058 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056f2:	609a      	str	r2, [r3, #8]
      break;
 80056f4:	e03c      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005702:	461a      	mov	r2, r3
 8005704:	f000 fc2c 	bl	8005f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2150      	movs	r1, #80	@ 0x50
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fc85 	bl	800601e <TIM_ITRx_SetConfig>
      break;
 8005714:	e02c      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005722:	461a      	mov	r2, r3
 8005724:	f000 fc4b 	bl	8005fbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2160      	movs	r1, #96	@ 0x60
 800572e:	4618      	mov	r0, r3
 8005730:	f000 fc75 	bl	800601e <TIM_ITRx_SetConfig>
      break;
 8005734:	e01c      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005742:	461a      	mov	r2, r3
 8005744:	f000 fc0c 	bl	8005f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2140      	movs	r1, #64	@ 0x40
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fc65 	bl	800601e <TIM_ITRx_SetConfig>
      break;
 8005754:	e00c      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f000 fc5c 	bl	800601e <TIM_ITRx_SetConfig>
      break;
 8005766:	e003      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	73fb      	strb	r3, [r7, #15]
      break;
 800576c:	e000      	b.n	8005770 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800576e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005780:	7bfb      	ldrb	r3, [r7, #15]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	00100070 	.word	0x00100070
 8005790:	00100060 	.word	0x00100060
 8005794:	00100050 	.word	0x00100050
 8005798:	00100040 	.word	0x00100040
 800579c:	00100030 	.word	0x00100030
 80057a0:	00100020 	.word	0x00100020

080057a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a4c      	ldr	r2, [pc, #304]	@ (80058e8 <TIM_Base_SetConfig+0x144>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d017      	beq.n	80057ec <TIM_Base_SetConfig+0x48>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c2:	d013      	beq.n	80057ec <TIM_Base_SetConfig+0x48>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a49      	ldr	r2, [pc, #292]	@ (80058ec <TIM_Base_SetConfig+0x148>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00f      	beq.n	80057ec <TIM_Base_SetConfig+0x48>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a48      	ldr	r2, [pc, #288]	@ (80058f0 <TIM_Base_SetConfig+0x14c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00b      	beq.n	80057ec <TIM_Base_SetConfig+0x48>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a47      	ldr	r2, [pc, #284]	@ (80058f4 <TIM_Base_SetConfig+0x150>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d007      	beq.n	80057ec <TIM_Base_SetConfig+0x48>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a46      	ldr	r2, [pc, #280]	@ (80058f8 <TIM_Base_SetConfig+0x154>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_Base_SetConfig+0x48>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a45      	ldr	r2, [pc, #276]	@ (80058fc <TIM_Base_SetConfig+0x158>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d108      	bne.n	80057fe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a39      	ldr	r2, [pc, #228]	@ (80058e8 <TIM_Base_SetConfig+0x144>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d023      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800580c:	d01f      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a36      	ldr	r2, [pc, #216]	@ (80058ec <TIM_Base_SetConfig+0x148>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d01b      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a35      	ldr	r2, [pc, #212]	@ (80058f0 <TIM_Base_SetConfig+0x14c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d017      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a34      	ldr	r2, [pc, #208]	@ (80058f4 <TIM_Base_SetConfig+0x150>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a33      	ldr	r2, [pc, #204]	@ (80058f8 <TIM_Base_SetConfig+0x154>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00f      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a33      	ldr	r2, [pc, #204]	@ (8005900 <TIM_Base_SetConfig+0x15c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00b      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a32      	ldr	r2, [pc, #200]	@ (8005904 <TIM_Base_SetConfig+0x160>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d007      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a31      	ldr	r2, [pc, #196]	@ (8005908 <TIM_Base_SetConfig+0x164>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d003      	beq.n	800584e <TIM_Base_SetConfig+0xaa>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a2c      	ldr	r2, [pc, #176]	@ (80058fc <TIM_Base_SetConfig+0x158>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d108      	bne.n	8005860 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4313      	orrs	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a18      	ldr	r2, [pc, #96]	@ (80058e8 <TIM_Base_SetConfig+0x144>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d013      	beq.n	80058b4 <TIM_Base_SetConfig+0x110>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a1a      	ldr	r2, [pc, #104]	@ (80058f8 <TIM_Base_SetConfig+0x154>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00f      	beq.n	80058b4 <TIM_Base_SetConfig+0x110>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a1a      	ldr	r2, [pc, #104]	@ (8005900 <TIM_Base_SetConfig+0x15c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00b      	beq.n	80058b4 <TIM_Base_SetConfig+0x110>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a19      	ldr	r2, [pc, #100]	@ (8005904 <TIM_Base_SetConfig+0x160>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d007      	beq.n	80058b4 <TIM_Base_SetConfig+0x110>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a18      	ldr	r2, [pc, #96]	@ (8005908 <TIM_Base_SetConfig+0x164>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_Base_SetConfig+0x110>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a13      	ldr	r2, [pc, #76]	@ (80058fc <TIM_Base_SetConfig+0x158>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d103      	bne.n	80058bc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d105      	bne.n	80058da <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f023 0201 	bic.w	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	611a      	str	r2, [r3, #16]
  }
}
 80058da:	bf00      	nop
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40012c00 	.word	0x40012c00
 80058ec:	40000400 	.word	0x40000400
 80058f0:	40000800 	.word	0x40000800
 80058f4:	40000c00 	.word	0x40000c00
 80058f8:	40013400 	.word	0x40013400
 80058fc:	40015000 	.word	0x40015000
 8005900:	40014000 	.word	0x40014000
 8005904:	40014400 	.word	0x40014400
 8005908:	40014800 	.word	0x40014800

0800590c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	f023 0201 	bic.w	r2, r3, #1
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800593a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800593e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0303 	bic.w	r3, r3, #3
 8005946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f023 0302 	bic.w	r3, r3, #2
 8005958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a30      	ldr	r2, [pc, #192]	@ (8005a28 <TIM_OC1_SetConfig+0x11c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d013      	beq.n	8005994 <TIM_OC1_SetConfig+0x88>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a2f      	ldr	r2, [pc, #188]	@ (8005a2c <TIM_OC1_SetConfig+0x120>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00f      	beq.n	8005994 <TIM_OC1_SetConfig+0x88>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a2e      	ldr	r2, [pc, #184]	@ (8005a30 <TIM_OC1_SetConfig+0x124>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00b      	beq.n	8005994 <TIM_OC1_SetConfig+0x88>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a2d      	ldr	r2, [pc, #180]	@ (8005a34 <TIM_OC1_SetConfig+0x128>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d007      	beq.n	8005994 <TIM_OC1_SetConfig+0x88>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a2c      	ldr	r2, [pc, #176]	@ (8005a38 <TIM_OC1_SetConfig+0x12c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_OC1_SetConfig+0x88>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a2b      	ldr	r2, [pc, #172]	@ (8005a3c <TIM_OC1_SetConfig+0x130>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d10c      	bne.n	80059ae <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f023 0308 	bic.w	r3, r3, #8
 800599a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f023 0304 	bic.w	r3, r3, #4
 80059ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005a28 <TIM_OC1_SetConfig+0x11c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d013      	beq.n	80059de <TIM_OC1_SetConfig+0xd2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a2c <TIM_OC1_SetConfig+0x120>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00f      	beq.n	80059de <TIM_OC1_SetConfig+0xd2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005a30 <TIM_OC1_SetConfig+0x124>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00b      	beq.n	80059de <TIM_OC1_SetConfig+0xd2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005a34 <TIM_OC1_SetConfig+0x128>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d007      	beq.n	80059de <TIM_OC1_SetConfig+0xd2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a19      	ldr	r2, [pc, #100]	@ (8005a38 <TIM_OC1_SetConfig+0x12c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d003      	beq.n	80059de <TIM_OC1_SetConfig+0xd2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a18      	ldr	r2, [pc, #96]	@ (8005a3c <TIM_OC1_SetConfig+0x130>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d111      	bne.n	8005a02 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	621a      	str	r2, [r3, #32]
}
 8005a1c:	bf00      	nop
 8005a1e:	371c      	adds	r7, #28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	40012c00 	.word	0x40012c00
 8005a2c:	40013400 	.word	0x40013400
 8005a30:	40014000 	.word	0x40014000
 8005a34:	40014400 	.word	0x40014400
 8005a38:	40014800 	.word	0x40014800
 8005a3c:	40015000 	.word	0x40015000

08005a40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f023 0210 	bic.w	r2, r3, #16
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0320 	bic.w	r3, r3, #32
 8005a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8005b50 <TIM_OC2_SetConfig+0x110>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d007      	beq.n	8005ab4 <TIM_OC2_SetConfig+0x74>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a2b      	ldr	r2, [pc, #172]	@ (8005b54 <TIM_OC2_SetConfig+0x114>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d003      	beq.n	8005ab4 <TIM_OC2_SetConfig+0x74>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a2a      	ldr	r2, [pc, #168]	@ (8005b58 <TIM_OC2_SetConfig+0x118>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d10d      	bne.n	8005ad0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ace:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8005b50 <TIM_OC2_SetConfig+0x110>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d013      	beq.n	8005b00 <TIM_OC2_SetConfig+0xc0>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a1e      	ldr	r2, [pc, #120]	@ (8005b54 <TIM_OC2_SetConfig+0x114>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00f      	beq.n	8005b00 <TIM_OC2_SetConfig+0xc0>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b5c <TIM_OC2_SetConfig+0x11c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00b      	beq.n	8005b00 <TIM_OC2_SetConfig+0xc0>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a1d      	ldr	r2, [pc, #116]	@ (8005b60 <TIM_OC2_SetConfig+0x120>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d007      	beq.n	8005b00 <TIM_OC2_SetConfig+0xc0>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b64 <TIM_OC2_SetConfig+0x124>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d003      	beq.n	8005b00 <TIM_OC2_SetConfig+0xc0>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a17      	ldr	r2, [pc, #92]	@ (8005b58 <TIM_OC2_SetConfig+0x118>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d113      	bne.n	8005b28 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40012c00 	.word	0x40012c00
 8005b54:	40013400 	.word	0x40013400
 8005b58:	40015000 	.word	0x40015000
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	40014400 	.word	0x40014400
 8005b64:	40014800 	.word	0x40014800

08005b68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 0303 	bic.w	r3, r3, #3
 8005ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	021b      	lsls	r3, r3, #8
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a2b      	ldr	r2, [pc, #172]	@ (8005c74 <TIM_OC3_SetConfig+0x10c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d007      	beq.n	8005bda <TIM_OC3_SetConfig+0x72>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8005c78 <TIM_OC3_SetConfig+0x110>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d003      	beq.n	8005bda <TIM_OC3_SetConfig+0x72>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a29      	ldr	r2, [pc, #164]	@ (8005c7c <TIM_OC3_SetConfig+0x114>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d10d      	bne.n	8005bf6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a1e      	ldr	r2, [pc, #120]	@ (8005c74 <TIM_OC3_SetConfig+0x10c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <TIM_OC3_SetConfig+0xbe>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a1d      	ldr	r2, [pc, #116]	@ (8005c78 <TIM_OC3_SetConfig+0x110>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00f      	beq.n	8005c26 <TIM_OC3_SetConfig+0xbe>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a1d      	ldr	r2, [pc, #116]	@ (8005c80 <TIM_OC3_SetConfig+0x118>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00b      	beq.n	8005c26 <TIM_OC3_SetConfig+0xbe>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a1c      	ldr	r2, [pc, #112]	@ (8005c84 <TIM_OC3_SetConfig+0x11c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d007      	beq.n	8005c26 <TIM_OC3_SetConfig+0xbe>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a1b      	ldr	r2, [pc, #108]	@ (8005c88 <TIM_OC3_SetConfig+0x120>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_OC3_SetConfig+0xbe>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a16      	ldr	r2, [pc, #88]	@ (8005c7c <TIM_OC3_SetConfig+0x114>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d113      	bne.n	8005c4e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	621a      	str	r2, [r3, #32]
}
 8005c68:	bf00      	nop
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	40012c00 	.word	0x40012c00
 8005c78:	40013400 	.word	0x40013400
 8005c7c:	40015000 	.word	0x40015000
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40014400 	.word	0x40014400
 8005c88:	40014800 	.word	0x40014800

08005c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	031b      	lsls	r3, r3, #12
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a2c      	ldr	r2, [pc, #176]	@ (8005d9c <TIM_OC4_SetConfig+0x110>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d007      	beq.n	8005d00 <TIM_OC4_SetConfig+0x74>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a2b      	ldr	r2, [pc, #172]	@ (8005da0 <TIM_OC4_SetConfig+0x114>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_OC4_SetConfig+0x74>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a2a      	ldr	r2, [pc, #168]	@ (8005da4 <TIM_OC4_SetConfig+0x118>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d10d      	bne.n	8005d1c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	031b      	lsls	r3, r3, #12
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005d9c <TIM_OC4_SetConfig+0x110>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d013      	beq.n	8005d4c <TIM_OC4_SetConfig+0xc0>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a1e      	ldr	r2, [pc, #120]	@ (8005da0 <TIM_OC4_SetConfig+0x114>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00f      	beq.n	8005d4c <TIM_OC4_SetConfig+0xc0>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8005da8 <TIM_OC4_SetConfig+0x11c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d00b      	beq.n	8005d4c <TIM_OC4_SetConfig+0xc0>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a1d      	ldr	r2, [pc, #116]	@ (8005dac <TIM_OC4_SetConfig+0x120>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d007      	beq.n	8005d4c <TIM_OC4_SetConfig+0xc0>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005db0 <TIM_OC4_SetConfig+0x124>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d003      	beq.n	8005d4c <TIM_OC4_SetConfig+0xc0>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a17      	ldr	r2, [pc, #92]	@ (8005da4 <TIM_OC4_SetConfig+0x118>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d113      	bne.n	8005d74 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d52:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d5a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	019b      	lsls	r3, r3, #6
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	019b      	lsls	r3, r3, #6
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	621a      	str	r2, [r3, #32]
}
 8005d8e:	bf00      	nop
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40012c00 	.word	0x40012c00
 8005da0:	40013400 	.word	0x40013400
 8005da4:	40015000 	.word	0x40015000
 8005da8:	40014000 	.word	0x40014000
 8005dac:	40014400 	.word	0x40014400
 8005db0:	40014800 	.word	0x40014800

08005db4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005df8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	041b      	lsls	r3, r3, #16
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a19      	ldr	r2, [pc, #100]	@ (8005e70 <TIM_OC5_SetConfig+0xbc>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d013      	beq.n	8005e36 <TIM_OC5_SetConfig+0x82>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a18      	ldr	r2, [pc, #96]	@ (8005e74 <TIM_OC5_SetConfig+0xc0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00f      	beq.n	8005e36 <TIM_OC5_SetConfig+0x82>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a17      	ldr	r2, [pc, #92]	@ (8005e78 <TIM_OC5_SetConfig+0xc4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00b      	beq.n	8005e36 <TIM_OC5_SetConfig+0x82>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a16      	ldr	r2, [pc, #88]	@ (8005e7c <TIM_OC5_SetConfig+0xc8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d007      	beq.n	8005e36 <TIM_OC5_SetConfig+0x82>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a15      	ldr	r2, [pc, #84]	@ (8005e80 <TIM_OC5_SetConfig+0xcc>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <TIM_OC5_SetConfig+0x82>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a14      	ldr	r2, [pc, #80]	@ (8005e84 <TIM_OC5_SetConfig+0xd0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d109      	bne.n	8005e4a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	621a      	str	r2, [r3, #32]
}
 8005e64:	bf00      	nop
 8005e66:	371c      	adds	r7, #28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	40012c00 	.word	0x40012c00
 8005e74:	40013400 	.word	0x40013400
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	40014400 	.word	0x40014400
 8005e80:	40014800 	.word	0x40014800
 8005e84:	40015000 	.word	0x40015000

08005e88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005eb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	051b      	lsls	r3, r3, #20
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a1a      	ldr	r2, [pc, #104]	@ (8005f48 <TIM_OC6_SetConfig+0xc0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d013      	beq.n	8005f0c <TIM_OC6_SetConfig+0x84>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a19      	ldr	r2, [pc, #100]	@ (8005f4c <TIM_OC6_SetConfig+0xc4>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00f      	beq.n	8005f0c <TIM_OC6_SetConfig+0x84>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a18      	ldr	r2, [pc, #96]	@ (8005f50 <TIM_OC6_SetConfig+0xc8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00b      	beq.n	8005f0c <TIM_OC6_SetConfig+0x84>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a17      	ldr	r2, [pc, #92]	@ (8005f54 <TIM_OC6_SetConfig+0xcc>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d007      	beq.n	8005f0c <TIM_OC6_SetConfig+0x84>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a16      	ldr	r2, [pc, #88]	@ (8005f58 <TIM_OC6_SetConfig+0xd0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_OC6_SetConfig+0x84>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a15      	ldr	r2, [pc, #84]	@ (8005f5c <TIM_OC6_SetConfig+0xd4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d109      	bne.n	8005f20 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	029b      	lsls	r3, r3, #10
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40012c00 	.word	0x40012c00
 8005f4c:	40013400 	.word	0x40013400
 8005f50:	40014000 	.word	0x40014000
 8005f54:	40014400 	.word	0x40014400
 8005f58:	40014800 	.word	0x40014800
 8005f5c:	40015000 	.word	0x40015000

08005f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	f023 0201 	bic.w	r2, r3, #1
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	011b      	lsls	r3, r3, #4
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f023 030a 	bic.w	r3, r3, #10
 8005f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	621a      	str	r2, [r3, #32]
}
 8005fb2:	bf00      	nop
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b087      	sub	sp, #28
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	60b9      	str	r1, [r7, #8]
 8005fc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	f023 0210 	bic.w	r2, r3, #16
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	031b      	lsls	r3, r3, #12
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ffa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	621a      	str	r2, [r3, #32]
}
 8006012:	bf00      	nop
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800601e:	b480      	push	{r7}
 8006020:	b085      	sub	sp, #20
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	f043 0307 	orr.w	r3, r3, #7
 8006044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	609a      	str	r2, [r3, #8]
}
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006072:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	021a      	lsls	r2, r3, #8
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	431a      	orrs	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4313      	orrs	r3, r2
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	609a      	str	r2, [r3, #8]
}
 800608c:	bf00      	nop
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f003 031f 	and.w	r3, r3, #31
 80060aa:	2201      	movs	r2, #1
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6a1a      	ldr	r2, [r3, #32]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	43db      	mvns	r3, r3
 80060ba:	401a      	ands	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a1a      	ldr	r2, [r3, #32]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f003 031f 	and.w	r3, r3, #31
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	fa01 f303 	lsl.w	r3, r1, r3
 80060d0:	431a      	orrs	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	621a      	str	r2, [r3, #32]
}
 80060d6:	bf00      	nop
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
	...

080060e4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d109      	bne.n	8006108 <HAL_TIMEx_PWMN_Start+0x24>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	bf14      	ite	ne
 8006100:	2301      	movne	r3, #1
 8006102:	2300      	moveq	r3, #0
 8006104:	b2db      	uxtb	r3, r3
 8006106:	e022      	b.n	800614e <HAL_TIMEx_PWMN_Start+0x6a>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	2b04      	cmp	r3, #4
 800610c:	d109      	bne.n	8006122 <HAL_TIMEx_PWMN_Start+0x3e>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b01      	cmp	r3, #1
 8006118:	bf14      	ite	ne
 800611a:	2301      	movne	r3, #1
 800611c:	2300      	moveq	r3, #0
 800611e:	b2db      	uxtb	r3, r3
 8006120:	e015      	b.n	800614e <HAL_TIMEx_PWMN_Start+0x6a>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b08      	cmp	r3, #8
 8006126:	d109      	bne.n	800613c <HAL_TIMEx_PWMN_Start+0x58>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b01      	cmp	r3, #1
 8006132:	bf14      	ite	ne
 8006134:	2301      	movne	r3, #1
 8006136:	2300      	moveq	r3, #0
 8006138:	b2db      	uxtb	r3, r3
 800613a:	e008      	b.n	800614e <HAL_TIMEx_PWMN_Start+0x6a>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	bf14      	ite	ne
 8006148:	2301      	movne	r3, #1
 800614a:	2300      	moveq	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e073      	b.n	800623e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d104      	bne.n	8006166 <HAL_TIMEx_PWMN_Start+0x82>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006164:	e013      	b.n	800618e <HAL_TIMEx_PWMN_Start+0xaa>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b04      	cmp	r3, #4
 800616a:	d104      	bne.n	8006176 <HAL_TIMEx_PWMN_Start+0x92>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006174:	e00b      	b.n	800618e <HAL_TIMEx_PWMN_Start+0xaa>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b08      	cmp	r3, #8
 800617a:	d104      	bne.n	8006186 <HAL_TIMEx_PWMN_Start+0xa2>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006184:	e003      	b.n	800618e <HAL_TIMEx_PWMN_Start+0xaa>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2202      	movs	r2, #2
 800618a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2204      	movs	r2, #4
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	4618      	mov	r0, r3
 8006198:	f000 f990 	bl	80064bc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a25      	ldr	r2, [pc, #148]	@ (8006248 <HAL_TIMEx_PWMN_Start+0x164>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d022      	beq.n	80061fc <HAL_TIMEx_PWMN_Start+0x118>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061be:	d01d      	beq.n	80061fc <HAL_TIMEx_PWMN_Start+0x118>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a21      	ldr	r2, [pc, #132]	@ (800624c <HAL_TIMEx_PWMN_Start+0x168>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d018      	beq.n	80061fc <HAL_TIMEx_PWMN_Start+0x118>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a20      	ldr	r2, [pc, #128]	@ (8006250 <HAL_TIMEx_PWMN_Start+0x16c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d013      	beq.n	80061fc <HAL_TIMEx_PWMN_Start+0x118>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a1e      	ldr	r2, [pc, #120]	@ (8006254 <HAL_TIMEx_PWMN_Start+0x170>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00e      	beq.n	80061fc <HAL_TIMEx_PWMN_Start+0x118>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a1d      	ldr	r2, [pc, #116]	@ (8006258 <HAL_TIMEx_PWMN_Start+0x174>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d009      	beq.n	80061fc <HAL_TIMEx_PWMN_Start+0x118>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a1b      	ldr	r2, [pc, #108]	@ (800625c <HAL_TIMEx_PWMN_Start+0x178>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d004      	beq.n	80061fc <HAL_TIMEx_PWMN_Start+0x118>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006260 <HAL_TIMEx_PWMN_Start+0x17c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d115      	bne.n	8006228 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689a      	ldr	r2, [r3, #8]
 8006202:	4b18      	ldr	r3, [pc, #96]	@ (8006264 <HAL_TIMEx_PWMN_Start+0x180>)
 8006204:	4013      	ands	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b06      	cmp	r3, #6
 800620c:	d015      	beq.n	800623a <HAL_TIMEx_PWMN_Start+0x156>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006214:	d011      	beq.n	800623a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0201 	orr.w	r2, r2, #1
 8006224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006226:	e008      	b.n	800623a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e000      	b.n	800623c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40012c00 	.word	0x40012c00
 800624c:	40000400 	.word	0x40000400
 8006250:	40000800 	.word	0x40000800
 8006254:	40000c00 	.word	0x40000c00
 8006258:	40013400 	.word	0x40013400
 800625c:	40014000 	.word	0x40014000
 8006260:	40015000 	.word	0x40015000
 8006264:	00010007 	.word	0x00010007

08006268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800627c:	2302      	movs	r3, #2
 800627e:	e074      	b.n	800636a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a34      	ldr	r2, [pc, #208]	@ (8006378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d009      	beq.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a33      	ldr	r2, [pc, #204]	@ (800637c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d004      	beq.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a31      	ldr	r2, [pc, #196]	@ (8006380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d108      	bne.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80062c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80062d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a21      	ldr	r2, [pc, #132]	@ (8006378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d022      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006300:	d01d      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a1f      	ldr	r2, [pc, #124]	@ (8006384 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d018      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a1d      	ldr	r2, [pc, #116]	@ (8006388 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d013      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a1c      	ldr	r2, [pc, #112]	@ (800638c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00e      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a15      	ldr	r2, [pc, #84]	@ (800637c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d009      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a18      	ldr	r2, [pc, #96]	@ (8006390 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d004      	beq.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a11      	ldr	r2, [pc, #68]	@ (8006380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d10c      	bne.n	8006358 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	4313      	orrs	r3, r2
 800634e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	40012c00 	.word	0x40012c00
 800637c:	40013400 	.word	0x40013400
 8006380:	40015000 	.word	0x40015000
 8006384:	40000400 	.word	0x40000400
 8006388:	40000800 	.word	0x40000800
 800638c:	40000c00 	.word	0x40000c00
 8006390:	40014000 	.word	0x40014000

08006394 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e078      	b.n	80064a2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	041b      	lsls	r3, r3, #16
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1c      	ldr	r2, [pc, #112]	@ (80064b0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d009      	beq.n	8006456 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1b      	ldr	r2, [pc, #108]	@ (80064b4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d004      	beq.n	8006456 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a19      	ldr	r2, [pc, #100]	@ (80064b8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d11c      	bne.n	8006490 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006460:	051b      	lsls	r3, r3, #20
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	4313      	orrs	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648c:	4313      	orrs	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40012c00 	.word	0x40012c00
 80064b4:	40013400 	.word	0x40013400
 80064b8:	40015000 	.word	0x40015000

080064bc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 030f 	and.w	r3, r3, #15
 80064ce:	2204      	movs	r2, #4
 80064d0:	fa02 f303 	lsl.w	r3, r2, r3
 80064d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a1a      	ldr	r2, [r3, #32]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	43db      	mvns	r3, r3
 80064de:	401a      	ands	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a1a      	ldr	r2, [r3, #32]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	6879      	ldr	r1, [r7, #4]
 80064f0:	fa01 f303 	lsl.w	r3, r1, r3
 80064f4:	431a      	orrs	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b082      	sub	sp, #8
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e042      	b.n	800659e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800651e:	2b00      	cmp	r3, #0
 8006520:	d106      	bne.n	8006530 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7fb f84a 	bl	80015c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2224      	movs	r2, #36	@ 0x24
 8006534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0201 	bic.w	r2, r2, #1
 8006546:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fbb3 	bl	8006cbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f8b4 	bl	80066c4 <UART_SetConfig>
 800655c:	4603      	mov	r3, r0
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e01b      	b.n	800659e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006574:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006584:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0201 	orr.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fc32 	bl	8006e00 <UART_CheckIdleState>
 800659c:	4603      	mov	r3, r0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b08a      	sub	sp, #40	@ 0x28
 80065aa:	af02      	add	r7, sp, #8
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	603b      	str	r3, [r7, #0]
 80065b2:	4613      	mov	r3, r2
 80065b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d17b      	bne.n	80066b8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <HAL_UART_Transmit+0x26>
 80065c6:	88fb      	ldrh	r3, [r7, #6]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e074      	b.n	80066ba <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2221      	movs	r2, #33	@ 0x21
 80065dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065e0:	f7fb fa9c 	bl	8001b1c <HAL_GetTick>
 80065e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	88fa      	ldrh	r2, [r7, #6]
 80065ea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	88fa      	ldrh	r2, [r7, #6]
 80065f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065fe:	d108      	bne.n	8006612 <HAL_UART_Transmit+0x6c>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d104      	bne.n	8006612 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006608:	2300      	movs	r3, #0
 800660a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	61bb      	str	r3, [r7, #24]
 8006610:	e003      	b.n	800661a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006616:	2300      	movs	r3, #0
 8006618:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800661a:	e030      	b.n	800667e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	2200      	movs	r2, #0
 8006624:	2180      	movs	r1, #128	@ 0x80
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fc94 	bl	8006f54 <UART_WaitOnFlagUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d005      	beq.n	800663e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2220      	movs	r2, #32
 8006636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e03d      	b.n	80066ba <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10b      	bne.n	800665c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006652:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	3302      	adds	r3, #2
 8006658:	61bb      	str	r3, [r7, #24]
 800665a:	e007      	b.n	800666c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	781a      	ldrb	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	3301      	adds	r3, #1
 800666a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1c8      	bne.n	800661c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2200      	movs	r2, #0
 8006692:	2140      	movs	r1, #64	@ 0x40
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 fc5d 	bl	8006f54 <UART_WaitOnFlagUntilTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e006      	b.n	80066ba <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	e000      	b.n	80066ba <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80066b8:	2302      	movs	r3, #2
  }
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3720      	adds	r7, #32
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066c8:	b08c      	sub	sp, #48	@ 0x30
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	431a      	orrs	r2, r3
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	431a      	orrs	r2, r3
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	4baa      	ldr	r3, [pc, #680]	@ (800699c <UART_SetConfig+0x2d8>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	6812      	ldr	r2, [r2, #0]
 80066fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066fc:	430b      	orrs	r3, r1
 80066fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a9f      	ldr	r2, [pc, #636]	@ (80069a0 <UART_SetConfig+0x2dc>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d004      	beq.n	8006730 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800672c:	4313      	orrs	r3, r2
 800672e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800673a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	6812      	ldr	r2, [r2, #0]
 8006742:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006744:	430b      	orrs	r3, r1
 8006746:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674e:	f023 010f 	bic.w	r1, r3, #15
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a90      	ldr	r2, [pc, #576]	@ (80069a4 <UART_SetConfig+0x2e0>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d125      	bne.n	80067b4 <UART_SetConfig+0xf0>
 8006768:	4b8f      	ldr	r3, [pc, #572]	@ (80069a8 <UART_SetConfig+0x2e4>)
 800676a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	2b03      	cmp	r3, #3
 8006774:	d81a      	bhi.n	80067ac <UART_SetConfig+0xe8>
 8006776:	a201      	add	r2, pc, #4	@ (adr r2, 800677c <UART_SetConfig+0xb8>)
 8006778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677c:	0800678d 	.word	0x0800678d
 8006780:	0800679d 	.word	0x0800679d
 8006784:	08006795 	.word	0x08006795
 8006788:	080067a5 	.word	0x080067a5
 800678c:	2301      	movs	r3, #1
 800678e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006792:	e116      	b.n	80069c2 <UART_SetConfig+0x2fe>
 8006794:	2302      	movs	r3, #2
 8006796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800679a:	e112      	b.n	80069c2 <UART_SetConfig+0x2fe>
 800679c:	2304      	movs	r3, #4
 800679e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067a2:	e10e      	b.n	80069c2 <UART_SetConfig+0x2fe>
 80067a4:	2308      	movs	r3, #8
 80067a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067aa:	e10a      	b.n	80069c2 <UART_SetConfig+0x2fe>
 80067ac:	2310      	movs	r3, #16
 80067ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067b2:	e106      	b.n	80069c2 <UART_SetConfig+0x2fe>
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a7c      	ldr	r2, [pc, #496]	@ (80069ac <UART_SetConfig+0x2e8>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d138      	bne.n	8006830 <UART_SetConfig+0x16c>
 80067be:	4b7a      	ldr	r3, [pc, #488]	@ (80069a8 <UART_SetConfig+0x2e4>)
 80067c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067c4:	f003 030c 	and.w	r3, r3, #12
 80067c8:	2b0c      	cmp	r3, #12
 80067ca:	d82d      	bhi.n	8006828 <UART_SetConfig+0x164>
 80067cc:	a201      	add	r2, pc, #4	@ (adr r2, 80067d4 <UART_SetConfig+0x110>)
 80067ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d2:	bf00      	nop
 80067d4:	08006809 	.word	0x08006809
 80067d8:	08006829 	.word	0x08006829
 80067dc:	08006829 	.word	0x08006829
 80067e0:	08006829 	.word	0x08006829
 80067e4:	08006819 	.word	0x08006819
 80067e8:	08006829 	.word	0x08006829
 80067ec:	08006829 	.word	0x08006829
 80067f0:	08006829 	.word	0x08006829
 80067f4:	08006811 	.word	0x08006811
 80067f8:	08006829 	.word	0x08006829
 80067fc:	08006829 	.word	0x08006829
 8006800:	08006829 	.word	0x08006829
 8006804:	08006821 	.word	0x08006821
 8006808:	2300      	movs	r3, #0
 800680a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800680e:	e0d8      	b.n	80069c2 <UART_SetConfig+0x2fe>
 8006810:	2302      	movs	r3, #2
 8006812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006816:	e0d4      	b.n	80069c2 <UART_SetConfig+0x2fe>
 8006818:	2304      	movs	r3, #4
 800681a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800681e:	e0d0      	b.n	80069c2 <UART_SetConfig+0x2fe>
 8006820:	2308      	movs	r3, #8
 8006822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006826:	e0cc      	b.n	80069c2 <UART_SetConfig+0x2fe>
 8006828:	2310      	movs	r3, #16
 800682a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800682e:	e0c8      	b.n	80069c2 <UART_SetConfig+0x2fe>
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a5e      	ldr	r2, [pc, #376]	@ (80069b0 <UART_SetConfig+0x2ec>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d125      	bne.n	8006886 <UART_SetConfig+0x1c2>
 800683a:	4b5b      	ldr	r3, [pc, #364]	@ (80069a8 <UART_SetConfig+0x2e4>)
 800683c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006840:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006844:	2b30      	cmp	r3, #48	@ 0x30
 8006846:	d016      	beq.n	8006876 <UART_SetConfig+0x1b2>
 8006848:	2b30      	cmp	r3, #48	@ 0x30
 800684a:	d818      	bhi.n	800687e <UART_SetConfig+0x1ba>
 800684c:	2b20      	cmp	r3, #32
 800684e:	d00a      	beq.n	8006866 <UART_SetConfig+0x1a2>
 8006850:	2b20      	cmp	r3, #32
 8006852:	d814      	bhi.n	800687e <UART_SetConfig+0x1ba>
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <UART_SetConfig+0x19a>
 8006858:	2b10      	cmp	r3, #16
 800685a:	d008      	beq.n	800686e <UART_SetConfig+0x1aa>
 800685c:	e00f      	b.n	800687e <UART_SetConfig+0x1ba>
 800685e:	2300      	movs	r3, #0
 8006860:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006864:	e0ad      	b.n	80069c2 <UART_SetConfig+0x2fe>
 8006866:	2302      	movs	r3, #2
 8006868:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800686c:	e0a9      	b.n	80069c2 <UART_SetConfig+0x2fe>
 800686e:	2304      	movs	r3, #4
 8006870:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006874:	e0a5      	b.n	80069c2 <UART_SetConfig+0x2fe>
 8006876:	2308      	movs	r3, #8
 8006878:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800687c:	e0a1      	b.n	80069c2 <UART_SetConfig+0x2fe>
 800687e:	2310      	movs	r3, #16
 8006880:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006884:	e09d      	b.n	80069c2 <UART_SetConfig+0x2fe>
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a4a      	ldr	r2, [pc, #296]	@ (80069b4 <UART_SetConfig+0x2f0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d125      	bne.n	80068dc <UART_SetConfig+0x218>
 8006890:	4b45      	ldr	r3, [pc, #276]	@ (80069a8 <UART_SetConfig+0x2e4>)
 8006892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006896:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800689a:	2bc0      	cmp	r3, #192	@ 0xc0
 800689c:	d016      	beq.n	80068cc <UART_SetConfig+0x208>
 800689e:	2bc0      	cmp	r3, #192	@ 0xc0
 80068a0:	d818      	bhi.n	80068d4 <UART_SetConfig+0x210>
 80068a2:	2b80      	cmp	r3, #128	@ 0x80
 80068a4:	d00a      	beq.n	80068bc <UART_SetConfig+0x1f8>
 80068a6:	2b80      	cmp	r3, #128	@ 0x80
 80068a8:	d814      	bhi.n	80068d4 <UART_SetConfig+0x210>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <UART_SetConfig+0x1f0>
 80068ae:	2b40      	cmp	r3, #64	@ 0x40
 80068b0:	d008      	beq.n	80068c4 <UART_SetConfig+0x200>
 80068b2:	e00f      	b.n	80068d4 <UART_SetConfig+0x210>
 80068b4:	2300      	movs	r3, #0
 80068b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ba:	e082      	b.n	80069c2 <UART_SetConfig+0x2fe>
 80068bc:	2302      	movs	r3, #2
 80068be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068c2:	e07e      	b.n	80069c2 <UART_SetConfig+0x2fe>
 80068c4:	2304      	movs	r3, #4
 80068c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ca:	e07a      	b.n	80069c2 <UART_SetConfig+0x2fe>
 80068cc:	2308      	movs	r3, #8
 80068ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068d2:	e076      	b.n	80069c2 <UART_SetConfig+0x2fe>
 80068d4:	2310      	movs	r3, #16
 80068d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068da:	e072      	b.n	80069c2 <UART_SetConfig+0x2fe>
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a35      	ldr	r2, [pc, #212]	@ (80069b8 <UART_SetConfig+0x2f4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d12a      	bne.n	800693c <UART_SetConfig+0x278>
 80068e6:	4b30      	ldr	r3, [pc, #192]	@ (80069a8 <UART_SetConfig+0x2e4>)
 80068e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068f4:	d01a      	beq.n	800692c <UART_SetConfig+0x268>
 80068f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068fa:	d81b      	bhi.n	8006934 <UART_SetConfig+0x270>
 80068fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006900:	d00c      	beq.n	800691c <UART_SetConfig+0x258>
 8006902:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006906:	d815      	bhi.n	8006934 <UART_SetConfig+0x270>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <UART_SetConfig+0x250>
 800690c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006910:	d008      	beq.n	8006924 <UART_SetConfig+0x260>
 8006912:	e00f      	b.n	8006934 <UART_SetConfig+0x270>
 8006914:	2300      	movs	r3, #0
 8006916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800691a:	e052      	b.n	80069c2 <UART_SetConfig+0x2fe>
 800691c:	2302      	movs	r3, #2
 800691e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006922:	e04e      	b.n	80069c2 <UART_SetConfig+0x2fe>
 8006924:	2304      	movs	r3, #4
 8006926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800692a:	e04a      	b.n	80069c2 <UART_SetConfig+0x2fe>
 800692c:	2308      	movs	r3, #8
 800692e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006932:	e046      	b.n	80069c2 <UART_SetConfig+0x2fe>
 8006934:	2310      	movs	r3, #16
 8006936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800693a:	e042      	b.n	80069c2 <UART_SetConfig+0x2fe>
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a17      	ldr	r2, [pc, #92]	@ (80069a0 <UART_SetConfig+0x2dc>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d13a      	bne.n	80069bc <UART_SetConfig+0x2f8>
 8006946:	4b18      	ldr	r3, [pc, #96]	@ (80069a8 <UART_SetConfig+0x2e4>)
 8006948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800694c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006950:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006954:	d01a      	beq.n	800698c <UART_SetConfig+0x2c8>
 8006956:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800695a:	d81b      	bhi.n	8006994 <UART_SetConfig+0x2d0>
 800695c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006960:	d00c      	beq.n	800697c <UART_SetConfig+0x2b8>
 8006962:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006966:	d815      	bhi.n	8006994 <UART_SetConfig+0x2d0>
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <UART_SetConfig+0x2b0>
 800696c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006970:	d008      	beq.n	8006984 <UART_SetConfig+0x2c0>
 8006972:	e00f      	b.n	8006994 <UART_SetConfig+0x2d0>
 8006974:	2300      	movs	r3, #0
 8006976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800697a:	e022      	b.n	80069c2 <UART_SetConfig+0x2fe>
 800697c:	2302      	movs	r3, #2
 800697e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006982:	e01e      	b.n	80069c2 <UART_SetConfig+0x2fe>
 8006984:	2304      	movs	r3, #4
 8006986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800698a:	e01a      	b.n	80069c2 <UART_SetConfig+0x2fe>
 800698c:	2308      	movs	r3, #8
 800698e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006992:	e016      	b.n	80069c2 <UART_SetConfig+0x2fe>
 8006994:	2310      	movs	r3, #16
 8006996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800699a:	e012      	b.n	80069c2 <UART_SetConfig+0x2fe>
 800699c:	cfff69f3 	.word	0xcfff69f3
 80069a0:	40008000 	.word	0x40008000
 80069a4:	40013800 	.word	0x40013800
 80069a8:	40021000 	.word	0x40021000
 80069ac:	40004400 	.word	0x40004400
 80069b0:	40004800 	.word	0x40004800
 80069b4:	40004c00 	.word	0x40004c00
 80069b8:	40005000 	.word	0x40005000
 80069bc:	2310      	movs	r3, #16
 80069be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4aae      	ldr	r2, [pc, #696]	@ (8006c80 <UART_SetConfig+0x5bc>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	f040 8097 	bne.w	8006afc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80069d2:	2b08      	cmp	r3, #8
 80069d4:	d823      	bhi.n	8006a1e <UART_SetConfig+0x35a>
 80069d6:	a201      	add	r2, pc, #4	@ (adr r2, 80069dc <UART_SetConfig+0x318>)
 80069d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069dc:	08006a01 	.word	0x08006a01
 80069e0:	08006a1f 	.word	0x08006a1f
 80069e4:	08006a09 	.word	0x08006a09
 80069e8:	08006a1f 	.word	0x08006a1f
 80069ec:	08006a0f 	.word	0x08006a0f
 80069f0:	08006a1f 	.word	0x08006a1f
 80069f4:	08006a1f 	.word	0x08006a1f
 80069f8:	08006a1f 	.word	0x08006a1f
 80069fc:	08006a17 	.word	0x08006a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a00:	f7fd ffb4 	bl	800496c <HAL_RCC_GetPCLK1Freq>
 8006a04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a06:	e010      	b.n	8006a2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a08:	4b9e      	ldr	r3, [pc, #632]	@ (8006c84 <UART_SetConfig+0x5c0>)
 8006a0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a0c:	e00d      	b.n	8006a2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a0e:	f7fd ff3f 	bl	8004890 <HAL_RCC_GetSysClockFreq>
 8006a12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a14:	e009      	b.n	8006a2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a1c:	e005      	b.n	8006a2a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 8130 	beq.w	8006c92 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a36:	4a94      	ldr	r2, [pc, #592]	@ (8006c88 <UART_SetConfig+0x5c4>)
 8006a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a40:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	4413      	add	r3, r2
 8006a50:	69ba      	ldr	r2, [r7, #24]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d305      	bcc.n	8006a62 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d903      	bls.n	8006a6a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a68:	e113      	b.n	8006c92 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	60bb      	str	r3, [r7, #8]
 8006a70:	60fa      	str	r2, [r7, #12]
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a76:	4a84      	ldr	r2, [pc, #528]	@ (8006c88 <UART_SetConfig+0x5c4>)
 8006a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	2200      	movs	r2, #0
 8006a80:	603b      	str	r3, [r7, #0]
 8006a82:	607a      	str	r2, [r7, #4]
 8006a84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a8c:	f7fa f8b4 	bl	8000bf8 <__aeabi_uldivmod>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4610      	mov	r0, r2
 8006a96:	4619      	mov	r1, r3
 8006a98:	f04f 0200 	mov.w	r2, #0
 8006a9c:	f04f 0300 	mov.w	r3, #0
 8006aa0:	020b      	lsls	r3, r1, #8
 8006aa2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006aa6:	0202      	lsls	r2, r0, #8
 8006aa8:	6979      	ldr	r1, [r7, #20]
 8006aaa:	6849      	ldr	r1, [r1, #4]
 8006aac:	0849      	lsrs	r1, r1, #1
 8006aae:	2000      	movs	r0, #0
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	4605      	mov	r5, r0
 8006ab4:	eb12 0804 	adds.w	r8, r2, r4
 8006ab8:	eb43 0905 	adc.w	r9, r3, r5
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	469a      	mov	sl, r3
 8006ac4:	4693      	mov	fp, r2
 8006ac6:	4652      	mov	r2, sl
 8006ac8:	465b      	mov	r3, fp
 8006aca:	4640      	mov	r0, r8
 8006acc:	4649      	mov	r1, r9
 8006ace:	f7fa f893 	bl	8000bf8 <__aeabi_uldivmod>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ae0:	d308      	bcc.n	8006af4 <UART_SetConfig+0x430>
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ae8:	d204      	bcs.n	8006af4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6a3a      	ldr	r2, [r7, #32]
 8006af0:	60da      	str	r2, [r3, #12]
 8006af2:	e0ce      	b.n	8006c92 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006afa:	e0ca      	b.n	8006c92 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b04:	d166      	bne.n	8006bd4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006b06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b0a:	2b08      	cmp	r3, #8
 8006b0c:	d827      	bhi.n	8006b5e <UART_SetConfig+0x49a>
 8006b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b14 <UART_SetConfig+0x450>)
 8006b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b14:	08006b39 	.word	0x08006b39
 8006b18:	08006b41 	.word	0x08006b41
 8006b1c:	08006b49 	.word	0x08006b49
 8006b20:	08006b5f 	.word	0x08006b5f
 8006b24:	08006b4f 	.word	0x08006b4f
 8006b28:	08006b5f 	.word	0x08006b5f
 8006b2c:	08006b5f 	.word	0x08006b5f
 8006b30:	08006b5f 	.word	0x08006b5f
 8006b34:	08006b57 	.word	0x08006b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b38:	f7fd ff18 	bl	800496c <HAL_RCC_GetPCLK1Freq>
 8006b3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b3e:	e014      	b.n	8006b6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b40:	f7fd ff2a 	bl	8004998 <HAL_RCC_GetPCLK2Freq>
 8006b44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b46:	e010      	b.n	8006b6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b48:	4b4e      	ldr	r3, [pc, #312]	@ (8006c84 <UART_SetConfig+0x5c0>)
 8006b4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b4c:	e00d      	b.n	8006b6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b4e:	f7fd fe9f 	bl	8004890 <HAL_RCC_GetSysClockFreq>
 8006b52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b54:	e009      	b.n	8006b6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b5c:	e005      	b.n	8006b6a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 8090 	beq.w	8006c92 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b76:	4a44      	ldr	r2, [pc, #272]	@ (8006c88 <UART_SetConfig+0x5c4>)
 8006b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b84:	005a      	lsls	r2, r3, #1
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	441a      	add	r2, r3
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	2b0f      	cmp	r3, #15
 8006b9c:	d916      	bls.n	8006bcc <UART_SetConfig+0x508>
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ba4:	d212      	bcs.n	8006bcc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	f023 030f 	bic.w	r3, r3, #15
 8006bae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	085b      	lsrs	r3, r3, #1
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	8bfb      	ldrh	r3, [r7, #30]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	8bfa      	ldrh	r2, [r7, #30]
 8006bc8:	60da      	str	r2, [r3, #12]
 8006bca:	e062      	b.n	8006c92 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006bd2:	e05e      	b.n	8006c92 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bd4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006bd8:	2b08      	cmp	r3, #8
 8006bda:	d828      	bhi.n	8006c2e <UART_SetConfig+0x56a>
 8006bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8006be4 <UART_SetConfig+0x520>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006c09 	.word	0x08006c09
 8006be8:	08006c11 	.word	0x08006c11
 8006bec:	08006c19 	.word	0x08006c19
 8006bf0:	08006c2f 	.word	0x08006c2f
 8006bf4:	08006c1f 	.word	0x08006c1f
 8006bf8:	08006c2f 	.word	0x08006c2f
 8006bfc:	08006c2f 	.word	0x08006c2f
 8006c00:	08006c2f 	.word	0x08006c2f
 8006c04:	08006c27 	.word	0x08006c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c08:	f7fd feb0 	bl	800496c <HAL_RCC_GetPCLK1Freq>
 8006c0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c0e:	e014      	b.n	8006c3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c10:	f7fd fec2 	bl	8004998 <HAL_RCC_GetPCLK2Freq>
 8006c14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c16:	e010      	b.n	8006c3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c18:	4b1a      	ldr	r3, [pc, #104]	@ (8006c84 <UART_SetConfig+0x5c0>)
 8006c1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c1c:	e00d      	b.n	8006c3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c1e:	f7fd fe37 	bl	8004890 <HAL_RCC_GetSysClockFreq>
 8006c22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c24:	e009      	b.n	8006c3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c2c:	e005      	b.n	8006c3a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c38:	bf00      	nop
    }

    if (pclk != 0U)
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d028      	beq.n	8006c92 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c44:	4a10      	ldr	r2, [pc, #64]	@ (8006c88 <UART_SetConfig+0x5c4>)
 8006c46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	085b      	lsrs	r3, r3, #1
 8006c58:	441a      	add	r2, r3
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	2b0f      	cmp	r3, #15
 8006c68:	d910      	bls.n	8006c8c <UART_SetConfig+0x5c8>
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c70:	d20c      	bcs.n	8006c8c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60da      	str	r2, [r3, #12]
 8006c7c:	e009      	b.n	8006c92 <UART_SetConfig+0x5ce>
 8006c7e:	bf00      	nop
 8006c80:	40008000 	.word	0x40008000
 8006c84:	00f42400 	.word	0x00f42400
 8006c88:	08009d44 	.word	0x08009d44
      }
      else
      {
        ret = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	2200      	movs	r2, #0
 8006cac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006cae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3730      	adds	r7, #48	@ 0x30
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006cbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc8:	f003 0308 	and.w	r3, r3, #8
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00a      	beq.n	8006ce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00a      	beq.n	8006d08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00a      	beq.n	8006d2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d50:	f003 0310 	and.w	r3, r3, #16
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00a      	beq.n	8006d6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d01a      	beq.n	8006dd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dba:	d10a      	bne.n	8006dd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	605a      	str	r2, [r3, #4]
  }
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b098      	sub	sp, #96	@ 0x60
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e10:	f7fa fe84 	bl	8001b1c <HAL_GetTick>
 8006e14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b08      	cmp	r3, #8
 8006e22:	d12f      	bne.n	8006e84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f88e 	bl	8006f54 <UART_WaitOnFlagUntilTimeout>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d022      	beq.n	8006e84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e46:	e853 3f00 	ldrex	r3, [r3]
 8006e4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e52:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e6      	bne.n	8006e3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e063      	b.n	8006f4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0304 	and.w	r3, r3, #4
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	d149      	bne.n	8006f26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f857 	bl	8006f54 <UART_WaitOnFlagUntilTimeout>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d03c      	beq.n	8006f26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb4:	e853 3f00 	ldrex	r3, [r3]
 8006eb8:	623b      	str	r3, [r7, #32]
   return(result);
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ec0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006eca:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ecc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ece:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ed2:	e841 2300 	strex	r3, r2, [r1]
 8006ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e6      	bne.n	8006eac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	e853 3f00 	ldrex	r3, [r3]
 8006eec:	60fb      	str	r3, [r7, #12]
   return(result);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f023 0301 	bic.w	r3, r3, #1
 8006ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3308      	adds	r3, #8
 8006efc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006efe:	61fa      	str	r2, [r7, #28]
 8006f00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f02:	69b9      	ldr	r1, [r7, #24]
 8006f04:	69fa      	ldr	r2, [r7, #28]
 8006f06:	e841 2300 	strex	r3, r2, [r1]
 8006f0a:	617b      	str	r3, [r7, #20]
   return(result);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1e5      	bne.n	8006ede <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2220      	movs	r2, #32
 8006f16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e012      	b.n	8006f4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3758      	adds	r7, #88	@ 0x58
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	4613      	mov	r3, r2
 8006f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f64:	e04f      	b.n	8007006 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f6c:	d04b      	beq.n	8007006 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f6e:	f7fa fdd5 	bl	8001b1c <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d302      	bcc.n	8006f84 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e04e      	b.n	8007026 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0304 	and.w	r3, r3, #4
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d037      	beq.n	8007006 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b80      	cmp	r3, #128	@ 0x80
 8006f9a:	d034      	beq.n	8007006 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2b40      	cmp	r3, #64	@ 0x40
 8006fa0:	d031      	beq.n	8007006 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d110      	bne.n	8006fd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2208      	movs	r2, #8
 8006fb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 f838 	bl	800702e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2208      	movs	r2, #8
 8006fc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e029      	b.n	8007026 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fe0:	d111      	bne.n	8007006 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 f81e 	bl	800702e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e00f      	b.n	8007026 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69da      	ldr	r2, [r3, #28]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	4013      	ands	r3, r2
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	429a      	cmp	r2, r3
 8007014:	bf0c      	ite	eq
 8007016:	2301      	moveq	r3, #1
 8007018:	2300      	movne	r3, #0
 800701a:	b2db      	uxtb	r3, r3
 800701c:	461a      	mov	r2, r3
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	429a      	cmp	r2, r3
 8007022:	d0a0      	beq.n	8006f66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800702e:	b480      	push	{r7}
 8007030:	b095      	sub	sp, #84	@ 0x54
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800703e:	e853 3f00 	ldrex	r3, [r3]
 8007042:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007046:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800704a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	461a      	mov	r2, r3
 8007052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007054:	643b      	str	r3, [r7, #64]	@ 0x40
 8007056:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800705a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800705c:	e841 2300 	strex	r3, r2, [r1]
 8007060:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e6      	bne.n	8007036 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3308      	adds	r3, #8
 800706e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	e853 3f00 	ldrex	r3, [r3]
 8007076:	61fb      	str	r3, [r7, #28]
   return(result);
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800707e:	f023 0301 	bic.w	r3, r3, #1
 8007082:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3308      	adds	r3, #8
 800708a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800708c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800708e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e3      	bne.n	8007068 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d118      	bne.n	80070da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f023 0310 	bic.w	r3, r3, #16
 80070bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070c6:	61bb      	str	r3, [r7, #24]
 80070c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	6979      	ldr	r1, [r7, #20]
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	613b      	str	r3, [r7, #16]
   return(result);
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e6      	bne.n	80070a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2220      	movs	r2, #32
 80070de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80070ee:	bf00      	nop
 80070f0:	3754      	adds	r7, #84	@ 0x54
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b085      	sub	sp, #20
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007108:	2b01      	cmp	r3, #1
 800710a:	d101      	bne.n	8007110 <HAL_UARTEx_DisableFifoMode+0x16>
 800710c:	2302      	movs	r3, #2
 800710e:	e027      	b.n	8007160 <HAL_UARTEx_DisableFifoMode+0x66>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2224      	movs	r2, #36	@ 0x24
 800711c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 0201 	bic.w	r2, r2, #1
 8007136:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800713e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2220      	movs	r2, #32
 8007152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800717c:	2b01      	cmp	r3, #1
 800717e:	d101      	bne.n	8007184 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007180:	2302      	movs	r3, #2
 8007182:	e02d      	b.n	80071e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2224      	movs	r2, #36	@ 0x24
 8007190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0201 	bic.w	r2, r2, #1
 80071aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	430a      	orrs	r2, r1
 80071be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f84f 	bl	8007264 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2220      	movs	r2, #32
 80071d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d101      	bne.n	8007200 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071fc:	2302      	movs	r3, #2
 80071fe:	e02d      	b.n	800725c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2224      	movs	r2, #36	@ 0x24
 800720c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0201 	bic.w	r2, r2, #1
 8007226:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f811 	bl	8007264 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2220      	movs	r2, #32
 800724e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007270:	2b00      	cmp	r3, #0
 8007272:	d108      	bne.n	8007286 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007284:	e031      	b.n	80072ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007286:	2308      	movs	r3, #8
 8007288:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800728a:	2308      	movs	r3, #8
 800728c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	0e5b      	lsrs	r3, r3, #25
 8007296:	b2db      	uxtb	r3, r3
 8007298:	f003 0307 	and.w	r3, r3, #7
 800729c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	0f5b      	lsrs	r3, r3, #29
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	f003 0307 	and.w	r3, r3, #7
 80072ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
 80072b0:	7b3a      	ldrb	r2, [r7, #12]
 80072b2:	4911      	ldr	r1, [pc, #68]	@ (80072f8 <UARTEx_SetNbDataToProcess+0x94>)
 80072b4:	5c8a      	ldrb	r2, [r1, r2]
 80072b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072ba:	7b3a      	ldrb	r2, [r7, #12]
 80072bc:	490f      	ldr	r1, [pc, #60]	@ (80072fc <UARTEx_SetNbDataToProcess+0x98>)
 80072be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	7b7a      	ldrb	r2, [r7, #13]
 80072d0:	4909      	ldr	r1, [pc, #36]	@ (80072f8 <UARTEx_SetNbDataToProcess+0x94>)
 80072d2:	5c8a      	ldrb	r2, [r1, r2]
 80072d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072d8:	7b7a      	ldrb	r2, [r7, #13]
 80072da:	4908      	ldr	r1, [pc, #32]	@ (80072fc <UARTEx_SetNbDataToProcess+0x98>)
 80072dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072de:	fb93 f3f2 	sdiv	r3, r3, r2
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80072ea:	bf00      	nop
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	08009d5c 	.word	0x08009d5c
 80072fc:	08009d64 	.word	0x08009d64

08007300 <__cvt>:
 8007300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007304:	ec57 6b10 	vmov	r6, r7, d0
 8007308:	2f00      	cmp	r7, #0
 800730a:	460c      	mov	r4, r1
 800730c:	4619      	mov	r1, r3
 800730e:	463b      	mov	r3, r7
 8007310:	bfbb      	ittet	lt
 8007312:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007316:	461f      	movlt	r7, r3
 8007318:	2300      	movge	r3, #0
 800731a:	232d      	movlt	r3, #45	@ 0x2d
 800731c:	700b      	strb	r3, [r1, #0]
 800731e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007320:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007324:	4691      	mov	r9, r2
 8007326:	f023 0820 	bic.w	r8, r3, #32
 800732a:	bfbc      	itt	lt
 800732c:	4632      	movlt	r2, r6
 800732e:	4616      	movlt	r6, r2
 8007330:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007334:	d005      	beq.n	8007342 <__cvt+0x42>
 8007336:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800733a:	d100      	bne.n	800733e <__cvt+0x3e>
 800733c:	3401      	adds	r4, #1
 800733e:	2102      	movs	r1, #2
 8007340:	e000      	b.n	8007344 <__cvt+0x44>
 8007342:	2103      	movs	r1, #3
 8007344:	ab03      	add	r3, sp, #12
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	ab02      	add	r3, sp, #8
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	ec47 6b10 	vmov	d0, r6, r7
 8007350:	4653      	mov	r3, sl
 8007352:	4622      	mov	r2, r4
 8007354:	f000 fe20 	bl	8007f98 <_dtoa_r>
 8007358:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800735c:	4605      	mov	r5, r0
 800735e:	d119      	bne.n	8007394 <__cvt+0x94>
 8007360:	f019 0f01 	tst.w	r9, #1
 8007364:	d00e      	beq.n	8007384 <__cvt+0x84>
 8007366:	eb00 0904 	add.w	r9, r0, r4
 800736a:	2200      	movs	r2, #0
 800736c:	2300      	movs	r3, #0
 800736e:	4630      	mov	r0, r6
 8007370:	4639      	mov	r1, r7
 8007372:	f7f9 fbd1 	bl	8000b18 <__aeabi_dcmpeq>
 8007376:	b108      	cbz	r0, 800737c <__cvt+0x7c>
 8007378:	f8cd 900c 	str.w	r9, [sp, #12]
 800737c:	2230      	movs	r2, #48	@ 0x30
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	454b      	cmp	r3, r9
 8007382:	d31e      	bcc.n	80073c2 <__cvt+0xc2>
 8007384:	9b03      	ldr	r3, [sp, #12]
 8007386:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007388:	1b5b      	subs	r3, r3, r5
 800738a:	4628      	mov	r0, r5
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	b004      	add	sp, #16
 8007390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007394:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007398:	eb00 0904 	add.w	r9, r0, r4
 800739c:	d1e5      	bne.n	800736a <__cvt+0x6a>
 800739e:	7803      	ldrb	r3, [r0, #0]
 80073a0:	2b30      	cmp	r3, #48	@ 0x30
 80073a2:	d10a      	bne.n	80073ba <__cvt+0xba>
 80073a4:	2200      	movs	r2, #0
 80073a6:	2300      	movs	r3, #0
 80073a8:	4630      	mov	r0, r6
 80073aa:	4639      	mov	r1, r7
 80073ac:	f7f9 fbb4 	bl	8000b18 <__aeabi_dcmpeq>
 80073b0:	b918      	cbnz	r0, 80073ba <__cvt+0xba>
 80073b2:	f1c4 0401 	rsb	r4, r4, #1
 80073b6:	f8ca 4000 	str.w	r4, [sl]
 80073ba:	f8da 3000 	ldr.w	r3, [sl]
 80073be:	4499      	add	r9, r3
 80073c0:	e7d3      	b.n	800736a <__cvt+0x6a>
 80073c2:	1c59      	adds	r1, r3, #1
 80073c4:	9103      	str	r1, [sp, #12]
 80073c6:	701a      	strb	r2, [r3, #0]
 80073c8:	e7d9      	b.n	800737e <__cvt+0x7e>

080073ca <__exponent>:
 80073ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073cc:	2900      	cmp	r1, #0
 80073ce:	bfba      	itte	lt
 80073d0:	4249      	neglt	r1, r1
 80073d2:	232d      	movlt	r3, #45	@ 0x2d
 80073d4:	232b      	movge	r3, #43	@ 0x2b
 80073d6:	2909      	cmp	r1, #9
 80073d8:	7002      	strb	r2, [r0, #0]
 80073da:	7043      	strb	r3, [r0, #1]
 80073dc:	dd29      	ble.n	8007432 <__exponent+0x68>
 80073de:	f10d 0307 	add.w	r3, sp, #7
 80073e2:	461d      	mov	r5, r3
 80073e4:	270a      	movs	r7, #10
 80073e6:	461a      	mov	r2, r3
 80073e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80073ec:	fb07 1416 	mls	r4, r7, r6, r1
 80073f0:	3430      	adds	r4, #48	@ 0x30
 80073f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80073f6:	460c      	mov	r4, r1
 80073f8:	2c63      	cmp	r4, #99	@ 0x63
 80073fa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80073fe:	4631      	mov	r1, r6
 8007400:	dcf1      	bgt.n	80073e6 <__exponent+0x1c>
 8007402:	3130      	adds	r1, #48	@ 0x30
 8007404:	1e94      	subs	r4, r2, #2
 8007406:	f803 1c01 	strb.w	r1, [r3, #-1]
 800740a:	1c41      	adds	r1, r0, #1
 800740c:	4623      	mov	r3, r4
 800740e:	42ab      	cmp	r3, r5
 8007410:	d30a      	bcc.n	8007428 <__exponent+0x5e>
 8007412:	f10d 0309 	add.w	r3, sp, #9
 8007416:	1a9b      	subs	r3, r3, r2
 8007418:	42ac      	cmp	r4, r5
 800741a:	bf88      	it	hi
 800741c:	2300      	movhi	r3, #0
 800741e:	3302      	adds	r3, #2
 8007420:	4403      	add	r3, r0
 8007422:	1a18      	subs	r0, r3, r0
 8007424:	b003      	add	sp, #12
 8007426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007428:	f813 6b01 	ldrb.w	r6, [r3], #1
 800742c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007430:	e7ed      	b.n	800740e <__exponent+0x44>
 8007432:	2330      	movs	r3, #48	@ 0x30
 8007434:	3130      	adds	r1, #48	@ 0x30
 8007436:	7083      	strb	r3, [r0, #2]
 8007438:	70c1      	strb	r1, [r0, #3]
 800743a:	1d03      	adds	r3, r0, #4
 800743c:	e7f1      	b.n	8007422 <__exponent+0x58>
	...

08007440 <_printf_float>:
 8007440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007444:	b08d      	sub	sp, #52	@ 0x34
 8007446:	460c      	mov	r4, r1
 8007448:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800744c:	4616      	mov	r6, r2
 800744e:	461f      	mov	r7, r3
 8007450:	4605      	mov	r5, r0
 8007452:	f000 fd13 	bl	8007e7c <_localeconv_r>
 8007456:	6803      	ldr	r3, [r0, #0]
 8007458:	9304      	str	r3, [sp, #16]
 800745a:	4618      	mov	r0, r3
 800745c:	f7f8 ff30 	bl	80002c0 <strlen>
 8007460:	2300      	movs	r3, #0
 8007462:	930a      	str	r3, [sp, #40]	@ 0x28
 8007464:	f8d8 3000 	ldr.w	r3, [r8]
 8007468:	9005      	str	r0, [sp, #20]
 800746a:	3307      	adds	r3, #7
 800746c:	f023 0307 	bic.w	r3, r3, #7
 8007470:	f103 0208 	add.w	r2, r3, #8
 8007474:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007478:	f8d4 b000 	ldr.w	fp, [r4]
 800747c:	f8c8 2000 	str.w	r2, [r8]
 8007480:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007484:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007488:	9307      	str	r3, [sp, #28]
 800748a:	f8cd 8018 	str.w	r8, [sp, #24]
 800748e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007492:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007496:	4b9c      	ldr	r3, [pc, #624]	@ (8007708 <_printf_float+0x2c8>)
 8007498:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800749c:	f7f9 fb6e 	bl	8000b7c <__aeabi_dcmpun>
 80074a0:	bb70      	cbnz	r0, 8007500 <_printf_float+0xc0>
 80074a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074a6:	4b98      	ldr	r3, [pc, #608]	@ (8007708 <_printf_float+0x2c8>)
 80074a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074ac:	f7f9 fb48 	bl	8000b40 <__aeabi_dcmple>
 80074b0:	bb30      	cbnz	r0, 8007500 <_printf_float+0xc0>
 80074b2:	2200      	movs	r2, #0
 80074b4:	2300      	movs	r3, #0
 80074b6:	4640      	mov	r0, r8
 80074b8:	4649      	mov	r1, r9
 80074ba:	f7f9 fb37 	bl	8000b2c <__aeabi_dcmplt>
 80074be:	b110      	cbz	r0, 80074c6 <_printf_float+0x86>
 80074c0:	232d      	movs	r3, #45	@ 0x2d
 80074c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074c6:	4a91      	ldr	r2, [pc, #580]	@ (800770c <_printf_float+0x2cc>)
 80074c8:	4b91      	ldr	r3, [pc, #580]	@ (8007710 <_printf_float+0x2d0>)
 80074ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80074ce:	bf8c      	ite	hi
 80074d0:	4690      	movhi	r8, r2
 80074d2:	4698      	movls	r8, r3
 80074d4:	2303      	movs	r3, #3
 80074d6:	6123      	str	r3, [r4, #16]
 80074d8:	f02b 0304 	bic.w	r3, fp, #4
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	f04f 0900 	mov.w	r9, #0
 80074e2:	9700      	str	r7, [sp, #0]
 80074e4:	4633      	mov	r3, r6
 80074e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80074e8:	4621      	mov	r1, r4
 80074ea:	4628      	mov	r0, r5
 80074ec:	f000 f9d2 	bl	8007894 <_printf_common>
 80074f0:	3001      	adds	r0, #1
 80074f2:	f040 808d 	bne.w	8007610 <_printf_float+0x1d0>
 80074f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074fa:	b00d      	add	sp, #52	@ 0x34
 80074fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007500:	4642      	mov	r2, r8
 8007502:	464b      	mov	r3, r9
 8007504:	4640      	mov	r0, r8
 8007506:	4649      	mov	r1, r9
 8007508:	f7f9 fb38 	bl	8000b7c <__aeabi_dcmpun>
 800750c:	b140      	cbz	r0, 8007520 <_printf_float+0xe0>
 800750e:	464b      	mov	r3, r9
 8007510:	2b00      	cmp	r3, #0
 8007512:	bfbc      	itt	lt
 8007514:	232d      	movlt	r3, #45	@ 0x2d
 8007516:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800751a:	4a7e      	ldr	r2, [pc, #504]	@ (8007714 <_printf_float+0x2d4>)
 800751c:	4b7e      	ldr	r3, [pc, #504]	@ (8007718 <_printf_float+0x2d8>)
 800751e:	e7d4      	b.n	80074ca <_printf_float+0x8a>
 8007520:	6863      	ldr	r3, [r4, #4]
 8007522:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007526:	9206      	str	r2, [sp, #24]
 8007528:	1c5a      	adds	r2, r3, #1
 800752a:	d13b      	bne.n	80075a4 <_printf_float+0x164>
 800752c:	2306      	movs	r3, #6
 800752e:	6063      	str	r3, [r4, #4]
 8007530:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007534:	2300      	movs	r3, #0
 8007536:	6022      	str	r2, [r4, #0]
 8007538:	9303      	str	r3, [sp, #12]
 800753a:	ab0a      	add	r3, sp, #40	@ 0x28
 800753c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007540:	ab09      	add	r3, sp, #36	@ 0x24
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	6861      	ldr	r1, [r4, #4]
 8007546:	ec49 8b10 	vmov	d0, r8, r9
 800754a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800754e:	4628      	mov	r0, r5
 8007550:	f7ff fed6 	bl	8007300 <__cvt>
 8007554:	9b06      	ldr	r3, [sp, #24]
 8007556:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007558:	2b47      	cmp	r3, #71	@ 0x47
 800755a:	4680      	mov	r8, r0
 800755c:	d129      	bne.n	80075b2 <_printf_float+0x172>
 800755e:	1cc8      	adds	r0, r1, #3
 8007560:	db02      	blt.n	8007568 <_printf_float+0x128>
 8007562:	6863      	ldr	r3, [r4, #4]
 8007564:	4299      	cmp	r1, r3
 8007566:	dd41      	ble.n	80075ec <_printf_float+0x1ac>
 8007568:	f1aa 0a02 	sub.w	sl, sl, #2
 800756c:	fa5f fa8a 	uxtb.w	sl, sl
 8007570:	3901      	subs	r1, #1
 8007572:	4652      	mov	r2, sl
 8007574:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007578:	9109      	str	r1, [sp, #36]	@ 0x24
 800757a:	f7ff ff26 	bl	80073ca <__exponent>
 800757e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007580:	1813      	adds	r3, r2, r0
 8007582:	2a01      	cmp	r2, #1
 8007584:	4681      	mov	r9, r0
 8007586:	6123      	str	r3, [r4, #16]
 8007588:	dc02      	bgt.n	8007590 <_printf_float+0x150>
 800758a:	6822      	ldr	r2, [r4, #0]
 800758c:	07d2      	lsls	r2, r2, #31
 800758e:	d501      	bpl.n	8007594 <_printf_float+0x154>
 8007590:	3301      	adds	r3, #1
 8007592:	6123      	str	r3, [r4, #16]
 8007594:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0a2      	beq.n	80074e2 <_printf_float+0xa2>
 800759c:	232d      	movs	r3, #45	@ 0x2d
 800759e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075a2:	e79e      	b.n	80074e2 <_printf_float+0xa2>
 80075a4:	9a06      	ldr	r2, [sp, #24]
 80075a6:	2a47      	cmp	r2, #71	@ 0x47
 80075a8:	d1c2      	bne.n	8007530 <_printf_float+0xf0>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1c0      	bne.n	8007530 <_printf_float+0xf0>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e7bd      	b.n	800752e <_printf_float+0xee>
 80075b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075b6:	d9db      	bls.n	8007570 <_printf_float+0x130>
 80075b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80075bc:	d118      	bne.n	80075f0 <_printf_float+0x1b0>
 80075be:	2900      	cmp	r1, #0
 80075c0:	6863      	ldr	r3, [r4, #4]
 80075c2:	dd0b      	ble.n	80075dc <_printf_float+0x19c>
 80075c4:	6121      	str	r1, [r4, #16]
 80075c6:	b913      	cbnz	r3, 80075ce <_printf_float+0x18e>
 80075c8:	6822      	ldr	r2, [r4, #0]
 80075ca:	07d0      	lsls	r0, r2, #31
 80075cc:	d502      	bpl.n	80075d4 <_printf_float+0x194>
 80075ce:	3301      	adds	r3, #1
 80075d0:	440b      	add	r3, r1
 80075d2:	6123      	str	r3, [r4, #16]
 80075d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80075d6:	f04f 0900 	mov.w	r9, #0
 80075da:	e7db      	b.n	8007594 <_printf_float+0x154>
 80075dc:	b913      	cbnz	r3, 80075e4 <_printf_float+0x1a4>
 80075de:	6822      	ldr	r2, [r4, #0]
 80075e0:	07d2      	lsls	r2, r2, #31
 80075e2:	d501      	bpl.n	80075e8 <_printf_float+0x1a8>
 80075e4:	3302      	adds	r3, #2
 80075e6:	e7f4      	b.n	80075d2 <_printf_float+0x192>
 80075e8:	2301      	movs	r3, #1
 80075ea:	e7f2      	b.n	80075d2 <_printf_float+0x192>
 80075ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80075f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075f2:	4299      	cmp	r1, r3
 80075f4:	db05      	blt.n	8007602 <_printf_float+0x1c2>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	6121      	str	r1, [r4, #16]
 80075fa:	07d8      	lsls	r0, r3, #31
 80075fc:	d5ea      	bpl.n	80075d4 <_printf_float+0x194>
 80075fe:	1c4b      	adds	r3, r1, #1
 8007600:	e7e7      	b.n	80075d2 <_printf_float+0x192>
 8007602:	2900      	cmp	r1, #0
 8007604:	bfd4      	ite	le
 8007606:	f1c1 0202 	rsble	r2, r1, #2
 800760a:	2201      	movgt	r2, #1
 800760c:	4413      	add	r3, r2
 800760e:	e7e0      	b.n	80075d2 <_printf_float+0x192>
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	055a      	lsls	r2, r3, #21
 8007614:	d407      	bmi.n	8007626 <_printf_float+0x1e6>
 8007616:	6923      	ldr	r3, [r4, #16]
 8007618:	4642      	mov	r2, r8
 800761a:	4631      	mov	r1, r6
 800761c:	4628      	mov	r0, r5
 800761e:	47b8      	blx	r7
 8007620:	3001      	adds	r0, #1
 8007622:	d12b      	bne.n	800767c <_printf_float+0x23c>
 8007624:	e767      	b.n	80074f6 <_printf_float+0xb6>
 8007626:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800762a:	f240 80dd 	bls.w	80077e8 <_printf_float+0x3a8>
 800762e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007632:	2200      	movs	r2, #0
 8007634:	2300      	movs	r3, #0
 8007636:	f7f9 fa6f 	bl	8000b18 <__aeabi_dcmpeq>
 800763a:	2800      	cmp	r0, #0
 800763c:	d033      	beq.n	80076a6 <_printf_float+0x266>
 800763e:	4a37      	ldr	r2, [pc, #220]	@ (800771c <_printf_float+0x2dc>)
 8007640:	2301      	movs	r3, #1
 8007642:	4631      	mov	r1, r6
 8007644:	4628      	mov	r0, r5
 8007646:	47b8      	blx	r7
 8007648:	3001      	adds	r0, #1
 800764a:	f43f af54 	beq.w	80074f6 <_printf_float+0xb6>
 800764e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007652:	4543      	cmp	r3, r8
 8007654:	db02      	blt.n	800765c <_printf_float+0x21c>
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	07d8      	lsls	r0, r3, #31
 800765a:	d50f      	bpl.n	800767c <_printf_float+0x23c>
 800765c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007660:	4631      	mov	r1, r6
 8007662:	4628      	mov	r0, r5
 8007664:	47b8      	blx	r7
 8007666:	3001      	adds	r0, #1
 8007668:	f43f af45 	beq.w	80074f6 <_printf_float+0xb6>
 800766c:	f04f 0900 	mov.w	r9, #0
 8007670:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007674:	f104 0a1a 	add.w	sl, r4, #26
 8007678:	45c8      	cmp	r8, r9
 800767a:	dc09      	bgt.n	8007690 <_printf_float+0x250>
 800767c:	6823      	ldr	r3, [r4, #0]
 800767e:	079b      	lsls	r3, r3, #30
 8007680:	f100 8103 	bmi.w	800788a <_printf_float+0x44a>
 8007684:	68e0      	ldr	r0, [r4, #12]
 8007686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007688:	4298      	cmp	r0, r3
 800768a:	bfb8      	it	lt
 800768c:	4618      	movlt	r0, r3
 800768e:	e734      	b.n	80074fa <_printf_float+0xba>
 8007690:	2301      	movs	r3, #1
 8007692:	4652      	mov	r2, sl
 8007694:	4631      	mov	r1, r6
 8007696:	4628      	mov	r0, r5
 8007698:	47b8      	blx	r7
 800769a:	3001      	adds	r0, #1
 800769c:	f43f af2b 	beq.w	80074f6 <_printf_float+0xb6>
 80076a0:	f109 0901 	add.w	r9, r9, #1
 80076a4:	e7e8      	b.n	8007678 <_printf_float+0x238>
 80076a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	dc39      	bgt.n	8007720 <_printf_float+0x2e0>
 80076ac:	4a1b      	ldr	r2, [pc, #108]	@ (800771c <_printf_float+0x2dc>)
 80076ae:	2301      	movs	r3, #1
 80076b0:	4631      	mov	r1, r6
 80076b2:	4628      	mov	r0, r5
 80076b4:	47b8      	blx	r7
 80076b6:	3001      	adds	r0, #1
 80076b8:	f43f af1d 	beq.w	80074f6 <_printf_float+0xb6>
 80076bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80076c0:	ea59 0303 	orrs.w	r3, r9, r3
 80076c4:	d102      	bne.n	80076cc <_printf_float+0x28c>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	07d9      	lsls	r1, r3, #31
 80076ca:	d5d7      	bpl.n	800767c <_printf_float+0x23c>
 80076cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076d0:	4631      	mov	r1, r6
 80076d2:	4628      	mov	r0, r5
 80076d4:	47b8      	blx	r7
 80076d6:	3001      	adds	r0, #1
 80076d8:	f43f af0d 	beq.w	80074f6 <_printf_float+0xb6>
 80076dc:	f04f 0a00 	mov.w	sl, #0
 80076e0:	f104 0b1a 	add.w	fp, r4, #26
 80076e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e6:	425b      	negs	r3, r3
 80076e8:	4553      	cmp	r3, sl
 80076ea:	dc01      	bgt.n	80076f0 <_printf_float+0x2b0>
 80076ec:	464b      	mov	r3, r9
 80076ee:	e793      	b.n	8007618 <_printf_float+0x1d8>
 80076f0:	2301      	movs	r3, #1
 80076f2:	465a      	mov	r2, fp
 80076f4:	4631      	mov	r1, r6
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b8      	blx	r7
 80076fa:	3001      	adds	r0, #1
 80076fc:	f43f aefb 	beq.w	80074f6 <_printf_float+0xb6>
 8007700:	f10a 0a01 	add.w	sl, sl, #1
 8007704:	e7ee      	b.n	80076e4 <_printf_float+0x2a4>
 8007706:	bf00      	nop
 8007708:	7fefffff 	.word	0x7fefffff
 800770c:	08009d70 	.word	0x08009d70
 8007710:	08009d6c 	.word	0x08009d6c
 8007714:	08009d78 	.word	0x08009d78
 8007718:	08009d74 	.word	0x08009d74
 800771c:	08009d7c 	.word	0x08009d7c
 8007720:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007722:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007726:	4553      	cmp	r3, sl
 8007728:	bfa8      	it	ge
 800772a:	4653      	movge	r3, sl
 800772c:	2b00      	cmp	r3, #0
 800772e:	4699      	mov	r9, r3
 8007730:	dc36      	bgt.n	80077a0 <_printf_float+0x360>
 8007732:	f04f 0b00 	mov.w	fp, #0
 8007736:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800773a:	f104 021a 	add.w	r2, r4, #26
 800773e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007740:	9306      	str	r3, [sp, #24]
 8007742:	eba3 0309 	sub.w	r3, r3, r9
 8007746:	455b      	cmp	r3, fp
 8007748:	dc31      	bgt.n	80077ae <_printf_float+0x36e>
 800774a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800774c:	459a      	cmp	sl, r3
 800774e:	dc3a      	bgt.n	80077c6 <_printf_float+0x386>
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	07da      	lsls	r2, r3, #31
 8007754:	d437      	bmi.n	80077c6 <_printf_float+0x386>
 8007756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007758:	ebaa 0903 	sub.w	r9, sl, r3
 800775c:	9b06      	ldr	r3, [sp, #24]
 800775e:	ebaa 0303 	sub.w	r3, sl, r3
 8007762:	4599      	cmp	r9, r3
 8007764:	bfa8      	it	ge
 8007766:	4699      	movge	r9, r3
 8007768:	f1b9 0f00 	cmp.w	r9, #0
 800776c:	dc33      	bgt.n	80077d6 <_printf_float+0x396>
 800776e:	f04f 0800 	mov.w	r8, #0
 8007772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007776:	f104 0b1a 	add.w	fp, r4, #26
 800777a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800777c:	ebaa 0303 	sub.w	r3, sl, r3
 8007780:	eba3 0309 	sub.w	r3, r3, r9
 8007784:	4543      	cmp	r3, r8
 8007786:	f77f af79 	ble.w	800767c <_printf_float+0x23c>
 800778a:	2301      	movs	r3, #1
 800778c:	465a      	mov	r2, fp
 800778e:	4631      	mov	r1, r6
 8007790:	4628      	mov	r0, r5
 8007792:	47b8      	blx	r7
 8007794:	3001      	adds	r0, #1
 8007796:	f43f aeae 	beq.w	80074f6 <_printf_float+0xb6>
 800779a:	f108 0801 	add.w	r8, r8, #1
 800779e:	e7ec      	b.n	800777a <_printf_float+0x33a>
 80077a0:	4642      	mov	r2, r8
 80077a2:	4631      	mov	r1, r6
 80077a4:	4628      	mov	r0, r5
 80077a6:	47b8      	blx	r7
 80077a8:	3001      	adds	r0, #1
 80077aa:	d1c2      	bne.n	8007732 <_printf_float+0x2f2>
 80077ac:	e6a3      	b.n	80074f6 <_printf_float+0xb6>
 80077ae:	2301      	movs	r3, #1
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	9206      	str	r2, [sp, #24]
 80077b6:	47b8      	blx	r7
 80077b8:	3001      	adds	r0, #1
 80077ba:	f43f ae9c 	beq.w	80074f6 <_printf_float+0xb6>
 80077be:	9a06      	ldr	r2, [sp, #24]
 80077c0:	f10b 0b01 	add.w	fp, fp, #1
 80077c4:	e7bb      	b.n	800773e <_printf_float+0x2fe>
 80077c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077ca:	4631      	mov	r1, r6
 80077cc:	4628      	mov	r0, r5
 80077ce:	47b8      	blx	r7
 80077d0:	3001      	adds	r0, #1
 80077d2:	d1c0      	bne.n	8007756 <_printf_float+0x316>
 80077d4:	e68f      	b.n	80074f6 <_printf_float+0xb6>
 80077d6:	9a06      	ldr	r2, [sp, #24]
 80077d8:	464b      	mov	r3, r9
 80077da:	4442      	add	r2, r8
 80077dc:	4631      	mov	r1, r6
 80077de:	4628      	mov	r0, r5
 80077e0:	47b8      	blx	r7
 80077e2:	3001      	adds	r0, #1
 80077e4:	d1c3      	bne.n	800776e <_printf_float+0x32e>
 80077e6:	e686      	b.n	80074f6 <_printf_float+0xb6>
 80077e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80077ec:	f1ba 0f01 	cmp.w	sl, #1
 80077f0:	dc01      	bgt.n	80077f6 <_printf_float+0x3b6>
 80077f2:	07db      	lsls	r3, r3, #31
 80077f4:	d536      	bpl.n	8007864 <_printf_float+0x424>
 80077f6:	2301      	movs	r3, #1
 80077f8:	4642      	mov	r2, r8
 80077fa:	4631      	mov	r1, r6
 80077fc:	4628      	mov	r0, r5
 80077fe:	47b8      	blx	r7
 8007800:	3001      	adds	r0, #1
 8007802:	f43f ae78 	beq.w	80074f6 <_printf_float+0xb6>
 8007806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800780a:	4631      	mov	r1, r6
 800780c:	4628      	mov	r0, r5
 800780e:	47b8      	blx	r7
 8007810:	3001      	adds	r0, #1
 8007812:	f43f ae70 	beq.w	80074f6 <_printf_float+0xb6>
 8007816:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800781a:	2200      	movs	r2, #0
 800781c:	2300      	movs	r3, #0
 800781e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007822:	f7f9 f979 	bl	8000b18 <__aeabi_dcmpeq>
 8007826:	b9c0      	cbnz	r0, 800785a <_printf_float+0x41a>
 8007828:	4653      	mov	r3, sl
 800782a:	f108 0201 	add.w	r2, r8, #1
 800782e:	4631      	mov	r1, r6
 8007830:	4628      	mov	r0, r5
 8007832:	47b8      	blx	r7
 8007834:	3001      	adds	r0, #1
 8007836:	d10c      	bne.n	8007852 <_printf_float+0x412>
 8007838:	e65d      	b.n	80074f6 <_printf_float+0xb6>
 800783a:	2301      	movs	r3, #1
 800783c:	465a      	mov	r2, fp
 800783e:	4631      	mov	r1, r6
 8007840:	4628      	mov	r0, r5
 8007842:	47b8      	blx	r7
 8007844:	3001      	adds	r0, #1
 8007846:	f43f ae56 	beq.w	80074f6 <_printf_float+0xb6>
 800784a:	f108 0801 	add.w	r8, r8, #1
 800784e:	45d0      	cmp	r8, sl
 8007850:	dbf3      	blt.n	800783a <_printf_float+0x3fa>
 8007852:	464b      	mov	r3, r9
 8007854:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007858:	e6df      	b.n	800761a <_printf_float+0x1da>
 800785a:	f04f 0800 	mov.w	r8, #0
 800785e:	f104 0b1a 	add.w	fp, r4, #26
 8007862:	e7f4      	b.n	800784e <_printf_float+0x40e>
 8007864:	2301      	movs	r3, #1
 8007866:	4642      	mov	r2, r8
 8007868:	e7e1      	b.n	800782e <_printf_float+0x3ee>
 800786a:	2301      	movs	r3, #1
 800786c:	464a      	mov	r2, r9
 800786e:	4631      	mov	r1, r6
 8007870:	4628      	mov	r0, r5
 8007872:	47b8      	blx	r7
 8007874:	3001      	adds	r0, #1
 8007876:	f43f ae3e 	beq.w	80074f6 <_printf_float+0xb6>
 800787a:	f108 0801 	add.w	r8, r8, #1
 800787e:	68e3      	ldr	r3, [r4, #12]
 8007880:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007882:	1a5b      	subs	r3, r3, r1
 8007884:	4543      	cmp	r3, r8
 8007886:	dcf0      	bgt.n	800786a <_printf_float+0x42a>
 8007888:	e6fc      	b.n	8007684 <_printf_float+0x244>
 800788a:	f04f 0800 	mov.w	r8, #0
 800788e:	f104 0919 	add.w	r9, r4, #25
 8007892:	e7f4      	b.n	800787e <_printf_float+0x43e>

08007894 <_printf_common>:
 8007894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007898:	4616      	mov	r6, r2
 800789a:	4698      	mov	r8, r3
 800789c:	688a      	ldr	r2, [r1, #8]
 800789e:	690b      	ldr	r3, [r1, #16]
 80078a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078a4:	4293      	cmp	r3, r2
 80078a6:	bfb8      	it	lt
 80078a8:	4613      	movlt	r3, r2
 80078aa:	6033      	str	r3, [r6, #0]
 80078ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078b0:	4607      	mov	r7, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	b10a      	cbz	r2, 80078ba <_printf_common+0x26>
 80078b6:	3301      	adds	r3, #1
 80078b8:	6033      	str	r3, [r6, #0]
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	0699      	lsls	r1, r3, #26
 80078be:	bf42      	ittt	mi
 80078c0:	6833      	ldrmi	r3, [r6, #0]
 80078c2:	3302      	addmi	r3, #2
 80078c4:	6033      	strmi	r3, [r6, #0]
 80078c6:	6825      	ldr	r5, [r4, #0]
 80078c8:	f015 0506 	ands.w	r5, r5, #6
 80078cc:	d106      	bne.n	80078dc <_printf_common+0x48>
 80078ce:	f104 0a19 	add.w	sl, r4, #25
 80078d2:	68e3      	ldr	r3, [r4, #12]
 80078d4:	6832      	ldr	r2, [r6, #0]
 80078d6:	1a9b      	subs	r3, r3, r2
 80078d8:	42ab      	cmp	r3, r5
 80078da:	dc26      	bgt.n	800792a <_printf_common+0x96>
 80078dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078e0:	6822      	ldr	r2, [r4, #0]
 80078e2:	3b00      	subs	r3, #0
 80078e4:	bf18      	it	ne
 80078e6:	2301      	movne	r3, #1
 80078e8:	0692      	lsls	r2, r2, #26
 80078ea:	d42b      	bmi.n	8007944 <_printf_common+0xb0>
 80078ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078f0:	4641      	mov	r1, r8
 80078f2:	4638      	mov	r0, r7
 80078f4:	47c8      	blx	r9
 80078f6:	3001      	adds	r0, #1
 80078f8:	d01e      	beq.n	8007938 <_printf_common+0xa4>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	6922      	ldr	r2, [r4, #16]
 80078fe:	f003 0306 	and.w	r3, r3, #6
 8007902:	2b04      	cmp	r3, #4
 8007904:	bf02      	ittt	eq
 8007906:	68e5      	ldreq	r5, [r4, #12]
 8007908:	6833      	ldreq	r3, [r6, #0]
 800790a:	1aed      	subeq	r5, r5, r3
 800790c:	68a3      	ldr	r3, [r4, #8]
 800790e:	bf0c      	ite	eq
 8007910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007914:	2500      	movne	r5, #0
 8007916:	4293      	cmp	r3, r2
 8007918:	bfc4      	itt	gt
 800791a:	1a9b      	subgt	r3, r3, r2
 800791c:	18ed      	addgt	r5, r5, r3
 800791e:	2600      	movs	r6, #0
 8007920:	341a      	adds	r4, #26
 8007922:	42b5      	cmp	r5, r6
 8007924:	d11a      	bne.n	800795c <_printf_common+0xc8>
 8007926:	2000      	movs	r0, #0
 8007928:	e008      	b.n	800793c <_printf_common+0xa8>
 800792a:	2301      	movs	r3, #1
 800792c:	4652      	mov	r2, sl
 800792e:	4641      	mov	r1, r8
 8007930:	4638      	mov	r0, r7
 8007932:	47c8      	blx	r9
 8007934:	3001      	adds	r0, #1
 8007936:	d103      	bne.n	8007940 <_printf_common+0xac>
 8007938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800793c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007940:	3501      	adds	r5, #1
 8007942:	e7c6      	b.n	80078d2 <_printf_common+0x3e>
 8007944:	18e1      	adds	r1, r4, r3
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	2030      	movs	r0, #48	@ 0x30
 800794a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800794e:	4422      	add	r2, r4
 8007950:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007954:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007958:	3302      	adds	r3, #2
 800795a:	e7c7      	b.n	80078ec <_printf_common+0x58>
 800795c:	2301      	movs	r3, #1
 800795e:	4622      	mov	r2, r4
 8007960:	4641      	mov	r1, r8
 8007962:	4638      	mov	r0, r7
 8007964:	47c8      	blx	r9
 8007966:	3001      	adds	r0, #1
 8007968:	d0e6      	beq.n	8007938 <_printf_common+0xa4>
 800796a:	3601      	adds	r6, #1
 800796c:	e7d9      	b.n	8007922 <_printf_common+0x8e>
	...

08007970 <_printf_i>:
 8007970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007974:	7e0f      	ldrb	r7, [r1, #24]
 8007976:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007978:	2f78      	cmp	r7, #120	@ 0x78
 800797a:	4691      	mov	r9, r2
 800797c:	4680      	mov	r8, r0
 800797e:	460c      	mov	r4, r1
 8007980:	469a      	mov	sl, r3
 8007982:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007986:	d807      	bhi.n	8007998 <_printf_i+0x28>
 8007988:	2f62      	cmp	r7, #98	@ 0x62
 800798a:	d80a      	bhi.n	80079a2 <_printf_i+0x32>
 800798c:	2f00      	cmp	r7, #0
 800798e:	f000 80d1 	beq.w	8007b34 <_printf_i+0x1c4>
 8007992:	2f58      	cmp	r7, #88	@ 0x58
 8007994:	f000 80b8 	beq.w	8007b08 <_printf_i+0x198>
 8007998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800799c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079a0:	e03a      	b.n	8007a18 <_printf_i+0xa8>
 80079a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079a6:	2b15      	cmp	r3, #21
 80079a8:	d8f6      	bhi.n	8007998 <_printf_i+0x28>
 80079aa:	a101      	add	r1, pc, #4	@ (adr r1, 80079b0 <_printf_i+0x40>)
 80079ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079b0:	08007a09 	.word	0x08007a09
 80079b4:	08007a1d 	.word	0x08007a1d
 80079b8:	08007999 	.word	0x08007999
 80079bc:	08007999 	.word	0x08007999
 80079c0:	08007999 	.word	0x08007999
 80079c4:	08007999 	.word	0x08007999
 80079c8:	08007a1d 	.word	0x08007a1d
 80079cc:	08007999 	.word	0x08007999
 80079d0:	08007999 	.word	0x08007999
 80079d4:	08007999 	.word	0x08007999
 80079d8:	08007999 	.word	0x08007999
 80079dc:	08007b1b 	.word	0x08007b1b
 80079e0:	08007a47 	.word	0x08007a47
 80079e4:	08007ad5 	.word	0x08007ad5
 80079e8:	08007999 	.word	0x08007999
 80079ec:	08007999 	.word	0x08007999
 80079f0:	08007b3d 	.word	0x08007b3d
 80079f4:	08007999 	.word	0x08007999
 80079f8:	08007a47 	.word	0x08007a47
 80079fc:	08007999 	.word	0x08007999
 8007a00:	08007999 	.word	0x08007999
 8007a04:	08007add 	.word	0x08007add
 8007a08:	6833      	ldr	r3, [r6, #0]
 8007a0a:	1d1a      	adds	r2, r3, #4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6032      	str	r2, [r6, #0]
 8007a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e09c      	b.n	8007b56 <_printf_i+0x1e6>
 8007a1c:	6833      	ldr	r3, [r6, #0]
 8007a1e:	6820      	ldr	r0, [r4, #0]
 8007a20:	1d19      	adds	r1, r3, #4
 8007a22:	6031      	str	r1, [r6, #0]
 8007a24:	0606      	lsls	r6, r0, #24
 8007a26:	d501      	bpl.n	8007a2c <_printf_i+0xbc>
 8007a28:	681d      	ldr	r5, [r3, #0]
 8007a2a:	e003      	b.n	8007a34 <_printf_i+0xc4>
 8007a2c:	0645      	lsls	r5, r0, #25
 8007a2e:	d5fb      	bpl.n	8007a28 <_printf_i+0xb8>
 8007a30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a34:	2d00      	cmp	r5, #0
 8007a36:	da03      	bge.n	8007a40 <_printf_i+0xd0>
 8007a38:	232d      	movs	r3, #45	@ 0x2d
 8007a3a:	426d      	negs	r5, r5
 8007a3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a40:	4858      	ldr	r0, [pc, #352]	@ (8007ba4 <_printf_i+0x234>)
 8007a42:	230a      	movs	r3, #10
 8007a44:	e011      	b.n	8007a6a <_printf_i+0xfa>
 8007a46:	6821      	ldr	r1, [r4, #0]
 8007a48:	6833      	ldr	r3, [r6, #0]
 8007a4a:	0608      	lsls	r0, r1, #24
 8007a4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a50:	d402      	bmi.n	8007a58 <_printf_i+0xe8>
 8007a52:	0649      	lsls	r1, r1, #25
 8007a54:	bf48      	it	mi
 8007a56:	b2ad      	uxthmi	r5, r5
 8007a58:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a5a:	4852      	ldr	r0, [pc, #328]	@ (8007ba4 <_printf_i+0x234>)
 8007a5c:	6033      	str	r3, [r6, #0]
 8007a5e:	bf14      	ite	ne
 8007a60:	230a      	movne	r3, #10
 8007a62:	2308      	moveq	r3, #8
 8007a64:	2100      	movs	r1, #0
 8007a66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a6a:	6866      	ldr	r6, [r4, #4]
 8007a6c:	60a6      	str	r6, [r4, #8]
 8007a6e:	2e00      	cmp	r6, #0
 8007a70:	db05      	blt.n	8007a7e <_printf_i+0x10e>
 8007a72:	6821      	ldr	r1, [r4, #0]
 8007a74:	432e      	orrs	r6, r5
 8007a76:	f021 0104 	bic.w	r1, r1, #4
 8007a7a:	6021      	str	r1, [r4, #0]
 8007a7c:	d04b      	beq.n	8007b16 <_printf_i+0x1a6>
 8007a7e:	4616      	mov	r6, r2
 8007a80:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a84:	fb03 5711 	mls	r7, r3, r1, r5
 8007a88:	5dc7      	ldrb	r7, [r0, r7]
 8007a8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a8e:	462f      	mov	r7, r5
 8007a90:	42bb      	cmp	r3, r7
 8007a92:	460d      	mov	r5, r1
 8007a94:	d9f4      	bls.n	8007a80 <_printf_i+0x110>
 8007a96:	2b08      	cmp	r3, #8
 8007a98:	d10b      	bne.n	8007ab2 <_printf_i+0x142>
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	07df      	lsls	r7, r3, #31
 8007a9e:	d508      	bpl.n	8007ab2 <_printf_i+0x142>
 8007aa0:	6923      	ldr	r3, [r4, #16]
 8007aa2:	6861      	ldr	r1, [r4, #4]
 8007aa4:	4299      	cmp	r1, r3
 8007aa6:	bfde      	ittt	le
 8007aa8:	2330      	movle	r3, #48	@ 0x30
 8007aaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007aae:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007ab2:	1b92      	subs	r2, r2, r6
 8007ab4:	6122      	str	r2, [r4, #16]
 8007ab6:	f8cd a000 	str.w	sl, [sp]
 8007aba:	464b      	mov	r3, r9
 8007abc:	aa03      	add	r2, sp, #12
 8007abe:	4621      	mov	r1, r4
 8007ac0:	4640      	mov	r0, r8
 8007ac2:	f7ff fee7 	bl	8007894 <_printf_common>
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	d14a      	bne.n	8007b60 <_printf_i+0x1f0>
 8007aca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ace:	b004      	add	sp, #16
 8007ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	f043 0320 	orr.w	r3, r3, #32
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	4832      	ldr	r0, [pc, #200]	@ (8007ba8 <_printf_i+0x238>)
 8007ade:	2778      	movs	r7, #120	@ 0x78
 8007ae0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	6831      	ldr	r1, [r6, #0]
 8007ae8:	061f      	lsls	r7, r3, #24
 8007aea:	f851 5b04 	ldr.w	r5, [r1], #4
 8007aee:	d402      	bmi.n	8007af6 <_printf_i+0x186>
 8007af0:	065f      	lsls	r7, r3, #25
 8007af2:	bf48      	it	mi
 8007af4:	b2ad      	uxthmi	r5, r5
 8007af6:	6031      	str	r1, [r6, #0]
 8007af8:	07d9      	lsls	r1, r3, #31
 8007afa:	bf44      	itt	mi
 8007afc:	f043 0320 	orrmi.w	r3, r3, #32
 8007b00:	6023      	strmi	r3, [r4, #0]
 8007b02:	b11d      	cbz	r5, 8007b0c <_printf_i+0x19c>
 8007b04:	2310      	movs	r3, #16
 8007b06:	e7ad      	b.n	8007a64 <_printf_i+0xf4>
 8007b08:	4826      	ldr	r0, [pc, #152]	@ (8007ba4 <_printf_i+0x234>)
 8007b0a:	e7e9      	b.n	8007ae0 <_printf_i+0x170>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	f023 0320 	bic.w	r3, r3, #32
 8007b12:	6023      	str	r3, [r4, #0]
 8007b14:	e7f6      	b.n	8007b04 <_printf_i+0x194>
 8007b16:	4616      	mov	r6, r2
 8007b18:	e7bd      	b.n	8007a96 <_printf_i+0x126>
 8007b1a:	6833      	ldr	r3, [r6, #0]
 8007b1c:	6825      	ldr	r5, [r4, #0]
 8007b1e:	6961      	ldr	r1, [r4, #20]
 8007b20:	1d18      	adds	r0, r3, #4
 8007b22:	6030      	str	r0, [r6, #0]
 8007b24:	062e      	lsls	r6, r5, #24
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	d501      	bpl.n	8007b2e <_printf_i+0x1be>
 8007b2a:	6019      	str	r1, [r3, #0]
 8007b2c:	e002      	b.n	8007b34 <_printf_i+0x1c4>
 8007b2e:	0668      	lsls	r0, r5, #25
 8007b30:	d5fb      	bpl.n	8007b2a <_printf_i+0x1ba>
 8007b32:	8019      	strh	r1, [r3, #0]
 8007b34:	2300      	movs	r3, #0
 8007b36:	6123      	str	r3, [r4, #16]
 8007b38:	4616      	mov	r6, r2
 8007b3a:	e7bc      	b.n	8007ab6 <_printf_i+0x146>
 8007b3c:	6833      	ldr	r3, [r6, #0]
 8007b3e:	1d1a      	adds	r2, r3, #4
 8007b40:	6032      	str	r2, [r6, #0]
 8007b42:	681e      	ldr	r6, [r3, #0]
 8007b44:	6862      	ldr	r2, [r4, #4]
 8007b46:	2100      	movs	r1, #0
 8007b48:	4630      	mov	r0, r6
 8007b4a:	f7f8 fb69 	bl	8000220 <memchr>
 8007b4e:	b108      	cbz	r0, 8007b54 <_printf_i+0x1e4>
 8007b50:	1b80      	subs	r0, r0, r6
 8007b52:	6060      	str	r0, [r4, #4]
 8007b54:	6863      	ldr	r3, [r4, #4]
 8007b56:	6123      	str	r3, [r4, #16]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b5e:	e7aa      	b.n	8007ab6 <_printf_i+0x146>
 8007b60:	6923      	ldr	r3, [r4, #16]
 8007b62:	4632      	mov	r2, r6
 8007b64:	4649      	mov	r1, r9
 8007b66:	4640      	mov	r0, r8
 8007b68:	47d0      	blx	sl
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d0ad      	beq.n	8007aca <_printf_i+0x15a>
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	079b      	lsls	r3, r3, #30
 8007b72:	d413      	bmi.n	8007b9c <_printf_i+0x22c>
 8007b74:	68e0      	ldr	r0, [r4, #12]
 8007b76:	9b03      	ldr	r3, [sp, #12]
 8007b78:	4298      	cmp	r0, r3
 8007b7a:	bfb8      	it	lt
 8007b7c:	4618      	movlt	r0, r3
 8007b7e:	e7a6      	b.n	8007ace <_printf_i+0x15e>
 8007b80:	2301      	movs	r3, #1
 8007b82:	4632      	mov	r2, r6
 8007b84:	4649      	mov	r1, r9
 8007b86:	4640      	mov	r0, r8
 8007b88:	47d0      	blx	sl
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	d09d      	beq.n	8007aca <_printf_i+0x15a>
 8007b8e:	3501      	adds	r5, #1
 8007b90:	68e3      	ldr	r3, [r4, #12]
 8007b92:	9903      	ldr	r1, [sp, #12]
 8007b94:	1a5b      	subs	r3, r3, r1
 8007b96:	42ab      	cmp	r3, r5
 8007b98:	dcf2      	bgt.n	8007b80 <_printf_i+0x210>
 8007b9a:	e7eb      	b.n	8007b74 <_printf_i+0x204>
 8007b9c:	2500      	movs	r5, #0
 8007b9e:	f104 0619 	add.w	r6, r4, #25
 8007ba2:	e7f5      	b.n	8007b90 <_printf_i+0x220>
 8007ba4:	08009d7e 	.word	0x08009d7e
 8007ba8:	08009d8f 	.word	0x08009d8f

08007bac <std>:
 8007bac:	2300      	movs	r3, #0
 8007bae:	b510      	push	{r4, lr}
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8007bb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bba:	6083      	str	r3, [r0, #8]
 8007bbc:	8181      	strh	r1, [r0, #12]
 8007bbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8007bc0:	81c2      	strh	r2, [r0, #14]
 8007bc2:	6183      	str	r3, [r0, #24]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	2208      	movs	r2, #8
 8007bc8:	305c      	adds	r0, #92	@ 0x5c
 8007bca:	f000 f921 	bl	8007e10 <memset>
 8007bce:	4b0d      	ldr	r3, [pc, #52]	@ (8007c04 <std+0x58>)
 8007bd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007c08 <std+0x5c>)
 8007bd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c0c <std+0x60>)
 8007bd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007bda:	4b0d      	ldr	r3, [pc, #52]	@ (8007c10 <std+0x64>)
 8007bdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8007bde:	4b0d      	ldr	r3, [pc, #52]	@ (8007c14 <std+0x68>)
 8007be0:	6224      	str	r4, [r4, #32]
 8007be2:	429c      	cmp	r4, r3
 8007be4:	d006      	beq.n	8007bf4 <std+0x48>
 8007be6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007bea:	4294      	cmp	r4, r2
 8007bec:	d002      	beq.n	8007bf4 <std+0x48>
 8007bee:	33d0      	adds	r3, #208	@ 0xd0
 8007bf0:	429c      	cmp	r4, r3
 8007bf2:	d105      	bne.n	8007c00 <std+0x54>
 8007bf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bfc:	f000 b93a 	b.w	8007e74 <__retarget_lock_init_recursive>
 8007c00:	bd10      	pop	{r4, pc}
 8007c02:	bf00      	nop
 8007c04:	08009775 	.word	0x08009775
 8007c08:	08009797 	.word	0x08009797
 8007c0c:	080097cf 	.word	0x080097cf
 8007c10:	080097f3 	.word	0x080097f3
 8007c14:	200003f0 	.word	0x200003f0

08007c18 <stdio_exit_handler>:
 8007c18:	4a02      	ldr	r2, [pc, #8]	@ (8007c24 <stdio_exit_handler+0xc>)
 8007c1a:	4903      	ldr	r1, [pc, #12]	@ (8007c28 <stdio_exit_handler+0x10>)
 8007c1c:	4803      	ldr	r0, [pc, #12]	@ (8007c2c <stdio_exit_handler+0x14>)
 8007c1e:	f000 b869 	b.w	8007cf4 <_fwalk_sglue>
 8007c22:	bf00      	nop
 8007c24:	2000000c 	.word	0x2000000c
 8007c28:	08009019 	.word	0x08009019
 8007c2c:	2000001c 	.word	0x2000001c

08007c30 <cleanup_stdio>:
 8007c30:	6841      	ldr	r1, [r0, #4]
 8007c32:	4b0c      	ldr	r3, [pc, #48]	@ (8007c64 <cleanup_stdio+0x34>)
 8007c34:	4299      	cmp	r1, r3
 8007c36:	b510      	push	{r4, lr}
 8007c38:	4604      	mov	r4, r0
 8007c3a:	d001      	beq.n	8007c40 <cleanup_stdio+0x10>
 8007c3c:	f001 f9ec 	bl	8009018 <_fflush_r>
 8007c40:	68a1      	ldr	r1, [r4, #8]
 8007c42:	4b09      	ldr	r3, [pc, #36]	@ (8007c68 <cleanup_stdio+0x38>)
 8007c44:	4299      	cmp	r1, r3
 8007c46:	d002      	beq.n	8007c4e <cleanup_stdio+0x1e>
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f001 f9e5 	bl	8009018 <_fflush_r>
 8007c4e:	68e1      	ldr	r1, [r4, #12]
 8007c50:	4b06      	ldr	r3, [pc, #24]	@ (8007c6c <cleanup_stdio+0x3c>)
 8007c52:	4299      	cmp	r1, r3
 8007c54:	d004      	beq.n	8007c60 <cleanup_stdio+0x30>
 8007c56:	4620      	mov	r0, r4
 8007c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c5c:	f001 b9dc 	b.w	8009018 <_fflush_r>
 8007c60:	bd10      	pop	{r4, pc}
 8007c62:	bf00      	nop
 8007c64:	200003f0 	.word	0x200003f0
 8007c68:	20000458 	.word	0x20000458
 8007c6c:	200004c0 	.word	0x200004c0

08007c70 <global_stdio_init.part.0>:
 8007c70:	b510      	push	{r4, lr}
 8007c72:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca0 <global_stdio_init.part.0+0x30>)
 8007c74:	4c0b      	ldr	r4, [pc, #44]	@ (8007ca4 <global_stdio_init.part.0+0x34>)
 8007c76:	4a0c      	ldr	r2, [pc, #48]	@ (8007ca8 <global_stdio_init.part.0+0x38>)
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	2104      	movs	r1, #4
 8007c80:	f7ff ff94 	bl	8007bac <std>
 8007c84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c88:	2201      	movs	r2, #1
 8007c8a:	2109      	movs	r1, #9
 8007c8c:	f7ff ff8e 	bl	8007bac <std>
 8007c90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c94:	2202      	movs	r2, #2
 8007c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c9a:	2112      	movs	r1, #18
 8007c9c:	f7ff bf86 	b.w	8007bac <std>
 8007ca0:	20000528 	.word	0x20000528
 8007ca4:	200003f0 	.word	0x200003f0
 8007ca8:	08007c19 	.word	0x08007c19

08007cac <__sfp_lock_acquire>:
 8007cac:	4801      	ldr	r0, [pc, #4]	@ (8007cb4 <__sfp_lock_acquire+0x8>)
 8007cae:	f000 b8e2 	b.w	8007e76 <__retarget_lock_acquire_recursive>
 8007cb2:	bf00      	nop
 8007cb4:	2000052d 	.word	0x2000052d

08007cb8 <__sfp_lock_release>:
 8007cb8:	4801      	ldr	r0, [pc, #4]	@ (8007cc0 <__sfp_lock_release+0x8>)
 8007cba:	f000 b8dd 	b.w	8007e78 <__retarget_lock_release_recursive>
 8007cbe:	bf00      	nop
 8007cc0:	2000052d 	.word	0x2000052d

08007cc4 <__sinit>:
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	f7ff fff0 	bl	8007cac <__sfp_lock_acquire>
 8007ccc:	6a23      	ldr	r3, [r4, #32]
 8007cce:	b11b      	cbz	r3, 8007cd8 <__sinit+0x14>
 8007cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cd4:	f7ff bff0 	b.w	8007cb8 <__sfp_lock_release>
 8007cd8:	4b04      	ldr	r3, [pc, #16]	@ (8007cec <__sinit+0x28>)
 8007cda:	6223      	str	r3, [r4, #32]
 8007cdc:	4b04      	ldr	r3, [pc, #16]	@ (8007cf0 <__sinit+0x2c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1f5      	bne.n	8007cd0 <__sinit+0xc>
 8007ce4:	f7ff ffc4 	bl	8007c70 <global_stdio_init.part.0>
 8007ce8:	e7f2      	b.n	8007cd0 <__sinit+0xc>
 8007cea:	bf00      	nop
 8007cec:	08007c31 	.word	0x08007c31
 8007cf0:	20000528 	.word	0x20000528

08007cf4 <_fwalk_sglue>:
 8007cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf8:	4607      	mov	r7, r0
 8007cfa:	4688      	mov	r8, r1
 8007cfc:	4614      	mov	r4, r2
 8007cfe:	2600      	movs	r6, #0
 8007d00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d04:	f1b9 0901 	subs.w	r9, r9, #1
 8007d08:	d505      	bpl.n	8007d16 <_fwalk_sglue+0x22>
 8007d0a:	6824      	ldr	r4, [r4, #0]
 8007d0c:	2c00      	cmp	r4, #0
 8007d0e:	d1f7      	bne.n	8007d00 <_fwalk_sglue+0xc>
 8007d10:	4630      	mov	r0, r6
 8007d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d16:	89ab      	ldrh	r3, [r5, #12]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d907      	bls.n	8007d2c <_fwalk_sglue+0x38>
 8007d1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d20:	3301      	adds	r3, #1
 8007d22:	d003      	beq.n	8007d2c <_fwalk_sglue+0x38>
 8007d24:	4629      	mov	r1, r5
 8007d26:	4638      	mov	r0, r7
 8007d28:	47c0      	blx	r8
 8007d2a:	4306      	orrs	r6, r0
 8007d2c:	3568      	adds	r5, #104	@ 0x68
 8007d2e:	e7e9      	b.n	8007d04 <_fwalk_sglue+0x10>

08007d30 <iprintf>:
 8007d30:	b40f      	push	{r0, r1, r2, r3}
 8007d32:	b507      	push	{r0, r1, r2, lr}
 8007d34:	4906      	ldr	r1, [pc, #24]	@ (8007d50 <iprintf+0x20>)
 8007d36:	ab04      	add	r3, sp, #16
 8007d38:	6808      	ldr	r0, [r1, #0]
 8007d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d3e:	6881      	ldr	r1, [r0, #8]
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	f000 ff23 	bl	8008b8c <_vfiprintf_r>
 8007d46:	b003      	add	sp, #12
 8007d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d4c:	b004      	add	sp, #16
 8007d4e:	4770      	bx	lr
 8007d50:	20000018 	.word	0x20000018

08007d54 <_puts_r>:
 8007d54:	6a03      	ldr	r3, [r0, #32]
 8007d56:	b570      	push	{r4, r5, r6, lr}
 8007d58:	6884      	ldr	r4, [r0, #8]
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	460e      	mov	r6, r1
 8007d5e:	b90b      	cbnz	r3, 8007d64 <_puts_r+0x10>
 8007d60:	f7ff ffb0 	bl	8007cc4 <__sinit>
 8007d64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d66:	07db      	lsls	r3, r3, #31
 8007d68:	d405      	bmi.n	8007d76 <_puts_r+0x22>
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	0598      	lsls	r0, r3, #22
 8007d6e:	d402      	bmi.n	8007d76 <_puts_r+0x22>
 8007d70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d72:	f000 f880 	bl	8007e76 <__retarget_lock_acquire_recursive>
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	0719      	lsls	r1, r3, #28
 8007d7a:	d502      	bpl.n	8007d82 <_puts_r+0x2e>
 8007d7c:	6923      	ldr	r3, [r4, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d135      	bne.n	8007dee <_puts_r+0x9a>
 8007d82:	4621      	mov	r1, r4
 8007d84:	4628      	mov	r0, r5
 8007d86:	f001 fd77 	bl	8009878 <__swsetup_r>
 8007d8a:	b380      	cbz	r0, 8007dee <_puts_r+0x9a>
 8007d8c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007d90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d92:	07da      	lsls	r2, r3, #31
 8007d94:	d405      	bmi.n	8007da2 <_puts_r+0x4e>
 8007d96:	89a3      	ldrh	r3, [r4, #12]
 8007d98:	059b      	lsls	r3, r3, #22
 8007d9a:	d402      	bmi.n	8007da2 <_puts_r+0x4e>
 8007d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d9e:	f000 f86b 	bl	8007e78 <__retarget_lock_release_recursive>
 8007da2:	4628      	mov	r0, r5
 8007da4:	bd70      	pop	{r4, r5, r6, pc}
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	da04      	bge.n	8007db4 <_puts_r+0x60>
 8007daa:	69a2      	ldr	r2, [r4, #24]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	dc17      	bgt.n	8007de0 <_puts_r+0x8c>
 8007db0:	290a      	cmp	r1, #10
 8007db2:	d015      	beq.n	8007de0 <_puts_r+0x8c>
 8007db4:	6823      	ldr	r3, [r4, #0]
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	6022      	str	r2, [r4, #0]
 8007dba:	7019      	strb	r1, [r3, #0]
 8007dbc:	68a3      	ldr	r3, [r4, #8]
 8007dbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	60a3      	str	r3, [r4, #8]
 8007dc6:	2900      	cmp	r1, #0
 8007dc8:	d1ed      	bne.n	8007da6 <_puts_r+0x52>
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	da11      	bge.n	8007df2 <_puts_r+0x9e>
 8007dce:	4622      	mov	r2, r4
 8007dd0:	210a      	movs	r1, #10
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f001 fd11 	bl	80097fa <__swbuf_r>
 8007dd8:	3001      	adds	r0, #1
 8007dda:	d0d7      	beq.n	8007d8c <_puts_r+0x38>
 8007ddc:	250a      	movs	r5, #10
 8007dde:	e7d7      	b.n	8007d90 <_puts_r+0x3c>
 8007de0:	4622      	mov	r2, r4
 8007de2:	4628      	mov	r0, r5
 8007de4:	f001 fd09 	bl	80097fa <__swbuf_r>
 8007de8:	3001      	adds	r0, #1
 8007dea:	d1e7      	bne.n	8007dbc <_puts_r+0x68>
 8007dec:	e7ce      	b.n	8007d8c <_puts_r+0x38>
 8007dee:	3e01      	subs	r6, #1
 8007df0:	e7e4      	b.n	8007dbc <_puts_r+0x68>
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	6022      	str	r2, [r4, #0]
 8007df8:	220a      	movs	r2, #10
 8007dfa:	701a      	strb	r2, [r3, #0]
 8007dfc:	e7ee      	b.n	8007ddc <_puts_r+0x88>
	...

08007e00 <puts>:
 8007e00:	4b02      	ldr	r3, [pc, #8]	@ (8007e0c <puts+0xc>)
 8007e02:	4601      	mov	r1, r0
 8007e04:	6818      	ldr	r0, [r3, #0]
 8007e06:	f7ff bfa5 	b.w	8007d54 <_puts_r>
 8007e0a:	bf00      	nop
 8007e0c:	20000018 	.word	0x20000018

08007e10 <memset>:
 8007e10:	4402      	add	r2, r0
 8007e12:	4603      	mov	r3, r0
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d100      	bne.n	8007e1a <memset+0xa>
 8007e18:	4770      	bx	lr
 8007e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e1e:	e7f9      	b.n	8007e14 <memset+0x4>

08007e20 <__errno>:
 8007e20:	4b01      	ldr	r3, [pc, #4]	@ (8007e28 <__errno+0x8>)
 8007e22:	6818      	ldr	r0, [r3, #0]
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	20000018 	.word	0x20000018

08007e2c <__libc_init_array>:
 8007e2c:	b570      	push	{r4, r5, r6, lr}
 8007e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8007e64 <__libc_init_array+0x38>)
 8007e30:	4c0d      	ldr	r4, [pc, #52]	@ (8007e68 <__libc_init_array+0x3c>)
 8007e32:	1b64      	subs	r4, r4, r5
 8007e34:	10a4      	asrs	r4, r4, #2
 8007e36:	2600      	movs	r6, #0
 8007e38:	42a6      	cmp	r6, r4
 8007e3a:	d109      	bne.n	8007e50 <__libc_init_array+0x24>
 8007e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8007e6c <__libc_init_array+0x40>)
 8007e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8007e70 <__libc_init_array+0x44>)
 8007e40:	f001 ff50 	bl	8009ce4 <_init>
 8007e44:	1b64      	subs	r4, r4, r5
 8007e46:	10a4      	asrs	r4, r4, #2
 8007e48:	2600      	movs	r6, #0
 8007e4a:	42a6      	cmp	r6, r4
 8007e4c:	d105      	bne.n	8007e5a <__libc_init_array+0x2e>
 8007e4e:	bd70      	pop	{r4, r5, r6, pc}
 8007e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e54:	4798      	blx	r3
 8007e56:	3601      	adds	r6, #1
 8007e58:	e7ee      	b.n	8007e38 <__libc_init_array+0xc>
 8007e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e5e:	4798      	blx	r3
 8007e60:	3601      	adds	r6, #1
 8007e62:	e7f2      	b.n	8007e4a <__libc_init_array+0x1e>
 8007e64:	0800a0ec 	.word	0x0800a0ec
 8007e68:	0800a0ec 	.word	0x0800a0ec
 8007e6c:	0800a0ec 	.word	0x0800a0ec
 8007e70:	0800a0f0 	.word	0x0800a0f0

08007e74 <__retarget_lock_init_recursive>:
 8007e74:	4770      	bx	lr

08007e76 <__retarget_lock_acquire_recursive>:
 8007e76:	4770      	bx	lr

08007e78 <__retarget_lock_release_recursive>:
 8007e78:	4770      	bx	lr
	...

08007e7c <_localeconv_r>:
 8007e7c:	4800      	ldr	r0, [pc, #0]	@ (8007e80 <_localeconv_r+0x4>)
 8007e7e:	4770      	bx	lr
 8007e80:	20000158 	.word	0x20000158

08007e84 <quorem>:
 8007e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e88:	6903      	ldr	r3, [r0, #16]
 8007e8a:	690c      	ldr	r4, [r1, #16]
 8007e8c:	42a3      	cmp	r3, r4
 8007e8e:	4607      	mov	r7, r0
 8007e90:	db7e      	blt.n	8007f90 <quorem+0x10c>
 8007e92:	3c01      	subs	r4, #1
 8007e94:	f101 0814 	add.w	r8, r1, #20
 8007e98:	00a3      	lsls	r3, r4, #2
 8007e9a:	f100 0514 	add.w	r5, r0, #20
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ea4:	9301      	str	r3, [sp, #4]
 8007ea6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007eaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007eb6:	fbb2 f6f3 	udiv	r6, r2, r3
 8007eba:	d32e      	bcc.n	8007f1a <quorem+0x96>
 8007ebc:	f04f 0a00 	mov.w	sl, #0
 8007ec0:	46c4      	mov	ip, r8
 8007ec2:	46ae      	mov	lr, r5
 8007ec4:	46d3      	mov	fp, sl
 8007ec6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007eca:	b298      	uxth	r0, r3
 8007ecc:	fb06 a000 	mla	r0, r6, r0, sl
 8007ed0:	0c02      	lsrs	r2, r0, #16
 8007ed2:	0c1b      	lsrs	r3, r3, #16
 8007ed4:	fb06 2303 	mla	r3, r6, r3, r2
 8007ed8:	f8de 2000 	ldr.w	r2, [lr]
 8007edc:	b280      	uxth	r0, r0
 8007ede:	b292      	uxth	r2, r2
 8007ee0:	1a12      	subs	r2, r2, r0
 8007ee2:	445a      	add	r2, fp
 8007ee4:	f8de 0000 	ldr.w	r0, [lr]
 8007ee8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007ef2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007ef6:	b292      	uxth	r2, r2
 8007ef8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007efc:	45e1      	cmp	r9, ip
 8007efe:	f84e 2b04 	str.w	r2, [lr], #4
 8007f02:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007f06:	d2de      	bcs.n	8007ec6 <quorem+0x42>
 8007f08:	9b00      	ldr	r3, [sp, #0]
 8007f0a:	58eb      	ldr	r3, [r5, r3]
 8007f0c:	b92b      	cbnz	r3, 8007f1a <quorem+0x96>
 8007f0e:	9b01      	ldr	r3, [sp, #4]
 8007f10:	3b04      	subs	r3, #4
 8007f12:	429d      	cmp	r5, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	d32f      	bcc.n	8007f78 <quorem+0xf4>
 8007f18:	613c      	str	r4, [r7, #16]
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	f001 fb22 	bl	8009564 <__mcmp>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	db25      	blt.n	8007f70 <quorem+0xec>
 8007f24:	4629      	mov	r1, r5
 8007f26:	2000      	movs	r0, #0
 8007f28:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f2c:	f8d1 c000 	ldr.w	ip, [r1]
 8007f30:	fa1f fe82 	uxth.w	lr, r2
 8007f34:	fa1f f38c 	uxth.w	r3, ip
 8007f38:	eba3 030e 	sub.w	r3, r3, lr
 8007f3c:	4403      	add	r3, r0
 8007f3e:	0c12      	lsrs	r2, r2, #16
 8007f40:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007f44:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f4e:	45c1      	cmp	r9, r8
 8007f50:	f841 3b04 	str.w	r3, [r1], #4
 8007f54:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007f58:	d2e6      	bcs.n	8007f28 <quorem+0xa4>
 8007f5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f62:	b922      	cbnz	r2, 8007f6e <quorem+0xea>
 8007f64:	3b04      	subs	r3, #4
 8007f66:	429d      	cmp	r5, r3
 8007f68:	461a      	mov	r2, r3
 8007f6a:	d30b      	bcc.n	8007f84 <quorem+0x100>
 8007f6c:	613c      	str	r4, [r7, #16]
 8007f6e:	3601      	adds	r6, #1
 8007f70:	4630      	mov	r0, r6
 8007f72:	b003      	add	sp, #12
 8007f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f78:	6812      	ldr	r2, [r2, #0]
 8007f7a:	3b04      	subs	r3, #4
 8007f7c:	2a00      	cmp	r2, #0
 8007f7e:	d1cb      	bne.n	8007f18 <quorem+0x94>
 8007f80:	3c01      	subs	r4, #1
 8007f82:	e7c6      	b.n	8007f12 <quorem+0x8e>
 8007f84:	6812      	ldr	r2, [r2, #0]
 8007f86:	3b04      	subs	r3, #4
 8007f88:	2a00      	cmp	r2, #0
 8007f8a:	d1ef      	bne.n	8007f6c <quorem+0xe8>
 8007f8c:	3c01      	subs	r4, #1
 8007f8e:	e7ea      	b.n	8007f66 <quorem+0xe2>
 8007f90:	2000      	movs	r0, #0
 8007f92:	e7ee      	b.n	8007f72 <quorem+0xee>
 8007f94:	0000      	movs	r0, r0
	...

08007f98 <_dtoa_r>:
 8007f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	69c7      	ldr	r7, [r0, #28]
 8007f9e:	b097      	sub	sp, #92	@ 0x5c
 8007fa0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007fa4:	ec55 4b10 	vmov	r4, r5, d0
 8007fa8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007faa:	9107      	str	r1, [sp, #28]
 8007fac:	4681      	mov	r9, r0
 8007fae:	920c      	str	r2, [sp, #48]	@ 0x30
 8007fb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8007fb2:	b97f      	cbnz	r7, 8007fd4 <_dtoa_r+0x3c>
 8007fb4:	2010      	movs	r0, #16
 8007fb6:	f000 ff01 	bl	8008dbc <malloc>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	f8c9 001c 	str.w	r0, [r9, #28]
 8007fc0:	b920      	cbnz	r0, 8007fcc <_dtoa_r+0x34>
 8007fc2:	4ba9      	ldr	r3, [pc, #676]	@ (8008268 <_dtoa_r+0x2d0>)
 8007fc4:	21ef      	movs	r1, #239	@ 0xef
 8007fc6:	48a9      	ldr	r0, [pc, #676]	@ (800826c <_dtoa_r+0x2d4>)
 8007fc8:	f001 fd94 	bl	8009af4 <__assert_func>
 8007fcc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007fd0:	6007      	str	r7, [r0, #0]
 8007fd2:	60c7      	str	r7, [r0, #12]
 8007fd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007fd8:	6819      	ldr	r1, [r3, #0]
 8007fda:	b159      	cbz	r1, 8007ff4 <_dtoa_r+0x5c>
 8007fdc:	685a      	ldr	r2, [r3, #4]
 8007fde:	604a      	str	r2, [r1, #4]
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	4093      	lsls	r3, r2
 8007fe4:	608b      	str	r3, [r1, #8]
 8007fe6:	4648      	mov	r0, r9
 8007fe8:	f001 f88a 	bl	8009100 <_Bfree>
 8007fec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	1e2b      	subs	r3, r5, #0
 8007ff6:	bfb9      	ittee	lt
 8007ff8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007ffc:	9305      	strlt	r3, [sp, #20]
 8007ffe:	2300      	movge	r3, #0
 8008000:	6033      	strge	r3, [r6, #0]
 8008002:	9f05      	ldr	r7, [sp, #20]
 8008004:	4b9a      	ldr	r3, [pc, #616]	@ (8008270 <_dtoa_r+0x2d8>)
 8008006:	bfbc      	itt	lt
 8008008:	2201      	movlt	r2, #1
 800800a:	6032      	strlt	r2, [r6, #0]
 800800c:	43bb      	bics	r3, r7
 800800e:	d112      	bne.n	8008036 <_dtoa_r+0x9e>
 8008010:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008012:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008016:	6013      	str	r3, [r2, #0]
 8008018:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800801c:	4323      	orrs	r3, r4
 800801e:	f000 855a 	beq.w	8008ad6 <_dtoa_r+0xb3e>
 8008022:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008024:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008284 <_dtoa_r+0x2ec>
 8008028:	2b00      	cmp	r3, #0
 800802a:	f000 855c 	beq.w	8008ae6 <_dtoa_r+0xb4e>
 800802e:	f10a 0303 	add.w	r3, sl, #3
 8008032:	f000 bd56 	b.w	8008ae2 <_dtoa_r+0xb4a>
 8008036:	ed9d 7b04 	vldr	d7, [sp, #16]
 800803a:	2200      	movs	r2, #0
 800803c:	ec51 0b17 	vmov	r0, r1, d7
 8008040:	2300      	movs	r3, #0
 8008042:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008046:	f7f8 fd67 	bl	8000b18 <__aeabi_dcmpeq>
 800804a:	4680      	mov	r8, r0
 800804c:	b158      	cbz	r0, 8008066 <_dtoa_r+0xce>
 800804e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008050:	2301      	movs	r3, #1
 8008052:	6013      	str	r3, [r2, #0]
 8008054:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008056:	b113      	cbz	r3, 800805e <_dtoa_r+0xc6>
 8008058:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800805a:	4b86      	ldr	r3, [pc, #536]	@ (8008274 <_dtoa_r+0x2dc>)
 800805c:	6013      	str	r3, [r2, #0]
 800805e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008288 <_dtoa_r+0x2f0>
 8008062:	f000 bd40 	b.w	8008ae6 <_dtoa_r+0xb4e>
 8008066:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800806a:	aa14      	add	r2, sp, #80	@ 0x50
 800806c:	a915      	add	r1, sp, #84	@ 0x54
 800806e:	4648      	mov	r0, r9
 8008070:	f001 fb28 	bl	80096c4 <__d2b>
 8008074:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008078:	9002      	str	r0, [sp, #8]
 800807a:	2e00      	cmp	r6, #0
 800807c:	d078      	beq.n	8008170 <_dtoa_r+0x1d8>
 800807e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008080:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008088:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800808c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008090:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008094:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008098:	4619      	mov	r1, r3
 800809a:	2200      	movs	r2, #0
 800809c:	4b76      	ldr	r3, [pc, #472]	@ (8008278 <_dtoa_r+0x2e0>)
 800809e:	f7f8 f91b 	bl	80002d8 <__aeabi_dsub>
 80080a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8008250 <_dtoa_r+0x2b8>)
 80080a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a8:	f7f8 face 	bl	8000648 <__aeabi_dmul>
 80080ac:	a36a      	add	r3, pc, #424	@ (adr r3, 8008258 <_dtoa_r+0x2c0>)
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f7f8 f913 	bl	80002dc <__adddf3>
 80080b6:	4604      	mov	r4, r0
 80080b8:	4630      	mov	r0, r6
 80080ba:	460d      	mov	r5, r1
 80080bc:	f7f8 fa5a 	bl	8000574 <__aeabi_i2d>
 80080c0:	a367      	add	r3, pc, #412	@ (adr r3, 8008260 <_dtoa_r+0x2c8>)
 80080c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c6:	f7f8 fabf 	bl	8000648 <__aeabi_dmul>
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	4620      	mov	r0, r4
 80080d0:	4629      	mov	r1, r5
 80080d2:	f7f8 f903 	bl	80002dc <__adddf3>
 80080d6:	4604      	mov	r4, r0
 80080d8:	460d      	mov	r5, r1
 80080da:	f7f8 fd65 	bl	8000ba8 <__aeabi_d2iz>
 80080de:	2200      	movs	r2, #0
 80080e0:	4607      	mov	r7, r0
 80080e2:	2300      	movs	r3, #0
 80080e4:	4620      	mov	r0, r4
 80080e6:	4629      	mov	r1, r5
 80080e8:	f7f8 fd20 	bl	8000b2c <__aeabi_dcmplt>
 80080ec:	b140      	cbz	r0, 8008100 <_dtoa_r+0x168>
 80080ee:	4638      	mov	r0, r7
 80080f0:	f7f8 fa40 	bl	8000574 <__aeabi_i2d>
 80080f4:	4622      	mov	r2, r4
 80080f6:	462b      	mov	r3, r5
 80080f8:	f7f8 fd0e 	bl	8000b18 <__aeabi_dcmpeq>
 80080fc:	b900      	cbnz	r0, 8008100 <_dtoa_r+0x168>
 80080fe:	3f01      	subs	r7, #1
 8008100:	2f16      	cmp	r7, #22
 8008102:	d852      	bhi.n	80081aa <_dtoa_r+0x212>
 8008104:	4b5d      	ldr	r3, [pc, #372]	@ (800827c <_dtoa_r+0x2e4>)
 8008106:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008112:	f7f8 fd0b 	bl	8000b2c <__aeabi_dcmplt>
 8008116:	2800      	cmp	r0, #0
 8008118:	d049      	beq.n	80081ae <_dtoa_r+0x216>
 800811a:	3f01      	subs	r7, #1
 800811c:	2300      	movs	r3, #0
 800811e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008120:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008122:	1b9b      	subs	r3, r3, r6
 8008124:	1e5a      	subs	r2, r3, #1
 8008126:	bf45      	ittet	mi
 8008128:	f1c3 0301 	rsbmi	r3, r3, #1
 800812c:	9300      	strmi	r3, [sp, #0]
 800812e:	2300      	movpl	r3, #0
 8008130:	2300      	movmi	r3, #0
 8008132:	9206      	str	r2, [sp, #24]
 8008134:	bf54      	ite	pl
 8008136:	9300      	strpl	r3, [sp, #0]
 8008138:	9306      	strmi	r3, [sp, #24]
 800813a:	2f00      	cmp	r7, #0
 800813c:	db39      	blt.n	80081b2 <_dtoa_r+0x21a>
 800813e:	9b06      	ldr	r3, [sp, #24]
 8008140:	970d      	str	r7, [sp, #52]	@ 0x34
 8008142:	443b      	add	r3, r7
 8008144:	9306      	str	r3, [sp, #24]
 8008146:	2300      	movs	r3, #0
 8008148:	9308      	str	r3, [sp, #32]
 800814a:	9b07      	ldr	r3, [sp, #28]
 800814c:	2b09      	cmp	r3, #9
 800814e:	d863      	bhi.n	8008218 <_dtoa_r+0x280>
 8008150:	2b05      	cmp	r3, #5
 8008152:	bfc4      	itt	gt
 8008154:	3b04      	subgt	r3, #4
 8008156:	9307      	strgt	r3, [sp, #28]
 8008158:	9b07      	ldr	r3, [sp, #28]
 800815a:	f1a3 0302 	sub.w	r3, r3, #2
 800815e:	bfcc      	ite	gt
 8008160:	2400      	movgt	r4, #0
 8008162:	2401      	movle	r4, #1
 8008164:	2b03      	cmp	r3, #3
 8008166:	d863      	bhi.n	8008230 <_dtoa_r+0x298>
 8008168:	e8df f003 	tbb	[pc, r3]
 800816c:	2b375452 	.word	0x2b375452
 8008170:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008174:	441e      	add	r6, r3
 8008176:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800817a:	2b20      	cmp	r3, #32
 800817c:	bfc1      	itttt	gt
 800817e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008182:	409f      	lslgt	r7, r3
 8008184:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008188:	fa24 f303 	lsrgt.w	r3, r4, r3
 800818c:	bfd6      	itet	le
 800818e:	f1c3 0320 	rsble	r3, r3, #32
 8008192:	ea47 0003 	orrgt.w	r0, r7, r3
 8008196:	fa04 f003 	lslle.w	r0, r4, r3
 800819a:	f7f8 f9db 	bl	8000554 <__aeabi_ui2d>
 800819e:	2201      	movs	r2, #1
 80081a0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80081a4:	3e01      	subs	r6, #1
 80081a6:	9212      	str	r2, [sp, #72]	@ 0x48
 80081a8:	e776      	b.n	8008098 <_dtoa_r+0x100>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e7b7      	b.n	800811e <_dtoa_r+0x186>
 80081ae:	9010      	str	r0, [sp, #64]	@ 0x40
 80081b0:	e7b6      	b.n	8008120 <_dtoa_r+0x188>
 80081b2:	9b00      	ldr	r3, [sp, #0]
 80081b4:	1bdb      	subs	r3, r3, r7
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	427b      	negs	r3, r7
 80081ba:	9308      	str	r3, [sp, #32]
 80081bc:	2300      	movs	r3, #0
 80081be:	930d      	str	r3, [sp, #52]	@ 0x34
 80081c0:	e7c3      	b.n	800814a <_dtoa_r+0x1b2>
 80081c2:	2301      	movs	r3, #1
 80081c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081c8:	eb07 0b03 	add.w	fp, r7, r3
 80081cc:	f10b 0301 	add.w	r3, fp, #1
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	9303      	str	r3, [sp, #12]
 80081d4:	bfb8      	it	lt
 80081d6:	2301      	movlt	r3, #1
 80081d8:	e006      	b.n	80081e8 <_dtoa_r+0x250>
 80081da:	2301      	movs	r3, #1
 80081dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80081de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	dd28      	ble.n	8008236 <_dtoa_r+0x29e>
 80081e4:	469b      	mov	fp, r3
 80081e6:	9303      	str	r3, [sp, #12]
 80081e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80081ec:	2100      	movs	r1, #0
 80081ee:	2204      	movs	r2, #4
 80081f0:	f102 0514 	add.w	r5, r2, #20
 80081f4:	429d      	cmp	r5, r3
 80081f6:	d926      	bls.n	8008246 <_dtoa_r+0x2ae>
 80081f8:	6041      	str	r1, [r0, #4]
 80081fa:	4648      	mov	r0, r9
 80081fc:	f000 ff40 	bl	8009080 <_Balloc>
 8008200:	4682      	mov	sl, r0
 8008202:	2800      	cmp	r0, #0
 8008204:	d142      	bne.n	800828c <_dtoa_r+0x2f4>
 8008206:	4b1e      	ldr	r3, [pc, #120]	@ (8008280 <_dtoa_r+0x2e8>)
 8008208:	4602      	mov	r2, r0
 800820a:	f240 11af 	movw	r1, #431	@ 0x1af
 800820e:	e6da      	b.n	8007fc6 <_dtoa_r+0x2e>
 8008210:	2300      	movs	r3, #0
 8008212:	e7e3      	b.n	80081dc <_dtoa_r+0x244>
 8008214:	2300      	movs	r3, #0
 8008216:	e7d5      	b.n	80081c4 <_dtoa_r+0x22c>
 8008218:	2401      	movs	r4, #1
 800821a:	2300      	movs	r3, #0
 800821c:	9307      	str	r3, [sp, #28]
 800821e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008220:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8008224:	2200      	movs	r2, #0
 8008226:	f8cd b00c 	str.w	fp, [sp, #12]
 800822a:	2312      	movs	r3, #18
 800822c:	920c      	str	r2, [sp, #48]	@ 0x30
 800822e:	e7db      	b.n	80081e8 <_dtoa_r+0x250>
 8008230:	2301      	movs	r3, #1
 8008232:	9309      	str	r3, [sp, #36]	@ 0x24
 8008234:	e7f4      	b.n	8008220 <_dtoa_r+0x288>
 8008236:	f04f 0b01 	mov.w	fp, #1
 800823a:	f8cd b00c 	str.w	fp, [sp, #12]
 800823e:	465b      	mov	r3, fp
 8008240:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008244:	e7d0      	b.n	80081e8 <_dtoa_r+0x250>
 8008246:	3101      	adds	r1, #1
 8008248:	0052      	lsls	r2, r2, #1
 800824a:	e7d1      	b.n	80081f0 <_dtoa_r+0x258>
 800824c:	f3af 8000 	nop.w
 8008250:	636f4361 	.word	0x636f4361
 8008254:	3fd287a7 	.word	0x3fd287a7
 8008258:	8b60c8b3 	.word	0x8b60c8b3
 800825c:	3fc68a28 	.word	0x3fc68a28
 8008260:	509f79fb 	.word	0x509f79fb
 8008264:	3fd34413 	.word	0x3fd34413
 8008268:	08009dad 	.word	0x08009dad
 800826c:	08009dc4 	.word	0x08009dc4
 8008270:	7ff00000 	.word	0x7ff00000
 8008274:	08009d7d 	.word	0x08009d7d
 8008278:	3ff80000 	.word	0x3ff80000
 800827c:	08009f18 	.word	0x08009f18
 8008280:	08009e1c 	.word	0x08009e1c
 8008284:	08009da9 	.word	0x08009da9
 8008288:	08009d7c 	.word	0x08009d7c
 800828c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008290:	6018      	str	r0, [r3, #0]
 8008292:	9b03      	ldr	r3, [sp, #12]
 8008294:	2b0e      	cmp	r3, #14
 8008296:	f200 80a1 	bhi.w	80083dc <_dtoa_r+0x444>
 800829a:	2c00      	cmp	r4, #0
 800829c:	f000 809e 	beq.w	80083dc <_dtoa_r+0x444>
 80082a0:	2f00      	cmp	r7, #0
 80082a2:	dd33      	ble.n	800830c <_dtoa_r+0x374>
 80082a4:	4b9c      	ldr	r3, [pc, #624]	@ (8008518 <_dtoa_r+0x580>)
 80082a6:	f007 020f 	and.w	r2, r7, #15
 80082aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082ae:	ed93 7b00 	vldr	d7, [r3]
 80082b2:	05f8      	lsls	r0, r7, #23
 80082b4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80082b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80082bc:	d516      	bpl.n	80082ec <_dtoa_r+0x354>
 80082be:	4b97      	ldr	r3, [pc, #604]	@ (800851c <_dtoa_r+0x584>)
 80082c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082c8:	f7f8 fae8 	bl	800089c <__aeabi_ddiv>
 80082cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082d0:	f004 040f 	and.w	r4, r4, #15
 80082d4:	2603      	movs	r6, #3
 80082d6:	4d91      	ldr	r5, [pc, #580]	@ (800851c <_dtoa_r+0x584>)
 80082d8:	b954      	cbnz	r4, 80082f0 <_dtoa_r+0x358>
 80082da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80082de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082e2:	f7f8 fadb 	bl	800089c <__aeabi_ddiv>
 80082e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082ea:	e028      	b.n	800833e <_dtoa_r+0x3a6>
 80082ec:	2602      	movs	r6, #2
 80082ee:	e7f2      	b.n	80082d6 <_dtoa_r+0x33e>
 80082f0:	07e1      	lsls	r1, r4, #31
 80082f2:	d508      	bpl.n	8008306 <_dtoa_r+0x36e>
 80082f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80082f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082fc:	f7f8 f9a4 	bl	8000648 <__aeabi_dmul>
 8008300:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008304:	3601      	adds	r6, #1
 8008306:	1064      	asrs	r4, r4, #1
 8008308:	3508      	adds	r5, #8
 800830a:	e7e5      	b.n	80082d8 <_dtoa_r+0x340>
 800830c:	f000 80af 	beq.w	800846e <_dtoa_r+0x4d6>
 8008310:	427c      	negs	r4, r7
 8008312:	4b81      	ldr	r3, [pc, #516]	@ (8008518 <_dtoa_r+0x580>)
 8008314:	4d81      	ldr	r5, [pc, #516]	@ (800851c <_dtoa_r+0x584>)
 8008316:	f004 020f 	and.w	r2, r4, #15
 800831a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008322:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008326:	f7f8 f98f 	bl	8000648 <__aeabi_dmul>
 800832a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800832e:	1124      	asrs	r4, r4, #4
 8008330:	2300      	movs	r3, #0
 8008332:	2602      	movs	r6, #2
 8008334:	2c00      	cmp	r4, #0
 8008336:	f040 808f 	bne.w	8008458 <_dtoa_r+0x4c0>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1d3      	bne.n	80082e6 <_dtoa_r+0x34e>
 800833e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008340:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 8094 	beq.w	8008472 <_dtoa_r+0x4da>
 800834a:	4b75      	ldr	r3, [pc, #468]	@ (8008520 <_dtoa_r+0x588>)
 800834c:	2200      	movs	r2, #0
 800834e:	4620      	mov	r0, r4
 8008350:	4629      	mov	r1, r5
 8008352:	f7f8 fbeb 	bl	8000b2c <__aeabi_dcmplt>
 8008356:	2800      	cmp	r0, #0
 8008358:	f000 808b 	beq.w	8008472 <_dtoa_r+0x4da>
 800835c:	9b03      	ldr	r3, [sp, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 8087 	beq.w	8008472 <_dtoa_r+0x4da>
 8008364:	f1bb 0f00 	cmp.w	fp, #0
 8008368:	dd34      	ble.n	80083d4 <_dtoa_r+0x43c>
 800836a:	4620      	mov	r0, r4
 800836c:	4b6d      	ldr	r3, [pc, #436]	@ (8008524 <_dtoa_r+0x58c>)
 800836e:	2200      	movs	r2, #0
 8008370:	4629      	mov	r1, r5
 8008372:	f7f8 f969 	bl	8000648 <__aeabi_dmul>
 8008376:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800837a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800837e:	3601      	adds	r6, #1
 8008380:	465c      	mov	r4, fp
 8008382:	4630      	mov	r0, r6
 8008384:	f7f8 f8f6 	bl	8000574 <__aeabi_i2d>
 8008388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800838c:	f7f8 f95c 	bl	8000648 <__aeabi_dmul>
 8008390:	4b65      	ldr	r3, [pc, #404]	@ (8008528 <_dtoa_r+0x590>)
 8008392:	2200      	movs	r2, #0
 8008394:	f7f7 ffa2 	bl	80002dc <__adddf3>
 8008398:	4605      	mov	r5, r0
 800839a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800839e:	2c00      	cmp	r4, #0
 80083a0:	d16a      	bne.n	8008478 <_dtoa_r+0x4e0>
 80083a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083a6:	4b61      	ldr	r3, [pc, #388]	@ (800852c <_dtoa_r+0x594>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	f7f7 ff95 	bl	80002d8 <__aeabi_dsub>
 80083ae:	4602      	mov	r2, r0
 80083b0:	460b      	mov	r3, r1
 80083b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80083b6:	462a      	mov	r2, r5
 80083b8:	4633      	mov	r3, r6
 80083ba:	f7f8 fbd5 	bl	8000b68 <__aeabi_dcmpgt>
 80083be:	2800      	cmp	r0, #0
 80083c0:	f040 8298 	bne.w	80088f4 <_dtoa_r+0x95c>
 80083c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083c8:	462a      	mov	r2, r5
 80083ca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80083ce:	f7f8 fbad 	bl	8000b2c <__aeabi_dcmplt>
 80083d2:	bb38      	cbnz	r0, 8008424 <_dtoa_r+0x48c>
 80083d4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80083d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80083dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f2c0 8157 	blt.w	8008692 <_dtoa_r+0x6fa>
 80083e4:	2f0e      	cmp	r7, #14
 80083e6:	f300 8154 	bgt.w	8008692 <_dtoa_r+0x6fa>
 80083ea:	4b4b      	ldr	r3, [pc, #300]	@ (8008518 <_dtoa_r+0x580>)
 80083ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083f0:	ed93 7b00 	vldr	d7, [r3]
 80083f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	ed8d 7b00 	vstr	d7, [sp]
 80083fc:	f280 80e5 	bge.w	80085ca <_dtoa_r+0x632>
 8008400:	9b03      	ldr	r3, [sp, #12]
 8008402:	2b00      	cmp	r3, #0
 8008404:	f300 80e1 	bgt.w	80085ca <_dtoa_r+0x632>
 8008408:	d10c      	bne.n	8008424 <_dtoa_r+0x48c>
 800840a:	4b48      	ldr	r3, [pc, #288]	@ (800852c <_dtoa_r+0x594>)
 800840c:	2200      	movs	r2, #0
 800840e:	ec51 0b17 	vmov	r0, r1, d7
 8008412:	f7f8 f919 	bl	8000648 <__aeabi_dmul>
 8008416:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800841a:	f7f8 fb9b 	bl	8000b54 <__aeabi_dcmpge>
 800841e:	2800      	cmp	r0, #0
 8008420:	f000 8266 	beq.w	80088f0 <_dtoa_r+0x958>
 8008424:	2400      	movs	r4, #0
 8008426:	4625      	mov	r5, r4
 8008428:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800842a:	4656      	mov	r6, sl
 800842c:	ea6f 0803 	mvn.w	r8, r3
 8008430:	2700      	movs	r7, #0
 8008432:	4621      	mov	r1, r4
 8008434:	4648      	mov	r0, r9
 8008436:	f000 fe63 	bl	8009100 <_Bfree>
 800843a:	2d00      	cmp	r5, #0
 800843c:	f000 80bd 	beq.w	80085ba <_dtoa_r+0x622>
 8008440:	b12f      	cbz	r7, 800844e <_dtoa_r+0x4b6>
 8008442:	42af      	cmp	r7, r5
 8008444:	d003      	beq.n	800844e <_dtoa_r+0x4b6>
 8008446:	4639      	mov	r1, r7
 8008448:	4648      	mov	r0, r9
 800844a:	f000 fe59 	bl	8009100 <_Bfree>
 800844e:	4629      	mov	r1, r5
 8008450:	4648      	mov	r0, r9
 8008452:	f000 fe55 	bl	8009100 <_Bfree>
 8008456:	e0b0      	b.n	80085ba <_dtoa_r+0x622>
 8008458:	07e2      	lsls	r2, r4, #31
 800845a:	d505      	bpl.n	8008468 <_dtoa_r+0x4d0>
 800845c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008460:	f7f8 f8f2 	bl	8000648 <__aeabi_dmul>
 8008464:	3601      	adds	r6, #1
 8008466:	2301      	movs	r3, #1
 8008468:	1064      	asrs	r4, r4, #1
 800846a:	3508      	adds	r5, #8
 800846c:	e762      	b.n	8008334 <_dtoa_r+0x39c>
 800846e:	2602      	movs	r6, #2
 8008470:	e765      	b.n	800833e <_dtoa_r+0x3a6>
 8008472:	9c03      	ldr	r4, [sp, #12]
 8008474:	46b8      	mov	r8, r7
 8008476:	e784      	b.n	8008382 <_dtoa_r+0x3ea>
 8008478:	4b27      	ldr	r3, [pc, #156]	@ (8008518 <_dtoa_r+0x580>)
 800847a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800847c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008480:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008484:	4454      	add	r4, sl
 8008486:	2900      	cmp	r1, #0
 8008488:	d054      	beq.n	8008534 <_dtoa_r+0x59c>
 800848a:	4929      	ldr	r1, [pc, #164]	@ (8008530 <_dtoa_r+0x598>)
 800848c:	2000      	movs	r0, #0
 800848e:	f7f8 fa05 	bl	800089c <__aeabi_ddiv>
 8008492:	4633      	mov	r3, r6
 8008494:	462a      	mov	r2, r5
 8008496:	f7f7 ff1f 	bl	80002d8 <__aeabi_dsub>
 800849a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800849e:	4656      	mov	r6, sl
 80084a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084a4:	f7f8 fb80 	bl	8000ba8 <__aeabi_d2iz>
 80084a8:	4605      	mov	r5, r0
 80084aa:	f7f8 f863 	bl	8000574 <__aeabi_i2d>
 80084ae:	4602      	mov	r2, r0
 80084b0:	460b      	mov	r3, r1
 80084b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084b6:	f7f7 ff0f 	bl	80002d8 <__aeabi_dsub>
 80084ba:	3530      	adds	r5, #48	@ 0x30
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80084c4:	f806 5b01 	strb.w	r5, [r6], #1
 80084c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80084cc:	f7f8 fb2e 	bl	8000b2c <__aeabi_dcmplt>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d172      	bne.n	80085ba <_dtoa_r+0x622>
 80084d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084d8:	4911      	ldr	r1, [pc, #68]	@ (8008520 <_dtoa_r+0x588>)
 80084da:	2000      	movs	r0, #0
 80084dc:	f7f7 fefc 	bl	80002d8 <__aeabi_dsub>
 80084e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80084e4:	f7f8 fb22 	bl	8000b2c <__aeabi_dcmplt>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	f040 80b4 	bne.w	8008656 <_dtoa_r+0x6be>
 80084ee:	42a6      	cmp	r6, r4
 80084f0:	f43f af70 	beq.w	80083d4 <_dtoa_r+0x43c>
 80084f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80084f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008524 <_dtoa_r+0x58c>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	f7f8 f8a4 	bl	8000648 <__aeabi_dmul>
 8008500:	4b08      	ldr	r3, [pc, #32]	@ (8008524 <_dtoa_r+0x58c>)
 8008502:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008506:	2200      	movs	r2, #0
 8008508:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800850c:	f7f8 f89c 	bl	8000648 <__aeabi_dmul>
 8008510:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008514:	e7c4      	b.n	80084a0 <_dtoa_r+0x508>
 8008516:	bf00      	nop
 8008518:	08009f18 	.word	0x08009f18
 800851c:	08009ef0 	.word	0x08009ef0
 8008520:	3ff00000 	.word	0x3ff00000
 8008524:	40240000 	.word	0x40240000
 8008528:	401c0000 	.word	0x401c0000
 800852c:	40140000 	.word	0x40140000
 8008530:	3fe00000 	.word	0x3fe00000
 8008534:	4631      	mov	r1, r6
 8008536:	4628      	mov	r0, r5
 8008538:	f7f8 f886 	bl	8000648 <__aeabi_dmul>
 800853c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008540:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008542:	4656      	mov	r6, sl
 8008544:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008548:	f7f8 fb2e 	bl	8000ba8 <__aeabi_d2iz>
 800854c:	4605      	mov	r5, r0
 800854e:	f7f8 f811 	bl	8000574 <__aeabi_i2d>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800855a:	f7f7 febd 	bl	80002d8 <__aeabi_dsub>
 800855e:	3530      	adds	r5, #48	@ 0x30
 8008560:	f806 5b01 	strb.w	r5, [r6], #1
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	42a6      	cmp	r6, r4
 800856a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800856e:	f04f 0200 	mov.w	r2, #0
 8008572:	d124      	bne.n	80085be <_dtoa_r+0x626>
 8008574:	4baf      	ldr	r3, [pc, #700]	@ (8008834 <_dtoa_r+0x89c>)
 8008576:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800857a:	f7f7 feaf 	bl	80002dc <__adddf3>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008586:	f7f8 faef 	bl	8000b68 <__aeabi_dcmpgt>
 800858a:	2800      	cmp	r0, #0
 800858c:	d163      	bne.n	8008656 <_dtoa_r+0x6be>
 800858e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008592:	49a8      	ldr	r1, [pc, #672]	@ (8008834 <_dtoa_r+0x89c>)
 8008594:	2000      	movs	r0, #0
 8008596:	f7f7 fe9f 	bl	80002d8 <__aeabi_dsub>
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085a2:	f7f8 fac3 	bl	8000b2c <__aeabi_dcmplt>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	f43f af14 	beq.w	80083d4 <_dtoa_r+0x43c>
 80085ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80085ae:	1e73      	subs	r3, r6, #1
 80085b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80085b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80085b6:	2b30      	cmp	r3, #48	@ 0x30
 80085b8:	d0f8      	beq.n	80085ac <_dtoa_r+0x614>
 80085ba:	4647      	mov	r7, r8
 80085bc:	e03b      	b.n	8008636 <_dtoa_r+0x69e>
 80085be:	4b9e      	ldr	r3, [pc, #632]	@ (8008838 <_dtoa_r+0x8a0>)
 80085c0:	f7f8 f842 	bl	8000648 <__aeabi_dmul>
 80085c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085c8:	e7bc      	b.n	8008544 <_dtoa_r+0x5ac>
 80085ca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80085ce:	4656      	mov	r6, sl
 80085d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085d4:	4620      	mov	r0, r4
 80085d6:	4629      	mov	r1, r5
 80085d8:	f7f8 f960 	bl	800089c <__aeabi_ddiv>
 80085dc:	f7f8 fae4 	bl	8000ba8 <__aeabi_d2iz>
 80085e0:	4680      	mov	r8, r0
 80085e2:	f7f7 ffc7 	bl	8000574 <__aeabi_i2d>
 80085e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085ea:	f7f8 f82d 	bl	8000648 <__aeabi_dmul>
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	4620      	mov	r0, r4
 80085f4:	4629      	mov	r1, r5
 80085f6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80085fa:	f7f7 fe6d 	bl	80002d8 <__aeabi_dsub>
 80085fe:	f806 4b01 	strb.w	r4, [r6], #1
 8008602:	9d03      	ldr	r5, [sp, #12]
 8008604:	eba6 040a 	sub.w	r4, r6, sl
 8008608:	42a5      	cmp	r5, r4
 800860a:	4602      	mov	r2, r0
 800860c:	460b      	mov	r3, r1
 800860e:	d133      	bne.n	8008678 <_dtoa_r+0x6e0>
 8008610:	f7f7 fe64 	bl	80002dc <__adddf3>
 8008614:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008618:	4604      	mov	r4, r0
 800861a:	460d      	mov	r5, r1
 800861c:	f7f8 faa4 	bl	8000b68 <__aeabi_dcmpgt>
 8008620:	b9c0      	cbnz	r0, 8008654 <_dtoa_r+0x6bc>
 8008622:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008626:	4620      	mov	r0, r4
 8008628:	4629      	mov	r1, r5
 800862a:	f7f8 fa75 	bl	8000b18 <__aeabi_dcmpeq>
 800862e:	b110      	cbz	r0, 8008636 <_dtoa_r+0x69e>
 8008630:	f018 0f01 	tst.w	r8, #1
 8008634:	d10e      	bne.n	8008654 <_dtoa_r+0x6bc>
 8008636:	9902      	ldr	r1, [sp, #8]
 8008638:	4648      	mov	r0, r9
 800863a:	f000 fd61 	bl	8009100 <_Bfree>
 800863e:	2300      	movs	r3, #0
 8008640:	7033      	strb	r3, [r6, #0]
 8008642:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008644:	3701      	adds	r7, #1
 8008646:	601f      	str	r7, [r3, #0]
 8008648:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 824b 	beq.w	8008ae6 <_dtoa_r+0xb4e>
 8008650:	601e      	str	r6, [r3, #0]
 8008652:	e248      	b.n	8008ae6 <_dtoa_r+0xb4e>
 8008654:	46b8      	mov	r8, r7
 8008656:	4633      	mov	r3, r6
 8008658:	461e      	mov	r6, r3
 800865a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800865e:	2a39      	cmp	r2, #57	@ 0x39
 8008660:	d106      	bne.n	8008670 <_dtoa_r+0x6d8>
 8008662:	459a      	cmp	sl, r3
 8008664:	d1f8      	bne.n	8008658 <_dtoa_r+0x6c0>
 8008666:	2230      	movs	r2, #48	@ 0x30
 8008668:	f108 0801 	add.w	r8, r8, #1
 800866c:	f88a 2000 	strb.w	r2, [sl]
 8008670:	781a      	ldrb	r2, [r3, #0]
 8008672:	3201      	adds	r2, #1
 8008674:	701a      	strb	r2, [r3, #0]
 8008676:	e7a0      	b.n	80085ba <_dtoa_r+0x622>
 8008678:	4b6f      	ldr	r3, [pc, #444]	@ (8008838 <_dtoa_r+0x8a0>)
 800867a:	2200      	movs	r2, #0
 800867c:	f7f7 ffe4 	bl	8000648 <__aeabi_dmul>
 8008680:	2200      	movs	r2, #0
 8008682:	2300      	movs	r3, #0
 8008684:	4604      	mov	r4, r0
 8008686:	460d      	mov	r5, r1
 8008688:	f7f8 fa46 	bl	8000b18 <__aeabi_dcmpeq>
 800868c:	2800      	cmp	r0, #0
 800868e:	d09f      	beq.n	80085d0 <_dtoa_r+0x638>
 8008690:	e7d1      	b.n	8008636 <_dtoa_r+0x69e>
 8008692:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008694:	2a00      	cmp	r2, #0
 8008696:	f000 80ea 	beq.w	800886e <_dtoa_r+0x8d6>
 800869a:	9a07      	ldr	r2, [sp, #28]
 800869c:	2a01      	cmp	r2, #1
 800869e:	f300 80cd 	bgt.w	800883c <_dtoa_r+0x8a4>
 80086a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80086a4:	2a00      	cmp	r2, #0
 80086a6:	f000 80c1 	beq.w	800882c <_dtoa_r+0x894>
 80086aa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80086ae:	9c08      	ldr	r4, [sp, #32]
 80086b0:	9e00      	ldr	r6, [sp, #0]
 80086b2:	9a00      	ldr	r2, [sp, #0]
 80086b4:	441a      	add	r2, r3
 80086b6:	9200      	str	r2, [sp, #0]
 80086b8:	9a06      	ldr	r2, [sp, #24]
 80086ba:	2101      	movs	r1, #1
 80086bc:	441a      	add	r2, r3
 80086be:	4648      	mov	r0, r9
 80086c0:	9206      	str	r2, [sp, #24]
 80086c2:	f000 fdd1 	bl	8009268 <__i2b>
 80086c6:	4605      	mov	r5, r0
 80086c8:	b166      	cbz	r6, 80086e4 <_dtoa_r+0x74c>
 80086ca:	9b06      	ldr	r3, [sp, #24]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	dd09      	ble.n	80086e4 <_dtoa_r+0x74c>
 80086d0:	42b3      	cmp	r3, r6
 80086d2:	9a00      	ldr	r2, [sp, #0]
 80086d4:	bfa8      	it	ge
 80086d6:	4633      	movge	r3, r6
 80086d8:	1ad2      	subs	r2, r2, r3
 80086da:	9200      	str	r2, [sp, #0]
 80086dc:	9a06      	ldr	r2, [sp, #24]
 80086de:	1af6      	subs	r6, r6, r3
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	9306      	str	r3, [sp, #24]
 80086e4:	9b08      	ldr	r3, [sp, #32]
 80086e6:	b30b      	cbz	r3, 800872c <_dtoa_r+0x794>
 80086e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 80c6 	beq.w	800887c <_dtoa_r+0x8e4>
 80086f0:	2c00      	cmp	r4, #0
 80086f2:	f000 80c0 	beq.w	8008876 <_dtoa_r+0x8de>
 80086f6:	4629      	mov	r1, r5
 80086f8:	4622      	mov	r2, r4
 80086fa:	4648      	mov	r0, r9
 80086fc:	f000 fe6c 	bl	80093d8 <__pow5mult>
 8008700:	9a02      	ldr	r2, [sp, #8]
 8008702:	4601      	mov	r1, r0
 8008704:	4605      	mov	r5, r0
 8008706:	4648      	mov	r0, r9
 8008708:	f000 fdc4 	bl	8009294 <__multiply>
 800870c:	9902      	ldr	r1, [sp, #8]
 800870e:	4680      	mov	r8, r0
 8008710:	4648      	mov	r0, r9
 8008712:	f000 fcf5 	bl	8009100 <_Bfree>
 8008716:	9b08      	ldr	r3, [sp, #32]
 8008718:	1b1b      	subs	r3, r3, r4
 800871a:	9308      	str	r3, [sp, #32]
 800871c:	f000 80b1 	beq.w	8008882 <_dtoa_r+0x8ea>
 8008720:	9a08      	ldr	r2, [sp, #32]
 8008722:	4641      	mov	r1, r8
 8008724:	4648      	mov	r0, r9
 8008726:	f000 fe57 	bl	80093d8 <__pow5mult>
 800872a:	9002      	str	r0, [sp, #8]
 800872c:	2101      	movs	r1, #1
 800872e:	4648      	mov	r0, r9
 8008730:	f000 fd9a 	bl	8009268 <__i2b>
 8008734:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008736:	4604      	mov	r4, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	f000 81d8 	beq.w	8008aee <_dtoa_r+0xb56>
 800873e:	461a      	mov	r2, r3
 8008740:	4601      	mov	r1, r0
 8008742:	4648      	mov	r0, r9
 8008744:	f000 fe48 	bl	80093d8 <__pow5mult>
 8008748:	9b07      	ldr	r3, [sp, #28]
 800874a:	2b01      	cmp	r3, #1
 800874c:	4604      	mov	r4, r0
 800874e:	f300 809f 	bgt.w	8008890 <_dtoa_r+0x8f8>
 8008752:	9b04      	ldr	r3, [sp, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	f040 8097 	bne.w	8008888 <_dtoa_r+0x8f0>
 800875a:	9b05      	ldr	r3, [sp, #20]
 800875c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008760:	2b00      	cmp	r3, #0
 8008762:	f040 8093 	bne.w	800888c <_dtoa_r+0x8f4>
 8008766:	9b05      	ldr	r3, [sp, #20]
 8008768:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800876c:	0d1b      	lsrs	r3, r3, #20
 800876e:	051b      	lsls	r3, r3, #20
 8008770:	b133      	cbz	r3, 8008780 <_dtoa_r+0x7e8>
 8008772:	9b00      	ldr	r3, [sp, #0]
 8008774:	3301      	adds	r3, #1
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	9b06      	ldr	r3, [sp, #24]
 800877a:	3301      	adds	r3, #1
 800877c:	9306      	str	r3, [sp, #24]
 800877e:	2301      	movs	r3, #1
 8008780:	9308      	str	r3, [sp, #32]
 8008782:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 81b8 	beq.w	8008afa <_dtoa_r+0xb62>
 800878a:	6923      	ldr	r3, [r4, #16]
 800878c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008790:	6918      	ldr	r0, [r3, #16]
 8008792:	f000 fd1d 	bl	80091d0 <__hi0bits>
 8008796:	f1c0 0020 	rsb	r0, r0, #32
 800879a:	9b06      	ldr	r3, [sp, #24]
 800879c:	4418      	add	r0, r3
 800879e:	f010 001f 	ands.w	r0, r0, #31
 80087a2:	f000 8082 	beq.w	80088aa <_dtoa_r+0x912>
 80087a6:	f1c0 0320 	rsb	r3, r0, #32
 80087aa:	2b04      	cmp	r3, #4
 80087ac:	dd73      	ble.n	8008896 <_dtoa_r+0x8fe>
 80087ae:	9b00      	ldr	r3, [sp, #0]
 80087b0:	f1c0 001c 	rsb	r0, r0, #28
 80087b4:	4403      	add	r3, r0
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	9b06      	ldr	r3, [sp, #24]
 80087ba:	4403      	add	r3, r0
 80087bc:	4406      	add	r6, r0
 80087be:	9306      	str	r3, [sp, #24]
 80087c0:	9b00      	ldr	r3, [sp, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	dd05      	ble.n	80087d2 <_dtoa_r+0x83a>
 80087c6:	9902      	ldr	r1, [sp, #8]
 80087c8:	461a      	mov	r2, r3
 80087ca:	4648      	mov	r0, r9
 80087cc:	f000 fe5e 	bl	800948c <__lshift>
 80087d0:	9002      	str	r0, [sp, #8]
 80087d2:	9b06      	ldr	r3, [sp, #24]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	dd05      	ble.n	80087e4 <_dtoa_r+0x84c>
 80087d8:	4621      	mov	r1, r4
 80087da:	461a      	mov	r2, r3
 80087dc:	4648      	mov	r0, r9
 80087de:	f000 fe55 	bl	800948c <__lshift>
 80087e2:	4604      	mov	r4, r0
 80087e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d061      	beq.n	80088ae <_dtoa_r+0x916>
 80087ea:	9802      	ldr	r0, [sp, #8]
 80087ec:	4621      	mov	r1, r4
 80087ee:	f000 feb9 	bl	8009564 <__mcmp>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	da5b      	bge.n	80088ae <_dtoa_r+0x916>
 80087f6:	2300      	movs	r3, #0
 80087f8:	9902      	ldr	r1, [sp, #8]
 80087fa:	220a      	movs	r2, #10
 80087fc:	4648      	mov	r0, r9
 80087fe:	f000 fca1 	bl	8009144 <__multadd>
 8008802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008804:	9002      	str	r0, [sp, #8]
 8008806:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 8177 	beq.w	8008afe <_dtoa_r+0xb66>
 8008810:	4629      	mov	r1, r5
 8008812:	2300      	movs	r3, #0
 8008814:	220a      	movs	r2, #10
 8008816:	4648      	mov	r0, r9
 8008818:	f000 fc94 	bl	8009144 <__multadd>
 800881c:	f1bb 0f00 	cmp.w	fp, #0
 8008820:	4605      	mov	r5, r0
 8008822:	dc6f      	bgt.n	8008904 <_dtoa_r+0x96c>
 8008824:	9b07      	ldr	r3, [sp, #28]
 8008826:	2b02      	cmp	r3, #2
 8008828:	dc49      	bgt.n	80088be <_dtoa_r+0x926>
 800882a:	e06b      	b.n	8008904 <_dtoa_r+0x96c>
 800882c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800882e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008832:	e73c      	b.n	80086ae <_dtoa_r+0x716>
 8008834:	3fe00000 	.word	0x3fe00000
 8008838:	40240000 	.word	0x40240000
 800883c:	9b03      	ldr	r3, [sp, #12]
 800883e:	1e5c      	subs	r4, r3, #1
 8008840:	9b08      	ldr	r3, [sp, #32]
 8008842:	42a3      	cmp	r3, r4
 8008844:	db09      	blt.n	800885a <_dtoa_r+0x8c2>
 8008846:	1b1c      	subs	r4, r3, r4
 8008848:	9b03      	ldr	r3, [sp, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	f6bf af30 	bge.w	80086b0 <_dtoa_r+0x718>
 8008850:	9b00      	ldr	r3, [sp, #0]
 8008852:	9a03      	ldr	r2, [sp, #12]
 8008854:	1a9e      	subs	r6, r3, r2
 8008856:	2300      	movs	r3, #0
 8008858:	e72b      	b.n	80086b2 <_dtoa_r+0x71a>
 800885a:	9b08      	ldr	r3, [sp, #32]
 800885c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800885e:	9408      	str	r4, [sp, #32]
 8008860:	1ae3      	subs	r3, r4, r3
 8008862:	441a      	add	r2, r3
 8008864:	9e00      	ldr	r6, [sp, #0]
 8008866:	9b03      	ldr	r3, [sp, #12]
 8008868:	920d      	str	r2, [sp, #52]	@ 0x34
 800886a:	2400      	movs	r4, #0
 800886c:	e721      	b.n	80086b2 <_dtoa_r+0x71a>
 800886e:	9c08      	ldr	r4, [sp, #32]
 8008870:	9e00      	ldr	r6, [sp, #0]
 8008872:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008874:	e728      	b.n	80086c8 <_dtoa_r+0x730>
 8008876:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800887a:	e751      	b.n	8008720 <_dtoa_r+0x788>
 800887c:	9a08      	ldr	r2, [sp, #32]
 800887e:	9902      	ldr	r1, [sp, #8]
 8008880:	e750      	b.n	8008724 <_dtoa_r+0x78c>
 8008882:	f8cd 8008 	str.w	r8, [sp, #8]
 8008886:	e751      	b.n	800872c <_dtoa_r+0x794>
 8008888:	2300      	movs	r3, #0
 800888a:	e779      	b.n	8008780 <_dtoa_r+0x7e8>
 800888c:	9b04      	ldr	r3, [sp, #16]
 800888e:	e777      	b.n	8008780 <_dtoa_r+0x7e8>
 8008890:	2300      	movs	r3, #0
 8008892:	9308      	str	r3, [sp, #32]
 8008894:	e779      	b.n	800878a <_dtoa_r+0x7f2>
 8008896:	d093      	beq.n	80087c0 <_dtoa_r+0x828>
 8008898:	9a00      	ldr	r2, [sp, #0]
 800889a:	331c      	adds	r3, #28
 800889c:	441a      	add	r2, r3
 800889e:	9200      	str	r2, [sp, #0]
 80088a0:	9a06      	ldr	r2, [sp, #24]
 80088a2:	441a      	add	r2, r3
 80088a4:	441e      	add	r6, r3
 80088a6:	9206      	str	r2, [sp, #24]
 80088a8:	e78a      	b.n	80087c0 <_dtoa_r+0x828>
 80088aa:	4603      	mov	r3, r0
 80088ac:	e7f4      	b.n	8008898 <_dtoa_r+0x900>
 80088ae:	9b03      	ldr	r3, [sp, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	46b8      	mov	r8, r7
 80088b4:	dc20      	bgt.n	80088f8 <_dtoa_r+0x960>
 80088b6:	469b      	mov	fp, r3
 80088b8:	9b07      	ldr	r3, [sp, #28]
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	dd1e      	ble.n	80088fc <_dtoa_r+0x964>
 80088be:	f1bb 0f00 	cmp.w	fp, #0
 80088c2:	f47f adb1 	bne.w	8008428 <_dtoa_r+0x490>
 80088c6:	4621      	mov	r1, r4
 80088c8:	465b      	mov	r3, fp
 80088ca:	2205      	movs	r2, #5
 80088cc:	4648      	mov	r0, r9
 80088ce:	f000 fc39 	bl	8009144 <__multadd>
 80088d2:	4601      	mov	r1, r0
 80088d4:	4604      	mov	r4, r0
 80088d6:	9802      	ldr	r0, [sp, #8]
 80088d8:	f000 fe44 	bl	8009564 <__mcmp>
 80088dc:	2800      	cmp	r0, #0
 80088de:	f77f ada3 	ble.w	8008428 <_dtoa_r+0x490>
 80088e2:	4656      	mov	r6, sl
 80088e4:	2331      	movs	r3, #49	@ 0x31
 80088e6:	f806 3b01 	strb.w	r3, [r6], #1
 80088ea:	f108 0801 	add.w	r8, r8, #1
 80088ee:	e59f      	b.n	8008430 <_dtoa_r+0x498>
 80088f0:	9c03      	ldr	r4, [sp, #12]
 80088f2:	46b8      	mov	r8, r7
 80088f4:	4625      	mov	r5, r4
 80088f6:	e7f4      	b.n	80088e2 <_dtoa_r+0x94a>
 80088f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80088fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f000 8101 	beq.w	8008b06 <_dtoa_r+0xb6e>
 8008904:	2e00      	cmp	r6, #0
 8008906:	dd05      	ble.n	8008914 <_dtoa_r+0x97c>
 8008908:	4629      	mov	r1, r5
 800890a:	4632      	mov	r2, r6
 800890c:	4648      	mov	r0, r9
 800890e:	f000 fdbd 	bl	800948c <__lshift>
 8008912:	4605      	mov	r5, r0
 8008914:	9b08      	ldr	r3, [sp, #32]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d05c      	beq.n	80089d4 <_dtoa_r+0xa3c>
 800891a:	6869      	ldr	r1, [r5, #4]
 800891c:	4648      	mov	r0, r9
 800891e:	f000 fbaf 	bl	8009080 <_Balloc>
 8008922:	4606      	mov	r6, r0
 8008924:	b928      	cbnz	r0, 8008932 <_dtoa_r+0x99a>
 8008926:	4b82      	ldr	r3, [pc, #520]	@ (8008b30 <_dtoa_r+0xb98>)
 8008928:	4602      	mov	r2, r0
 800892a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800892e:	f7ff bb4a 	b.w	8007fc6 <_dtoa_r+0x2e>
 8008932:	692a      	ldr	r2, [r5, #16]
 8008934:	3202      	adds	r2, #2
 8008936:	0092      	lsls	r2, r2, #2
 8008938:	f105 010c 	add.w	r1, r5, #12
 800893c:	300c      	adds	r0, #12
 800893e:	f001 f8cb 	bl	8009ad8 <memcpy>
 8008942:	2201      	movs	r2, #1
 8008944:	4631      	mov	r1, r6
 8008946:	4648      	mov	r0, r9
 8008948:	f000 fda0 	bl	800948c <__lshift>
 800894c:	f10a 0301 	add.w	r3, sl, #1
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	eb0a 030b 	add.w	r3, sl, fp
 8008956:	9308      	str	r3, [sp, #32]
 8008958:	9b04      	ldr	r3, [sp, #16]
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	462f      	mov	r7, r5
 8008960:	9306      	str	r3, [sp, #24]
 8008962:	4605      	mov	r5, r0
 8008964:	9b00      	ldr	r3, [sp, #0]
 8008966:	9802      	ldr	r0, [sp, #8]
 8008968:	4621      	mov	r1, r4
 800896a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800896e:	f7ff fa89 	bl	8007e84 <quorem>
 8008972:	4603      	mov	r3, r0
 8008974:	3330      	adds	r3, #48	@ 0x30
 8008976:	9003      	str	r0, [sp, #12]
 8008978:	4639      	mov	r1, r7
 800897a:	9802      	ldr	r0, [sp, #8]
 800897c:	9309      	str	r3, [sp, #36]	@ 0x24
 800897e:	f000 fdf1 	bl	8009564 <__mcmp>
 8008982:	462a      	mov	r2, r5
 8008984:	9004      	str	r0, [sp, #16]
 8008986:	4621      	mov	r1, r4
 8008988:	4648      	mov	r0, r9
 800898a:	f000 fe07 	bl	800959c <__mdiff>
 800898e:	68c2      	ldr	r2, [r0, #12]
 8008990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008992:	4606      	mov	r6, r0
 8008994:	bb02      	cbnz	r2, 80089d8 <_dtoa_r+0xa40>
 8008996:	4601      	mov	r1, r0
 8008998:	9802      	ldr	r0, [sp, #8]
 800899a:	f000 fde3 	bl	8009564 <__mcmp>
 800899e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089a0:	4602      	mov	r2, r0
 80089a2:	4631      	mov	r1, r6
 80089a4:	4648      	mov	r0, r9
 80089a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80089a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80089aa:	f000 fba9 	bl	8009100 <_Bfree>
 80089ae:	9b07      	ldr	r3, [sp, #28]
 80089b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80089b2:	9e00      	ldr	r6, [sp, #0]
 80089b4:	ea42 0103 	orr.w	r1, r2, r3
 80089b8:	9b06      	ldr	r3, [sp, #24]
 80089ba:	4319      	orrs	r1, r3
 80089bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089be:	d10d      	bne.n	80089dc <_dtoa_r+0xa44>
 80089c0:	2b39      	cmp	r3, #57	@ 0x39
 80089c2:	d027      	beq.n	8008a14 <_dtoa_r+0xa7c>
 80089c4:	9a04      	ldr	r2, [sp, #16]
 80089c6:	2a00      	cmp	r2, #0
 80089c8:	dd01      	ble.n	80089ce <_dtoa_r+0xa36>
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	3331      	adds	r3, #49	@ 0x31
 80089ce:	f88b 3000 	strb.w	r3, [fp]
 80089d2:	e52e      	b.n	8008432 <_dtoa_r+0x49a>
 80089d4:	4628      	mov	r0, r5
 80089d6:	e7b9      	b.n	800894c <_dtoa_r+0x9b4>
 80089d8:	2201      	movs	r2, #1
 80089da:	e7e2      	b.n	80089a2 <_dtoa_r+0xa0a>
 80089dc:	9904      	ldr	r1, [sp, #16]
 80089de:	2900      	cmp	r1, #0
 80089e0:	db04      	blt.n	80089ec <_dtoa_r+0xa54>
 80089e2:	9807      	ldr	r0, [sp, #28]
 80089e4:	4301      	orrs	r1, r0
 80089e6:	9806      	ldr	r0, [sp, #24]
 80089e8:	4301      	orrs	r1, r0
 80089ea:	d120      	bne.n	8008a2e <_dtoa_r+0xa96>
 80089ec:	2a00      	cmp	r2, #0
 80089ee:	ddee      	ble.n	80089ce <_dtoa_r+0xa36>
 80089f0:	9902      	ldr	r1, [sp, #8]
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	2201      	movs	r2, #1
 80089f6:	4648      	mov	r0, r9
 80089f8:	f000 fd48 	bl	800948c <__lshift>
 80089fc:	4621      	mov	r1, r4
 80089fe:	9002      	str	r0, [sp, #8]
 8008a00:	f000 fdb0 	bl	8009564 <__mcmp>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	9b00      	ldr	r3, [sp, #0]
 8008a08:	dc02      	bgt.n	8008a10 <_dtoa_r+0xa78>
 8008a0a:	d1e0      	bne.n	80089ce <_dtoa_r+0xa36>
 8008a0c:	07da      	lsls	r2, r3, #31
 8008a0e:	d5de      	bpl.n	80089ce <_dtoa_r+0xa36>
 8008a10:	2b39      	cmp	r3, #57	@ 0x39
 8008a12:	d1da      	bne.n	80089ca <_dtoa_r+0xa32>
 8008a14:	2339      	movs	r3, #57	@ 0x39
 8008a16:	f88b 3000 	strb.w	r3, [fp]
 8008a1a:	4633      	mov	r3, r6
 8008a1c:	461e      	mov	r6, r3
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008a24:	2a39      	cmp	r2, #57	@ 0x39
 8008a26:	d04e      	beq.n	8008ac6 <_dtoa_r+0xb2e>
 8008a28:	3201      	adds	r2, #1
 8008a2a:	701a      	strb	r2, [r3, #0]
 8008a2c:	e501      	b.n	8008432 <_dtoa_r+0x49a>
 8008a2e:	2a00      	cmp	r2, #0
 8008a30:	dd03      	ble.n	8008a3a <_dtoa_r+0xaa2>
 8008a32:	2b39      	cmp	r3, #57	@ 0x39
 8008a34:	d0ee      	beq.n	8008a14 <_dtoa_r+0xa7c>
 8008a36:	3301      	adds	r3, #1
 8008a38:	e7c9      	b.n	80089ce <_dtoa_r+0xa36>
 8008a3a:	9a00      	ldr	r2, [sp, #0]
 8008a3c:	9908      	ldr	r1, [sp, #32]
 8008a3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a42:	428a      	cmp	r2, r1
 8008a44:	d028      	beq.n	8008a98 <_dtoa_r+0xb00>
 8008a46:	9902      	ldr	r1, [sp, #8]
 8008a48:	2300      	movs	r3, #0
 8008a4a:	220a      	movs	r2, #10
 8008a4c:	4648      	mov	r0, r9
 8008a4e:	f000 fb79 	bl	8009144 <__multadd>
 8008a52:	42af      	cmp	r7, r5
 8008a54:	9002      	str	r0, [sp, #8]
 8008a56:	f04f 0300 	mov.w	r3, #0
 8008a5a:	f04f 020a 	mov.w	r2, #10
 8008a5e:	4639      	mov	r1, r7
 8008a60:	4648      	mov	r0, r9
 8008a62:	d107      	bne.n	8008a74 <_dtoa_r+0xadc>
 8008a64:	f000 fb6e 	bl	8009144 <__multadd>
 8008a68:	4607      	mov	r7, r0
 8008a6a:	4605      	mov	r5, r0
 8008a6c:	9b00      	ldr	r3, [sp, #0]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	e777      	b.n	8008964 <_dtoa_r+0x9cc>
 8008a74:	f000 fb66 	bl	8009144 <__multadd>
 8008a78:	4629      	mov	r1, r5
 8008a7a:	4607      	mov	r7, r0
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	220a      	movs	r2, #10
 8008a80:	4648      	mov	r0, r9
 8008a82:	f000 fb5f 	bl	8009144 <__multadd>
 8008a86:	4605      	mov	r5, r0
 8008a88:	e7f0      	b.n	8008a6c <_dtoa_r+0xad4>
 8008a8a:	f1bb 0f00 	cmp.w	fp, #0
 8008a8e:	bfcc      	ite	gt
 8008a90:	465e      	movgt	r6, fp
 8008a92:	2601      	movle	r6, #1
 8008a94:	4456      	add	r6, sl
 8008a96:	2700      	movs	r7, #0
 8008a98:	9902      	ldr	r1, [sp, #8]
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	4648      	mov	r0, r9
 8008aa0:	f000 fcf4 	bl	800948c <__lshift>
 8008aa4:	4621      	mov	r1, r4
 8008aa6:	9002      	str	r0, [sp, #8]
 8008aa8:	f000 fd5c 	bl	8009564 <__mcmp>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	dcb4      	bgt.n	8008a1a <_dtoa_r+0xa82>
 8008ab0:	d102      	bne.n	8008ab8 <_dtoa_r+0xb20>
 8008ab2:	9b00      	ldr	r3, [sp, #0]
 8008ab4:	07db      	lsls	r3, r3, #31
 8008ab6:	d4b0      	bmi.n	8008a1a <_dtoa_r+0xa82>
 8008ab8:	4633      	mov	r3, r6
 8008aba:	461e      	mov	r6, r3
 8008abc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ac0:	2a30      	cmp	r2, #48	@ 0x30
 8008ac2:	d0fa      	beq.n	8008aba <_dtoa_r+0xb22>
 8008ac4:	e4b5      	b.n	8008432 <_dtoa_r+0x49a>
 8008ac6:	459a      	cmp	sl, r3
 8008ac8:	d1a8      	bne.n	8008a1c <_dtoa_r+0xa84>
 8008aca:	2331      	movs	r3, #49	@ 0x31
 8008acc:	f108 0801 	add.w	r8, r8, #1
 8008ad0:	f88a 3000 	strb.w	r3, [sl]
 8008ad4:	e4ad      	b.n	8008432 <_dtoa_r+0x49a>
 8008ad6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ad8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008b34 <_dtoa_r+0xb9c>
 8008adc:	b11b      	cbz	r3, 8008ae6 <_dtoa_r+0xb4e>
 8008ade:	f10a 0308 	add.w	r3, sl, #8
 8008ae2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008ae4:	6013      	str	r3, [r2, #0]
 8008ae6:	4650      	mov	r0, sl
 8008ae8:	b017      	add	sp, #92	@ 0x5c
 8008aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aee:	9b07      	ldr	r3, [sp, #28]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	f77f ae2e 	ble.w	8008752 <_dtoa_r+0x7ba>
 8008af6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008af8:	9308      	str	r3, [sp, #32]
 8008afa:	2001      	movs	r0, #1
 8008afc:	e64d      	b.n	800879a <_dtoa_r+0x802>
 8008afe:	f1bb 0f00 	cmp.w	fp, #0
 8008b02:	f77f aed9 	ble.w	80088b8 <_dtoa_r+0x920>
 8008b06:	4656      	mov	r6, sl
 8008b08:	9802      	ldr	r0, [sp, #8]
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	f7ff f9ba 	bl	8007e84 <quorem>
 8008b10:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008b14:	f806 3b01 	strb.w	r3, [r6], #1
 8008b18:	eba6 020a 	sub.w	r2, r6, sl
 8008b1c:	4593      	cmp	fp, r2
 8008b1e:	ddb4      	ble.n	8008a8a <_dtoa_r+0xaf2>
 8008b20:	9902      	ldr	r1, [sp, #8]
 8008b22:	2300      	movs	r3, #0
 8008b24:	220a      	movs	r2, #10
 8008b26:	4648      	mov	r0, r9
 8008b28:	f000 fb0c 	bl	8009144 <__multadd>
 8008b2c:	9002      	str	r0, [sp, #8]
 8008b2e:	e7eb      	b.n	8008b08 <_dtoa_r+0xb70>
 8008b30:	08009e1c 	.word	0x08009e1c
 8008b34:	08009da0 	.word	0x08009da0

08008b38 <__sfputc_r>:
 8008b38:	6893      	ldr	r3, [r2, #8]
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	b410      	push	{r4}
 8008b40:	6093      	str	r3, [r2, #8]
 8008b42:	da08      	bge.n	8008b56 <__sfputc_r+0x1e>
 8008b44:	6994      	ldr	r4, [r2, #24]
 8008b46:	42a3      	cmp	r3, r4
 8008b48:	db01      	blt.n	8008b4e <__sfputc_r+0x16>
 8008b4a:	290a      	cmp	r1, #10
 8008b4c:	d103      	bne.n	8008b56 <__sfputc_r+0x1e>
 8008b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b52:	f000 be52 	b.w	80097fa <__swbuf_r>
 8008b56:	6813      	ldr	r3, [r2, #0]
 8008b58:	1c58      	adds	r0, r3, #1
 8008b5a:	6010      	str	r0, [r2, #0]
 8008b5c:	7019      	strb	r1, [r3, #0]
 8008b5e:	4608      	mov	r0, r1
 8008b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <__sfputs_r>:
 8008b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b68:	4606      	mov	r6, r0
 8008b6a:	460f      	mov	r7, r1
 8008b6c:	4614      	mov	r4, r2
 8008b6e:	18d5      	adds	r5, r2, r3
 8008b70:	42ac      	cmp	r4, r5
 8008b72:	d101      	bne.n	8008b78 <__sfputs_r+0x12>
 8008b74:	2000      	movs	r0, #0
 8008b76:	e007      	b.n	8008b88 <__sfputs_r+0x22>
 8008b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b7c:	463a      	mov	r2, r7
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f7ff ffda 	bl	8008b38 <__sfputc_r>
 8008b84:	1c43      	adds	r3, r0, #1
 8008b86:	d1f3      	bne.n	8008b70 <__sfputs_r+0xa>
 8008b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b8c <_vfiprintf_r>:
 8008b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b90:	460d      	mov	r5, r1
 8008b92:	b09d      	sub	sp, #116	@ 0x74
 8008b94:	4614      	mov	r4, r2
 8008b96:	4698      	mov	r8, r3
 8008b98:	4606      	mov	r6, r0
 8008b9a:	b118      	cbz	r0, 8008ba4 <_vfiprintf_r+0x18>
 8008b9c:	6a03      	ldr	r3, [r0, #32]
 8008b9e:	b90b      	cbnz	r3, 8008ba4 <_vfiprintf_r+0x18>
 8008ba0:	f7ff f890 	bl	8007cc4 <__sinit>
 8008ba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ba6:	07d9      	lsls	r1, r3, #31
 8008ba8:	d405      	bmi.n	8008bb6 <_vfiprintf_r+0x2a>
 8008baa:	89ab      	ldrh	r3, [r5, #12]
 8008bac:	059a      	lsls	r2, r3, #22
 8008bae:	d402      	bmi.n	8008bb6 <_vfiprintf_r+0x2a>
 8008bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bb2:	f7ff f960 	bl	8007e76 <__retarget_lock_acquire_recursive>
 8008bb6:	89ab      	ldrh	r3, [r5, #12]
 8008bb8:	071b      	lsls	r3, r3, #28
 8008bba:	d501      	bpl.n	8008bc0 <_vfiprintf_r+0x34>
 8008bbc:	692b      	ldr	r3, [r5, #16]
 8008bbe:	b99b      	cbnz	r3, 8008be8 <_vfiprintf_r+0x5c>
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	f000 fe58 	bl	8009878 <__swsetup_r>
 8008bc8:	b170      	cbz	r0, 8008be8 <_vfiprintf_r+0x5c>
 8008bca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bcc:	07dc      	lsls	r4, r3, #31
 8008bce:	d504      	bpl.n	8008bda <_vfiprintf_r+0x4e>
 8008bd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008bd4:	b01d      	add	sp, #116	@ 0x74
 8008bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bda:	89ab      	ldrh	r3, [r5, #12]
 8008bdc:	0598      	lsls	r0, r3, #22
 8008bde:	d4f7      	bmi.n	8008bd0 <_vfiprintf_r+0x44>
 8008be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008be2:	f7ff f949 	bl	8007e78 <__retarget_lock_release_recursive>
 8008be6:	e7f3      	b.n	8008bd0 <_vfiprintf_r+0x44>
 8008be8:	2300      	movs	r3, #0
 8008bea:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bec:	2320      	movs	r3, #32
 8008bee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bf6:	2330      	movs	r3, #48	@ 0x30
 8008bf8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008da8 <_vfiprintf_r+0x21c>
 8008bfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c00:	f04f 0901 	mov.w	r9, #1
 8008c04:	4623      	mov	r3, r4
 8008c06:	469a      	mov	sl, r3
 8008c08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c0c:	b10a      	cbz	r2, 8008c12 <_vfiprintf_r+0x86>
 8008c0e:	2a25      	cmp	r2, #37	@ 0x25
 8008c10:	d1f9      	bne.n	8008c06 <_vfiprintf_r+0x7a>
 8008c12:	ebba 0b04 	subs.w	fp, sl, r4
 8008c16:	d00b      	beq.n	8008c30 <_vfiprintf_r+0xa4>
 8008c18:	465b      	mov	r3, fp
 8008c1a:	4622      	mov	r2, r4
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f7ff ffa1 	bl	8008b66 <__sfputs_r>
 8008c24:	3001      	adds	r0, #1
 8008c26:	f000 80a7 	beq.w	8008d78 <_vfiprintf_r+0x1ec>
 8008c2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c2c:	445a      	add	r2, fp
 8008c2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c30:	f89a 3000 	ldrb.w	r3, [sl]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 809f 	beq.w	8008d78 <_vfiprintf_r+0x1ec>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c44:	f10a 0a01 	add.w	sl, sl, #1
 8008c48:	9304      	str	r3, [sp, #16]
 8008c4a:	9307      	str	r3, [sp, #28]
 8008c4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c50:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c52:	4654      	mov	r4, sl
 8008c54:	2205      	movs	r2, #5
 8008c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c5a:	4853      	ldr	r0, [pc, #332]	@ (8008da8 <_vfiprintf_r+0x21c>)
 8008c5c:	f7f7 fae0 	bl	8000220 <memchr>
 8008c60:	9a04      	ldr	r2, [sp, #16]
 8008c62:	b9d8      	cbnz	r0, 8008c9c <_vfiprintf_r+0x110>
 8008c64:	06d1      	lsls	r1, r2, #27
 8008c66:	bf44      	itt	mi
 8008c68:	2320      	movmi	r3, #32
 8008c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c6e:	0713      	lsls	r3, r2, #28
 8008c70:	bf44      	itt	mi
 8008c72:	232b      	movmi	r3, #43	@ 0x2b
 8008c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c78:	f89a 3000 	ldrb.w	r3, [sl]
 8008c7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c7e:	d015      	beq.n	8008cac <_vfiprintf_r+0x120>
 8008c80:	9a07      	ldr	r2, [sp, #28]
 8008c82:	4654      	mov	r4, sl
 8008c84:	2000      	movs	r0, #0
 8008c86:	f04f 0c0a 	mov.w	ip, #10
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c90:	3b30      	subs	r3, #48	@ 0x30
 8008c92:	2b09      	cmp	r3, #9
 8008c94:	d94b      	bls.n	8008d2e <_vfiprintf_r+0x1a2>
 8008c96:	b1b0      	cbz	r0, 8008cc6 <_vfiprintf_r+0x13a>
 8008c98:	9207      	str	r2, [sp, #28]
 8008c9a:	e014      	b.n	8008cc6 <_vfiprintf_r+0x13a>
 8008c9c:	eba0 0308 	sub.w	r3, r0, r8
 8008ca0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	9304      	str	r3, [sp, #16]
 8008ca8:	46a2      	mov	sl, r4
 8008caa:	e7d2      	b.n	8008c52 <_vfiprintf_r+0xc6>
 8008cac:	9b03      	ldr	r3, [sp, #12]
 8008cae:	1d19      	adds	r1, r3, #4
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	9103      	str	r1, [sp, #12]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	bfbb      	ittet	lt
 8008cb8:	425b      	neglt	r3, r3
 8008cba:	f042 0202 	orrlt.w	r2, r2, #2
 8008cbe:	9307      	strge	r3, [sp, #28]
 8008cc0:	9307      	strlt	r3, [sp, #28]
 8008cc2:	bfb8      	it	lt
 8008cc4:	9204      	strlt	r2, [sp, #16]
 8008cc6:	7823      	ldrb	r3, [r4, #0]
 8008cc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cca:	d10a      	bne.n	8008ce2 <_vfiprintf_r+0x156>
 8008ccc:	7863      	ldrb	r3, [r4, #1]
 8008cce:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cd0:	d132      	bne.n	8008d38 <_vfiprintf_r+0x1ac>
 8008cd2:	9b03      	ldr	r3, [sp, #12]
 8008cd4:	1d1a      	adds	r2, r3, #4
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	9203      	str	r2, [sp, #12]
 8008cda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008cde:	3402      	adds	r4, #2
 8008ce0:	9305      	str	r3, [sp, #20]
 8008ce2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008db8 <_vfiprintf_r+0x22c>
 8008ce6:	7821      	ldrb	r1, [r4, #0]
 8008ce8:	2203      	movs	r2, #3
 8008cea:	4650      	mov	r0, sl
 8008cec:	f7f7 fa98 	bl	8000220 <memchr>
 8008cf0:	b138      	cbz	r0, 8008d02 <_vfiprintf_r+0x176>
 8008cf2:	9b04      	ldr	r3, [sp, #16]
 8008cf4:	eba0 000a 	sub.w	r0, r0, sl
 8008cf8:	2240      	movs	r2, #64	@ 0x40
 8008cfa:	4082      	lsls	r2, r0
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	3401      	adds	r4, #1
 8008d00:	9304      	str	r3, [sp, #16]
 8008d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d06:	4829      	ldr	r0, [pc, #164]	@ (8008dac <_vfiprintf_r+0x220>)
 8008d08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d0c:	2206      	movs	r2, #6
 8008d0e:	f7f7 fa87 	bl	8000220 <memchr>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d03f      	beq.n	8008d96 <_vfiprintf_r+0x20a>
 8008d16:	4b26      	ldr	r3, [pc, #152]	@ (8008db0 <_vfiprintf_r+0x224>)
 8008d18:	bb1b      	cbnz	r3, 8008d62 <_vfiprintf_r+0x1d6>
 8008d1a:	9b03      	ldr	r3, [sp, #12]
 8008d1c:	3307      	adds	r3, #7
 8008d1e:	f023 0307 	bic.w	r3, r3, #7
 8008d22:	3308      	adds	r3, #8
 8008d24:	9303      	str	r3, [sp, #12]
 8008d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d28:	443b      	add	r3, r7
 8008d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d2c:	e76a      	b.n	8008c04 <_vfiprintf_r+0x78>
 8008d2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d32:	460c      	mov	r4, r1
 8008d34:	2001      	movs	r0, #1
 8008d36:	e7a8      	b.n	8008c8a <_vfiprintf_r+0xfe>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	3401      	adds	r4, #1
 8008d3c:	9305      	str	r3, [sp, #20]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	f04f 0c0a 	mov.w	ip, #10
 8008d44:	4620      	mov	r0, r4
 8008d46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d4a:	3a30      	subs	r2, #48	@ 0x30
 8008d4c:	2a09      	cmp	r2, #9
 8008d4e:	d903      	bls.n	8008d58 <_vfiprintf_r+0x1cc>
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d0c6      	beq.n	8008ce2 <_vfiprintf_r+0x156>
 8008d54:	9105      	str	r1, [sp, #20]
 8008d56:	e7c4      	b.n	8008ce2 <_vfiprintf_r+0x156>
 8008d58:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e7f0      	b.n	8008d44 <_vfiprintf_r+0x1b8>
 8008d62:	ab03      	add	r3, sp, #12
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	462a      	mov	r2, r5
 8008d68:	4b12      	ldr	r3, [pc, #72]	@ (8008db4 <_vfiprintf_r+0x228>)
 8008d6a:	a904      	add	r1, sp, #16
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f7fe fb67 	bl	8007440 <_printf_float>
 8008d72:	4607      	mov	r7, r0
 8008d74:	1c78      	adds	r0, r7, #1
 8008d76:	d1d6      	bne.n	8008d26 <_vfiprintf_r+0x19a>
 8008d78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d7a:	07d9      	lsls	r1, r3, #31
 8008d7c:	d405      	bmi.n	8008d8a <_vfiprintf_r+0x1fe>
 8008d7e:	89ab      	ldrh	r3, [r5, #12]
 8008d80:	059a      	lsls	r2, r3, #22
 8008d82:	d402      	bmi.n	8008d8a <_vfiprintf_r+0x1fe>
 8008d84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d86:	f7ff f877 	bl	8007e78 <__retarget_lock_release_recursive>
 8008d8a:	89ab      	ldrh	r3, [r5, #12]
 8008d8c:	065b      	lsls	r3, r3, #25
 8008d8e:	f53f af1f 	bmi.w	8008bd0 <_vfiprintf_r+0x44>
 8008d92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d94:	e71e      	b.n	8008bd4 <_vfiprintf_r+0x48>
 8008d96:	ab03      	add	r3, sp, #12
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	462a      	mov	r2, r5
 8008d9c:	4b05      	ldr	r3, [pc, #20]	@ (8008db4 <_vfiprintf_r+0x228>)
 8008d9e:	a904      	add	r1, sp, #16
 8008da0:	4630      	mov	r0, r6
 8008da2:	f7fe fde5 	bl	8007970 <_printf_i>
 8008da6:	e7e4      	b.n	8008d72 <_vfiprintf_r+0x1e6>
 8008da8:	08009e2d 	.word	0x08009e2d
 8008dac:	08009e37 	.word	0x08009e37
 8008db0:	08007441 	.word	0x08007441
 8008db4:	08008b67 	.word	0x08008b67
 8008db8:	08009e33 	.word	0x08009e33

08008dbc <malloc>:
 8008dbc:	4b02      	ldr	r3, [pc, #8]	@ (8008dc8 <malloc+0xc>)
 8008dbe:	4601      	mov	r1, r0
 8008dc0:	6818      	ldr	r0, [r3, #0]
 8008dc2:	f000 b825 	b.w	8008e10 <_malloc_r>
 8008dc6:	bf00      	nop
 8008dc8:	20000018 	.word	0x20000018

08008dcc <sbrk_aligned>:
 8008dcc:	b570      	push	{r4, r5, r6, lr}
 8008dce:	4e0f      	ldr	r6, [pc, #60]	@ (8008e0c <sbrk_aligned+0x40>)
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	6831      	ldr	r1, [r6, #0]
 8008dd4:	4605      	mov	r5, r0
 8008dd6:	b911      	cbnz	r1, 8008dde <sbrk_aligned+0x12>
 8008dd8:	f000 fe3a 	bl	8009a50 <_sbrk_r>
 8008ddc:	6030      	str	r0, [r6, #0]
 8008dde:	4621      	mov	r1, r4
 8008de0:	4628      	mov	r0, r5
 8008de2:	f000 fe35 	bl	8009a50 <_sbrk_r>
 8008de6:	1c43      	adds	r3, r0, #1
 8008de8:	d103      	bne.n	8008df2 <sbrk_aligned+0x26>
 8008dea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008dee:	4620      	mov	r0, r4
 8008df0:	bd70      	pop	{r4, r5, r6, pc}
 8008df2:	1cc4      	adds	r4, r0, #3
 8008df4:	f024 0403 	bic.w	r4, r4, #3
 8008df8:	42a0      	cmp	r0, r4
 8008dfa:	d0f8      	beq.n	8008dee <sbrk_aligned+0x22>
 8008dfc:	1a21      	subs	r1, r4, r0
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f000 fe26 	bl	8009a50 <_sbrk_r>
 8008e04:	3001      	adds	r0, #1
 8008e06:	d1f2      	bne.n	8008dee <sbrk_aligned+0x22>
 8008e08:	e7ef      	b.n	8008dea <sbrk_aligned+0x1e>
 8008e0a:	bf00      	nop
 8008e0c:	20000530 	.word	0x20000530

08008e10 <_malloc_r>:
 8008e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e14:	1ccd      	adds	r5, r1, #3
 8008e16:	f025 0503 	bic.w	r5, r5, #3
 8008e1a:	3508      	adds	r5, #8
 8008e1c:	2d0c      	cmp	r5, #12
 8008e1e:	bf38      	it	cc
 8008e20:	250c      	movcc	r5, #12
 8008e22:	2d00      	cmp	r5, #0
 8008e24:	4606      	mov	r6, r0
 8008e26:	db01      	blt.n	8008e2c <_malloc_r+0x1c>
 8008e28:	42a9      	cmp	r1, r5
 8008e2a:	d904      	bls.n	8008e36 <_malloc_r+0x26>
 8008e2c:	230c      	movs	r3, #12
 8008e2e:	6033      	str	r3, [r6, #0]
 8008e30:	2000      	movs	r0, #0
 8008e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f0c <_malloc_r+0xfc>
 8008e3a:	f000 f915 	bl	8009068 <__malloc_lock>
 8008e3e:	f8d8 3000 	ldr.w	r3, [r8]
 8008e42:	461c      	mov	r4, r3
 8008e44:	bb44      	cbnz	r4, 8008e98 <_malloc_r+0x88>
 8008e46:	4629      	mov	r1, r5
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f7ff ffbf 	bl	8008dcc <sbrk_aligned>
 8008e4e:	1c43      	adds	r3, r0, #1
 8008e50:	4604      	mov	r4, r0
 8008e52:	d158      	bne.n	8008f06 <_malloc_r+0xf6>
 8008e54:	f8d8 4000 	ldr.w	r4, [r8]
 8008e58:	4627      	mov	r7, r4
 8008e5a:	2f00      	cmp	r7, #0
 8008e5c:	d143      	bne.n	8008ee6 <_malloc_r+0xd6>
 8008e5e:	2c00      	cmp	r4, #0
 8008e60:	d04b      	beq.n	8008efa <_malloc_r+0xea>
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	4639      	mov	r1, r7
 8008e66:	4630      	mov	r0, r6
 8008e68:	eb04 0903 	add.w	r9, r4, r3
 8008e6c:	f000 fdf0 	bl	8009a50 <_sbrk_r>
 8008e70:	4581      	cmp	r9, r0
 8008e72:	d142      	bne.n	8008efa <_malloc_r+0xea>
 8008e74:	6821      	ldr	r1, [r4, #0]
 8008e76:	1a6d      	subs	r5, r5, r1
 8008e78:	4629      	mov	r1, r5
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	f7ff ffa6 	bl	8008dcc <sbrk_aligned>
 8008e80:	3001      	adds	r0, #1
 8008e82:	d03a      	beq.n	8008efa <_malloc_r+0xea>
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	442b      	add	r3, r5
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	bb62      	cbnz	r2, 8008eec <_malloc_r+0xdc>
 8008e92:	f8c8 7000 	str.w	r7, [r8]
 8008e96:	e00f      	b.n	8008eb8 <_malloc_r+0xa8>
 8008e98:	6822      	ldr	r2, [r4, #0]
 8008e9a:	1b52      	subs	r2, r2, r5
 8008e9c:	d420      	bmi.n	8008ee0 <_malloc_r+0xd0>
 8008e9e:	2a0b      	cmp	r2, #11
 8008ea0:	d917      	bls.n	8008ed2 <_malloc_r+0xc2>
 8008ea2:	1961      	adds	r1, r4, r5
 8008ea4:	42a3      	cmp	r3, r4
 8008ea6:	6025      	str	r5, [r4, #0]
 8008ea8:	bf18      	it	ne
 8008eaa:	6059      	strne	r1, [r3, #4]
 8008eac:	6863      	ldr	r3, [r4, #4]
 8008eae:	bf08      	it	eq
 8008eb0:	f8c8 1000 	streq.w	r1, [r8]
 8008eb4:	5162      	str	r2, [r4, r5]
 8008eb6:	604b      	str	r3, [r1, #4]
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f000 f8db 	bl	8009074 <__malloc_unlock>
 8008ebe:	f104 000b 	add.w	r0, r4, #11
 8008ec2:	1d23      	adds	r3, r4, #4
 8008ec4:	f020 0007 	bic.w	r0, r0, #7
 8008ec8:	1ac2      	subs	r2, r0, r3
 8008eca:	bf1c      	itt	ne
 8008ecc:	1a1b      	subne	r3, r3, r0
 8008ece:	50a3      	strne	r3, [r4, r2]
 8008ed0:	e7af      	b.n	8008e32 <_malloc_r+0x22>
 8008ed2:	6862      	ldr	r2, [r4, #4]
 8008ed4:	42a3      	cmp	r3, r4
 8008ed6:	bf0c      	ite	eq
 8008ed8:	f8c8 2000 	streq.w	r2, [r8]
 8008edc:	605a      	strne	r2, [r3, #4]
 8008ede:	e7eb      	b.n	8008eb8 <_malloc_r+0xa8>
 8008ee0:	4623      	mov	r3, r4
 8008ee2:	6864      	ldr	r4, [r4, #4]
 8008ee4:	e7ae      	b.n	8008e44 <_malloc_r+0x34>
 8008ee6:	463c      	mov	r4, r7
 8008ee8:	687f      	ldr	r7, [r7, #4]
 8008eea:	e7b6      	b.n	8008e5a <_malloc_r+0x4a>
 8008eec:	461a      	mov	r2, r3
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	42a3      	cmp	r3, r4
 8008ef2:	d1fb      	bne.n	8008eec <_malloc_r+0xdc>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	6053      	str	r3, [r2, #4]
 8008ef8:	e7de      	b.n	8008eb8 <_malloc_r+0xa8>
 8008efa:	230c      	movs	r3, #12
 8008efc:	6033      	str	r3, [r6, #0]
 8008efe:	4630      	mov	r0, r6
 8008f00:	f000 f8b8 	bl	8009074 <__malloc_unlock>
 8008f04:	e794      	b.n	8008e30 <_malloc_r+0x20>
 8008f06:	6005      	str	r5, [r0, #0]
 8008f08:	e7d6      	b.n	8008eb8 <_malloc_r+0xa8>
 8008f0a:	bf00      	nop
 8008f0c:	20000534 	.word	0x20000534

08008f10 <__sflush_r>:
 8008f10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f18:	0716      	lsls	r6, r2, #28
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	d454      	bmi.n	8008fca <__sflush_r+0xba>
 8008f20:	684b      	ldr	r3, [r1, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	dc02      	bgt.n	8008f2c <__sflush_r+0x1c>
 8008f26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	dd48      	ble.n	8008fbe <__sflush_r+0xae>
 8008f2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f2e:	2e00      	cmp	r6, #0
 8008f30:	d045      	beq.n	8008fbe <__sflush_r+0xae>
 8008f32:	2300      	movs	r3, #0
 8008f34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f38:	682f      	ldr	r7, [r5, #0]
 8008f3a:	6a21      	ldr	r1, [r4, #32]
 8008f3c:	602b      	str	r3, [r5, #0]
 8008f3e:	d030      	beq.n	8008fa2 <__sflush_r+0x92>
 8008f40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f42:	89a3      	ldrh	r3, [r4, #12]
 8008f44:	0759      	lsls	r1, r3, #29
 8008f46:	d505      	bpl.n	8008f54 <__sflush_r+0x44>
 8008f48:	6863      	ldr	r3, [r4, #4]
 8008f4a:	1ad2      	subs	r2, r2, r3
 8008f4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f4e:	b10b      	cbz	r3, 8008f54 <__sflush_r+0x44>
 8008f50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f52:	1ad2      	subs	r2, r2, r3
 8008f54:	2300      	movs	r3, #0
 8008f56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f58:	6a21      	ldr	r1, [r4, #32]
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	47b0      	blx	r6
 8008f5e:	1c43      	adds	r3, r0, #1
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	d106      	bne.n	8008f72 <__sflush_r+0x62>
 8008f64:	6829      	ldr	r1, [r5, #0]
 8008f66:	291d      	cmp	r1, #29
 8008f68:	d82b      	bhi.n	8008fc2 <__sflush_r+0xb2>
 8008f6a:	4a2a      	ldr	r2, [pc, #168]	@ (8009014 <__sflush_r+0x104>)
 8008f6c:	40ca      	lsrs	r2, r1
 8008f6e:	07d6      	lsls	r6, r2, #31
 8008f70:	d527      	bpl.n	8008fc2 <__sflush_r+0xb2>
 8008f72:	2200      	movs	r2, #0
 8008f74:	6062      	str	r2, [r4, #4]
 8008f76:	04d9      	lsls	r1, r3, #19
 8008f78:	6922      	ldr	r2, [r4, #16]
 8008f7a:	6022      	str	r2, [r4, #0]
 8008f7c:	d504      	bpl.n	8008f88 <__sflush_r+0x78>
 8008f7e:	1c42      	adds	r2, r0, #1
 8008f80:	d101      	bne.n	8008f86 <__sflush_r+0x76>
 8008f82:	682b      	ldr	r3, [r5, #0]
 8008f84:	b903      	cbnz	r3, 8008f88 <__sflush_r+0x78>
 8008f86:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f8a:	602f      	str	r7, [r5, #0]
 8008f8c:	b1b9      	cbz	r1, 8008fbe <__sflush_r+0xae>
 8008f8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f92:	4299      	cmp	r1, r3
 8008f94:	d002      	beq.n	8008f9c <__sflush_r+0x8c>
 8008f96:	4628      	mov	r0, r5
 8008f98:	f000 fdde 	bl	8009b58 <_free_r>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fa0:	e00d      	b.n	8008fbe <__sflush_r+0xae>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	47b0      	blx	r6
 8008fa8:	4602      	mov	r2, r0
 8008faa:	1c50      	adds	r0, r2, #1
 8008fac:	d1c9      	bne.n	8008f42 <__sflush_r+0x32>
 8008fae:	682b      	ldr	r3, [r5, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d0c6      	beq.n	8008f42 <__sflush_r+0x32>
 8008fb4:	2b1d      	cmp	r3, #29
 8008fb6:	d001      	beq.n	8008fbc <__sflush_r+0xac>
 8008fb8:	2b16      	cmp	r3, #22
 8008fba:	d11e      	bne.n	8008ffa <__sflush_r+0xea>
 8008fbc:	602f      	str	r7, [r5, #0]
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	e022      	b.n	8009008 <__sflush_r+0xf8>
 8008fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fc6:	b21b      	sxth	r3, r3
 8008fc8:	e01b      	b.n	8009002 <__sflush_r+0xf2>
 8008fca:	690f      	ldr	r7, [r1, #16]
 8008fcc:	2f00      	cmp	r7, #0
 8008fce:	d0f6      	beq.n	8008fbe <__sflush_r+0xae>
 8008fd0:	0793      	lsls	r3, r2, #30
 8008fd2:	680e      	ldr	r6, [r1, #0]
 8008fd4:	bf08      	it	eq
 8008fd6:	694b      	ldreq	r3, [r1, #20]
 8008fd8:	600f      	str	r7, [r1, #0]
 8008fda:	bf18      	it	ne
 8008fdc:	2300      	movne	r3, #0
 8008fde:	eba6 0807 	sub.w	r8, r6, r7
 8008fe2:	608b      	str	r3, [r1, #8]
 8008fe4:	f1b8 0f00 	cmp.w	r8, #0
 8008fe8:	dde9      	ble.n	8008fbe <__sflush_r+0xae>
 8008fea:	6a21      	ldr	r1, [r4, #32]
 8008fec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008fee:	4643      	mov	r3, r8
 8008ff0:	463a      	mov	r2, r7
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	47b0      	blx	r6
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	dc08      	bgt.n	800900c <__sflush_r+0xfc>
 8008ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009002:	81a3      	strh	r3, [r4, #12]
 8009004:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800900c:	4407      	add	r7, r0
 800900e:	eba8 0800 	sub.w	r8, r8, r0
 8009012:	e7e7      	b.n	8008fe4 <__sflush_r+0xd4>
 8009014:	20400001 	.word	0x20400001

08009018 <_fflush_r>:
 8009018:	b538      	push	{r3, r4, r5, lr}
 800901a:	690b      	ldr	r3, [r1, #16]
 800901c:	4605      	mov	r5, r0
 800901e:	460c      	mov	r4, r1
 8009020:	b913      	cbnz	r3, 8009028 <_fflush_r+0x10>
 8009022:	2500      	movs	r5, #0
 8009024:	4628      	mov	r0, r5
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	b118      	cbz	r0, 8009032 <_fflush_r+0x1a>
 800902a:	6a03      	ldr	r3, [r0, #32]
 800902c:	b90b      	cbnz	r3, 8009032 <_fflush_r+0x1a>
 800902e:	f7fe fe49 	bl	8007cc4 <__sinit>
 8009032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d0f3      	beq.n	8009022 <_fflush_r+0xa>
 800903a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800903c:	07d0      	lsls	r0, r2, #31
 800903e:	d404      	bmi.n	800904a <_fflush_r+0x32>
 8009040:	0599      	lsls	r1, r3, #22
 8009042:	d402      	bmi.n	800904a <_fflush_r+0x32>
 8009044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009046:	f7fe ff16 	bl	8007e76 <__retarget_lock_acquire_recursive>
 800904a:	4628      	mov	r0, r5
 800904c:	4621      	mov	r1, r4
 800904e:	f7ff ff5f 	bl	8008f10 <__sflush_r>
 8009052:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009054:	07da      	lsls	r2, r3, #31
 8009056:	4605      	mov	r5, r0
 8009058:	d4e4      	bmi.n	8009024 <_fflush_r+0xc>
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	059b      	lsls	r3, r3, #22
 800905e:	d4e1      	bmi.n	8009024 <_fflush_r+0xc>
 8009060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009062:	f7fe ff09 	bl	8007e78 <__retarget_lock_release_recursive>
 8009066:	e7dd      	b.n	8009024 <_fflush_r+0xc>

08009068 <__malloc_lock>:
 8009068:	4801      	ldr	r0, [pc, #4]	@ (8009070 <__malloc_lock+0x8>)
 800906a:	f7fe bf04 	b.w	8007e76 <__retarget_lock_acquire_recursive>
 800906e:	bf00      	nop
 8009070:	2000052c 	.word	0x2000052c

08009074 <__malloc_unlock>:
 8009074:	4801      	ldr	r0, [pc, #4]	@ (800907c <__malloc_unlock+0x8>)
 8009076:	f7fe beff 	b.w	8007e78 <__retarget_lock_release_recursive>
 800907a:	bf00      	nop
 800907c:	2000052c 	.word	0x2000052c

08009080 <_Balloc>:
 8009080:	b570      	push	{r4, r5, r6, lr}
 8009082:	69c6      	ldr	r6, [r0, #28]
 8009084:	4604      	mov	r4, r0
 8009086:	460d      	mov	r5, r1
 8009088:	b976      	cbnz	r6, 80090a8 <_Balloc+0x28>
 800908a:	2010      	movs	r0, #16
 800908c:	f7ff fe96 	bl	8008dbc <malloc>
 8009090:	4602      	mov	r2, r0
 8009092:	61e0      	str	r0, [r4, #28]
 8009094:	b920      	cbnz	r0, 80090a0 <_Balloc+0x20>
 8009096:	4b18      	ldr	r3, [pc, #96]	@ (80090f8 <_Balloc+0x78>)
 8009098:	4818      	ldr	r0, [pc, #96]	@ (80090fc <_Balloc+0x7c>)
 800909a:	216b      	movs	r1, #107	@ 0x6b
 800909c:	f000 fd2a 	bl	8009af4 <__assert_func>
 80090a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090a4:	6006      	str	r6, [r0, #0]
 80090a6:	60c6      	str	r6, [r0, #12]
 80090a8:	69e6      	ldr	r6, [r4, #28]
 80090aa:	68f3      	ldr	r3, [r6, #12]
 80090ac:	b183      	cbz	r3, 80090d0 <_Balloc+0x50>
 80090ae:	69e3      	ldr	r3, [r4, #28]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090b6:	b9b8      	cbnz	r0, 80090e8 <_Balloc+0x68>
 80090b8:	2101      	movs	r1, #1
 80090ba:	fa01 f605 	lsl.w	r6, r1, r5
 80090be:	1d72      	adds	r2, r6, #5
 80090c0:	0092      	lsls	r2, r2, #2
 80090c2:	4620      	mov	r0, r4
 80090c4:	f000 fd34 	bl	8009b30 <_calloc_r>
 80090c8:	b160      	cbz	r0, 80090e4 <_Balloc+0x64>
 80090ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090ce:	e00e      	b.n	80090ee <_Balloc+0x6e>
 80090d0:	2221      	movs	r2, #33	@ 0x21
 80090d2:	2104      	movs	r1, #4
 80090d4:	4620      	mov	r0, r4
 80090d6:	f000 fd2b 	bl	8009b30 <_calloc_r>
 80090da:	69e3      	ldr	r3, [r4, #28]
 80090dc:	60f0      	str	r0, [r6, #12]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1e4      	bne.n	80090ae <_Balloc+0x2e>
 80090e4:	2000      	movs	r0, #0
 80090e6:	bd70      	pop	{r4, r5, r6, pc}
 80090e8:	6802      	ldr	r2, [r0, #0]
 80090ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090ee:	2300      	movs	r3, #0
 80090f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090f4:	e7f7      	b.n	80090e6 <_Balloc+0x66>
 80090f6:	bf00      	nop
 80090f8:	08009dad 	.word	0x08009dad
 80090fc:	08009e3e 	.word	0x08009e3e

08009100 <_Bfree>:
 8009100:	b570      	push	{r4, r5, r6, lr}
 8009102:	69c6      	ldr	r6, [r0, #28]
 8009104:	4605      	mov	r5, r0
 8009106:	460c      	mov	r4, r1
 8009108:	b976      	cbnz	r6, 8009128 <_Bfree+0x28>
 800910a:	2010      	movs	r0, #16
 800910c:	f7ff fe56 	bl	8008dbc <malloc>
 8009110:	4602      	mov	r2, r0
 8009112:	61e8      	str	r0, [r5, #28]
 8009114:	b920      	cbnz	r0, 8009120 <_Bfree+0x20>
 8009116:	4b09      	ldr	r3, [pc, #36]	@ (800913c <_Bfree+0x3c>)
 8009118:	4809      	ldr	r0, [pc, #36]	@ (8009140 <_Bfree+0x40>)
 800911a:	218f      	movs	r1, #143	@ 0x8f
 800911c:	f000 fcea 	bl	8009af4 <__assert_func>
 8009120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009124:	6006      	str	r6, [r0, #0]
 8009126:	60c6      	str	r6, [r0, #12]
 8009128:	b13c      	cbz	r4, 800913a <_Bfree+0x3a>
 800912a:	69eb      	ldr	r3, [r5, #28]
 800912c:	6862      	ldr	r2, [r4, #4]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009134:	6021      	str	r1, [r4, #0]
 8009136:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800913a:	bd70      	pop	{r4, r5, r6, pc}
 800913c:	08009dad 	.word	0x08009dad
 8009140:	08009e3e 	.word	0x08009e3e

08009144 <__multadd>:
 8009144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009148:	690d      	ldr	r5, [r1, #16]
 800914a:	4607      	mov	r7, r0
 800914c:	460c      	mov	r4, r1
 800914e:	461e      	mov	r6, r3
 8009150:	f101 0c14 	add.w	ip, r1, #20
 8009154:	2000      	movs	r0, #0
 8009156:	f8dc 3000 	ldr.w	r3, [ip]
 800915a:	b299      	uxth	r1, r3
 800915c:	fb02 6101 	mla	r1, r2, r1, r6
 8009160:	0c1e      	lsrs	r6, r3, #16
 8009162:	0c0b      	lsrs	r3, r1, #16
 8009164:	fb02 3306 	mla	r3, r2, r6, r3
 8009168:	b289      	uxth	r1, r1
 800916a:	3001      	adds	r0, #1
 800916c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009170:	4285      	cmp	r5, r0
 8009172:	f84c 1b04 	str.w	r1, [ip], #4
 8009176:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800917a:	dcec      	bgt.n	8009156 <__multadd+0x12>
 800917c:	b30e      	cbz	r6, 80091c2 <__multadd+0x7e>
 800917e:	68a3      	ldr	r3, [r4, #8]
 8009180:	42ab      	cmp	r3, r5
 8009182:	dc19      	bgt.n	80091b8 <__multadd+0x74>
 8009184:	6861      	ldr	r1, [r4, #4]
 8009186:	4638      	mov	r0, r7
 8009188:	3101      	adds	r1, #1
 800918a:	f7ff ff79 	bl	8009080 <_Balloc>
 800918e:	4680      	mov	r8, r0
 8009190:	b928      	cbnz	r0, 800919e <__multadd+0x5a>
 8009192:	4602      	mov	r2, r0
 8009194:	4b0c      	ldr	r3, [pc, #48]	@ (80091c8 <__multadd+0x84>)
 8009196:	480d      	ldr	r0, [pc, #52]	@ (80091cc <__multadd+0x88>)
 8009198:	21ba      	movs	r1, #186	@ 0xba
 800919a:	f000 fcab 	bl	8009af4 <__assert_func>
 800919e:	6922      	ldr	r2, [r4, #16]
 80091a0:	3202      	adds	r2, #2
 80091a2:	f104 010c 	add.w	r1, r4, #12
 80091a6:	0092      	lsls	r2, r2, #2
 80091a8:	300c      	adds	r0, #12
 80091aa:	f000 fc95 	bl	8009ad8 <memcpy>
 80091ae:	4621      	mov	r1, r4
 80091b0:	4638      	mov	r0, r7
 80091b2:	f7ff ffa5 	bl	8009100 <_Bfree>
 80091b6:	4644      	mov	r4, r8
 80091b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091bc:	3501      	adds	r5, #1
 80091be:	615e      	str	r6, [r3, #20]
 80091c0:	6125      	str	r5, [r4, #16]
 80091c2:	4620      	mov	r0, r4
 80091c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c8:	08009e1c 	.word	0x08009e1c
 80091cc:	08009e3e 	.word	0x08009e3e

080091d0 <__hi0bits>:
 80091d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80091d4:	4603      	mov	r3, r0
 80091d6:	bf36      	itet	cc
 80091d8:	0403      	lslcc	r3, r0, #16
 80091da:	2000      	movcs	r0, #0
 80091dc:	2010      	movcc	r0, #16
 80091de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091e2:	bf3c      	itt	cc
 80091e4:	021b      	lslcc	r3, r3, #8
 80091e6:	3008      	addcc	r0, #8
 80091e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091ec:	bf3c      	itt	cc
 80091ee:	011b      	lslcc	r3, r3, #4
 80091f0:	3004      	addcc	r0, #4
 80091f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091f6:	bf3c      	itt	cc
 80091f8:	009b      	lslcc	r3, r3, #2
 80091fa:	3002      	addcc	r0, #2
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	db05      	blt.n	800920c <__hi0bits+0x3c>
 8009200:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009204:	f100 0001 	add.w	r0, r0, #1
 8009208:	bf08      	it	eq
 800920a:	2020      	moveq	r0, #32
 800920c:	4770      	bx	lr

0800920e <__lo0bits>:
 800920e:	6803      	ldr	r3, [r0, #0]
 8009210:	4602      	mov	r2, r0
 8009212:	f013 0007 	ands.w	r0, r3, #7
 8009216:	d00b      	beq.n	8009230 <__lo0bits+0x22>
 8009218:	07d9      	lsls	r1, r3, #31
 800921a:	d421      	bmi.n	8009260 <__lo0bits+0x52>
 800921c:	0798      	lsls	r0, r3, #30
 800921e:	bf49      	itett	mi
 8009220:	085b      	lsrmi	r3, r3, #1
 8009222:	089b      	lsrpl	r3, r3, #2
 8009224:	2001      	movmi	r0, #1
 8009226:	6013      	strmi	r3, [r2, #0]
 8009228:	bf5c      	itt	pl
 800922a:	6013      	strpl	r3, [r2, #0]
 800922c:	2002      	movpl	r0, #2
 800922e:	4770      	bx	lr
 8009230:	b299      	uxth	r1, r3
 8009232:	b909      	cbnz	r1, 8009238 <__lo0bits+0x2a>
 8009234:	0c1b      	lsrs	r3, r3, #16
 8009236:	2010      	movs	r0, #16
 8009238:	b2d9      	uxtb	r1, r3
 800923a:	b909      	cbnz	r1, 8009240 <__lo0bits+0x32>
 800923c:	3008      	adds	r0, #8
 800923e:	0a1b      	lsrs	r3, r3, #8
 8009240:	0719      	lsls	r1, r3, #28
 8009242:	bf04      	itt	eq
 8009244:	091b      	lsreq	r3, r3, #4
 8009246:	3004      	addeq	r0, #4
 8009248:	0799      	lsls	r1, r3, #30
 800924a:	bf04      	itt	eq
 800924c:	089b      	lsreq	r3, r3, #2
 800924e:	3002      	addeq	r0, #2
 8009250:	07d9      	lsls	r1, r3, #31
 8009252:	d403      	bmi.n	800925c <__lo0bits+0x4e>
 8009254:	085b      	lsrs	r3, r3, #1
 8009256:	f100 0001 	add.w	r0, r0, #1
 800925a:	d003      	beq.n	8009264 <__lo0bits+0x56>
 800925c:	6013      	str	r3, [r2, #0]
 800925e:	4770      	bx	lr
 8009260:	2000      	movs	r0, #0
 8009262:	4770      	bx	lr
 8009264:	2020      	movs	r0, #32
 8009266:	4770      	bx	lr

08009268 <__i2b>:
 8009268:	b510      	push	{r4, lr}
 800926a:	460c      	mov	r4, r1
 800926c:	2101      	movs	r1, #1
 800926e:	f7ff ff07 	bl	8009080 <_Balloc>
 8009272:	4602      	mov	r2, r0
 8009274:	b928      	cbnz	r0, 8009282 <__i2b+0x1a>
 8009276:	4b05      	ldr	r3, [pc, #20]	@ (800928c <__i2b+0x24>)
 8009278:	4805      	ldr	r0, [pc, #20]	@ (8009290 <__i2b+0x28>)
 800927a:	f240 1145 	movw	r1, #325	@ 0x145
 800927e:	f000 fc39 	bl	8009af4 <__assert_func>
 8009282:	2301      	movs	r3, #1
 8009284:	6144      	str	r4, [r0, #20]
 8009286:	6103      	str	r3, [r0, #16]
 8009288:	bd10      	pop	{r4, pc}
 800928a:	bf00      	nop
 800928c:	08009e1c 	.word	0x08009e1c
 8009290:	08009e3e 	.word	0x08009e3e

08009294 <__multiply>:
 8009294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009298:	4617      	mov	r7, r2
 800929a:	690a      	ldr	r2, [r1, #16]
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	429a      	cmp	r2, r3
 80092a0:	bfa8      	it	ge
 80092a2:	463b      	movge	r3, r7
 80092a4:	4689      	mov	r9, r1
 80092a6:	bfa4      	itt	ge
 80092a8:	460f      	movge	r7, r1
 80092aa:	4699      	movge	r9, r3
 80092ac:	693d      	ldr	r5, [r7, #16]
 80092ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	6879      	ldr	r1, [r7, #4]
 80092b6:	eb05 060a 	add.w	r6, r5, sl
 80092ba:	42b3      	cmp	r3, r6
 80092bc:	b085      	sub	sp, #20
 80092be:	bfb8      	it	lt
 80092c0:	3101      	addlt	r1, #1
 80092c2:	f7ff fedd 	bl	8009080 <_Balloc>
 80092c6:	b930      	cbnz	r0, 80092d6 <__multiply+0x42>
 80092c8:	4602      	mov	r2, r0
 80092ca:	4b41      	ldr	r3, [pc, #260]	@ (80093d0 <__multiply+0x13c>)
 80092cc:	4841      	ldr	r0, [pc, #260]	@ (80093d4 <__multiply+0x140>)
 80092ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80092d2:	f000 fc0f 	bl	8009af4 <__assert_func>
 80092d6:	f100 0414 	add.w	r4, r0, #20
 80092da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80092de:	4623      	mov	r3, r4
 80092e0:	2200      	movs	r2, #0
 80092e2:	4573      	cmp	r3, lr
 80092e4:	d320      	bcc.n	8009328 <__multiply+0x94>
 80092e6:	f107 0814 	add.w	r8, r7, #20
 80092ea:	f109 0114 	add.w	r1, r9, #20
 80092ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80092f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80092f6:	9302      	str	r3, [sp, #8]
 80092f8:	1beb      	subs	r3, r5, r7
 80092fa:	3b15      	subs	r3, #21
 80092fc:	f023 0303 	bic.w	r3, r3, #3
 8009300:	3304      	adds	r3, #4
 8009302:	3715      	adds	r7, #21
 8009304:	42bd      	cmp	r5, r7
 8009306:	bf38      	it	cc
 8009308:	2304      	movcc	r3, #4
 800930a:	9301      	str	r3, [sp, #4]
 800930c:	9b02      	ldr	r3, [sp, #8]
 800930e:	9103      	str	r1, [sp, #12]
 8009310:	428b      	cmp	r3, r1
 8009312:	d80c      	bhi.n	800932e <__multiply+0x9a>
 8009314:	2e00      	cmp	r6, #0
 8009316:	dd03      	ble.n	8009320 <__multiply+0x8c>
 8009318:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800931c:	2b00      	cmp	r3, #0
 800931e:	d055      	beq.n	80093cc <__multiply+0x138>
 8009320:	6106      	str	r6, [r0, #16]
 8009322:	b005      	add	sp, #20
 8009324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009328:	f843 2b04 	str.w	r2, [r3], #4
 800932c:	e7d9      	b.n	80092e2 <__multiply+0x4e>
 800932e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009332:	f1ba 0f00 	cmp.w	sl, #0
 8009336:	d01f      	beq.n	8009378 <__multiply+0xe4>
 8009338:	46c4      	mov	ip, r8
 800933a:	46a1      	mov	r9, r4
 800933c:	2700      	movs	r7, #0
 800933e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009342:	f8d9 3000 	ldr.w	r3, [r9]
 8009346:	fa1f fb82 	uxth.w	fp, r2
 800934a:	b29b      	uxth	r3, r3
 800934c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009350:	443b      	add	r3, r7
 8009352:	f8d9 7000 	ldr.w	r7, [r9]
 8009356:	0c12      	lsrs	r2, r2, #16
 8009358:	0c3f      	lsrs	r7, r7, #16
 800935a:	fb0a 7202 	mla	r2, sl, r2, r7
 800935e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009362:	b29b      	uxth	r3, r3
 8009364:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009368:	4565      	cmp	r5, ip
 800936a:	f849 3b04 	str.w	r3, [r9], #4
 800936e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009372:	d8e4      	bhi.n	800933e <__multiply+0xaa>
 8009374:	9b01      	ldr	r3, [sp, #4]
 8009376:	50e7      	str	r7, [r4, r3]
 8009378:	9b03      	ldr	r3, [sp, #12]
 800937a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800937e:	3104      	adds	r1, #4
 8009380:	f1b9 0f00 	cmp.w	r9, #0
 8009384:	d020      	beq.n	80093c8 <__multiply+0x134>
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	4647      	mov	r7, r8
 800938a:	46a4      	mov	ip, r4
 800938c:	f04f 0a00 	mov.w	sl, #0
 8009390:	f8b7 b000 	ldrh.w	fp, [r7]
 8009394:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009398:	fb09 220b 	mla	r2, r9, fp, r2
 800939c:	4452      	add	r2, sl
 800939e:	b29b      	uxth	r3, r3
 80093a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093a4:	f84c 3b04 	str.w	r3, [ip], #4
 80093a8:	f857 3b04 	ldr.w	r3, [r7], #4
 80093ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093b0:	f8bc 3000 	ldrh.w	r3, [ip]
 80093b4:	fb09 330a 	mla	r3, r9, sl, r3
 80093b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80093bc:	42bd      	cmp	r5, r7
 80093be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093c2:	d8e5      	bhi.n	8009390 <__multiply+0xfc>
 80093c4:	9a01      	ldr	r2, [sp, #4]
 80093c6:	50a3      	str	r3, [r4, r2]
 80093c8:	3404      	adds	r4, #4
 80093ca:	e79f      	b.n	800930c <__multiply+0x78>
 80093cc:	3e01      	subs	r6, #1
 80093ce:	e7a1      	b.n	8009314 <__multiply+0x80>
 80093d0:	08009e1c 	.word	0x08009e1c
 80093d4:	08009e3e 	.word	0x08009e3e

080093d8 <__pow5mult>:
 80093d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093dc:	4615      	mov	r5, r2
 80093de:	f012 0203 	ands.w	r2, r2, #3
 80093e2:	4607      	mov	r7, r0
 80093e4:	460e      	mov	r6, r1
 80093e6:	d007      	beq.n	80093f8 <__pow5mult+0x20>
 80093e8:	4c25      	ldr	r4, [pc, #148]	@ (8009480 <__pow5mult+0xa8>)
 80093ea:	3a01      	subs	r2, #1
 80093ec:	2300      	movs	r3, #0
 80093ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093f2:	f7ff fea7 	bl	8009144 <__multadd>
 80093f6:	4606      	mov	r6, r0
 80093f8:	10ad      	asrs	r5, r5, #2
 80093fa:	d03d      	beq.n	8009478 <__pow5mult+0xa0>
 80093fc:	69fc      	ldr	r4, [r7, #28]
 80093fe:	b97c      	cbnz	r4, 8009420 <__pow5mult+0x48>
 8009400:	2010      	movs	r0, #16
 8009402:	f7ff fcdb 	bl	8008dbc <malloc>
 8009406:	4602      	mov	r2, r0
 8009408:	61f8      	str	r0, [r7, #28]
 800940a:	b928      	cbnz	r0, 8009418 <__pow5mult+0x40>
 800940c:	4b1d      	ldr	r3, [pc, #116]	@ (8009484 <__pow5mult+0xac>)
 800940e:	481e      	ldr	r0, [pc, #120]	@ (8009488 <__pow5mult+0xb0>)
 8009410:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009414:	f000 fb6e 	bl	8009af4 <__assert_func>
 8009418:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800941c:	6004      	str	r4, [r0, #0]
 800941e:	60c4      	str	r4, [r0, #12]
 8009420:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009424:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009428:	b94c      	cbnz	r4, 800943e <__pow5mult+0x66>
 800942a:	f240 2171 	movw	r1, #625	@ 0x271
 800942e:	4638      	mov	r0, r7
 8009430:	f7ff ff1a 	bl	8009268 <__i2b>
 8009434:	2300      	movs	r3, #0
 8009436:	f8c8 0008 	str.w	r0, [r8, #8]
 800943a:	4604      	mov	r4, r0
 800943c:	6003      	str	r3, [r0, #0]
 800943e:	f04f 0900 	mov.w	r9, #0
 8009442:	07eb      	lsls	r3, r5, #31
 8009444:	d50a      	bpl.n	800945c <__pow5mult+0x84>
 8009446:	4631      	mov	r1, r6
 8009448:	4622      	mov	r2, r4
 800944a:	4638      	mov	r0, r7
 800944c:	f7ff ff22 	bl	8009294 <__multiply>
 8009450:	4631      	mov	r1, r6
 8009452:	4680      	mov	r8, r0
 8009454:	4638      	mov	r0, r7
 8009456:	f7ff fe53 	bl	8009100 <_Bfree>
 800945a:	4646      	mov	r6, r8
 800945c:	106d      	asrs	r5, r5, #1
 800945e:	d00b      	beq.n	8009478 <__pow5mult+0xa0>
 8009460:	6820      	ldr	r0, [r4, #0]
 8009462:	b938      	cbnz	r0, 8009474 <__pow5mult+0x9c>
 8009464:	4622      	mov	r2, r4
 8009466:	4621      	mov	r1, r4
 8009468:	4638      	mov	r0, r7
 800946a:	f7ff ff13 	bl	8009294 <__multiply>
 800946e:	6020      	str	r0, [r4, #0]
 8009470:	f8c0 9000 	str.w	r9, [r0]
 8009474:	4604      	mov	r4, r0
 8009476:	e7e4      	b.n	8009442 <__pow5mult+0x6a>
 8009478:	4630      	mov	r0, r6
 800947a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800947e:	bf00      	nop
 8009480:	08009ee0 	.word	0x08009ee0
 8009484:	08009dad 	.word	0x08009dad
 8009488:	08009e3e 	.word	0x08009e3e

0800948c <__lshift>:
 800948c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009490:	460c      	mov	r4, r1
 8009492:	6849      	ldr	r1, [r1, #4]
 8009494:	6923      	ldr	r3, [r4, #16]
 8009496:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800949a:	68a3      	ldr	r3, [r4, #8]
 800949c:	4607      	mov	r7, r0
 800949e:	4691      	mov	r9, r2
 80094a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094a4:	f108 0601 	add.w	r6, r8, #1
 80094a8:	42b3      	cmp	r3, r6
 80094aa:	db0b      	blt.n	80094c4 <__lshift+0x38>
 80094ac:	4638      	mov	r0, r7
 80094ae:	f7ff fde7 	bl	8009080 <_Balloc>
 80094b2:	4605      	mov	r5, r0
 80094b4:	b948      	cbnz	r0, 80094ca <__lshift+0x3e>
 80094b6:	4602      	mov	r2, r0
 80094b8:	4b28      	ldr	r3, [pc, #160]	@ (800955c <__lshift+0xd0>)
 80094ba:	4829      	ldr	r0, [pc, #164]	@ (8009560 <__lshift+0xd4>)
 80094bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80094c0:	f000 fb18 	bl	8009af4 <__assert_func>
 80094c4:	3101      	adds	r1, #1
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	e7ee      	b.n	80094a8 <__lshift+0x1c>
 80094ca:	2300      	movs	r3, #0
 80094cc:	f100 0114 	add.w	r1, r0, #20
 80094d0:	f100 0210 	add.w	r2, r0, #16
 80094d4:	4618      	mov	r0, r3
 80094d6:	4553      	cmp	r3, sl
 80094d8:	db33      	blt.n	8009542 <__lshift+0xb6>
 80094da:	6920      	ldr	r0, [r4, #16]
 80094dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094e0:	f104 0314 	add.w	r3, r4, #20
 80094e4:	f019 091f 	ands.w	r9, r9, #31
 80094e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80094f0:	d02b      	beq.n	800954a <__lshift+0xbe>
 80094f2:	f1c9 0e20 	rsb	lr, r9, #32
 80094f6:	468a      	mov	sl, r1
 80094f8:	2200      	movs	r2, #0
 80094fa:	6818      	ldr	r0, [r3, #0]
 80094fc:	fa00 f009 	lsl.w	r0, r0, r9
 8009500:	4310      	orrs	r0, r2
 8009502:	f84a 0b04 	str.w	r0, [sl], #4
 8009506:	f853 2b04 	ldr.w	r2, [r3], #4
 800950a:	459c      	cmp	ip, r3
 800950c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009510:	d8f3      	bhi.n	80094fa <__lshift+0x6e>
 8009512:	ebac 0304 	sub.w	r3, ip, r4
 8009516:	3b15      	subs	r3, #21
 8009518:	f023 0303 	bic.w	r3, r3, #3
 800951c:	3304      	adds	r3, #4
 800951e:	f104 0015 	add.w	r0, r4, #21
 8009522:	4560      	cmp	r0, ip
 8009524:	bf88      	it	hi
 8009526:	2304      	movhi	r3, #4
 8009528:	50ca      	str	r2, [r1, r3]
 800952a:	b10a      	cbz	r2, 8009530 <__lshift+0xa4>
 800952c:	f108 0602 	add.w	r6, r8, #2
 8009530:	3e01      	subs	r6, #1
 8009532:	4638      	mov	r0, r7
 8009534:	612e      	str	r6, [r5, #16]
 8009536:	4621      	mov	r1, r4
 8009538:	f7ff fde2 	bl	8009100 <_Bfree>
 800953c:	4628      	mov	r0, r5
 800953e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009542:	f842 0f04 	str.w	r0, [r2, #4]!
 8009546:	3301      	adds	r3, #1
 8009548:	e7c5      	b.n	80094d6 <__lshift+0x4a>
 800954a:	3904      	subs	r1, #4
 800954c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009550:	f841 2f04 	str.w	r2, [r1, #4]!
 8009554:	459c      	cmp	ip, r3
 8009556:	d8f9      	bhi.n	800954c <__lshift+0xc0>
 8009558:	e7ea      	b.n	8009530 <__lshift+0xa4>
 800955a:	bf00      	nop
 800955c:	08009e1c 	.word	0x08009e1c
 8009560:	08009e3e 	.word	0x08009e3e

08009564 <__mcmp>:
 8009564:	690a      	ldr	r2, [r1, #16]
 8009566:	4603      	mov	r3, r0
 8009568:	6900      	ldr	r0, [r0, #16]
 800956a:	1a80      	subs	r0, r0, r2
 800956c:	b530      	push	{r4, r5, lr}
 800956e:	d10e      	bne.n	800958e <__mcmp+0x2a>
 8009570:	3314      	adds	r3, #20
 8009572:	3114      	adds	r1, #20
 8009574:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009578:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800957c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009580:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009584:	4295      	cmp	r5, r2
 8009586:	d003      	beq.n	8009590 <__mcmp+0x2c>
 8009588:	d205      	bcs.n	8009596 <__mcmp+0x32>
 800958a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800958e:	bd30      	pop	{r4, r5, pc}
 8009590:	42a3      	cmp	r3, r4
 8009592:	d3f3      	bcc.n	800957c <__mcmp+0x18>
 8009594:	e7fb      	b.n	800958e <__mcmp+0x2a>
 8009596:	2001      	movs	r0, #1
 8009598:	e7f9      	b.n	800958e <__mcmp+0x2a>
	...

0800959c <__mdiff>:
 800959c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a0:	4689      	mov	r9, r1
 80095a2:	4606      	mov	r6, r0
 80095a4:	4611      	mov	r1, r2
 80095a6:	4648      	mov	r0, r9
 80095a8:	4614      	mov	r4, r2
 80095aa:	f7ff ffdb 	bl	8009564 <__mcmp>
 80095ae:	1e05      	subs	r5, r0, #0
 80095b0:	d112      	bne.n	80095d8 <__mdiff+0x3c>
 80095b2:	4629      	mov	r1, r5
 80095b4:	4630      	mov	r0, r6
 80095b6:	f7ff fd63 	bl	8009080 <_Balloc>
 80095ba:	4602      	mov	r2, r0
 80095bc:	b928      	cbnz	r0, 80095ca <__mdiff+0x2e>
 80095be:	4b3f      	ldr	r3, [pc, #252]	@ (80096bc <__mdiff+0x120>)
 80095c0:	f240 2137 	movw	r1, #567	@ 0x237
 80095c4:	483e      	ldr	r0, [pc, #248]	@ (80096c0 <__mdiff+0x124>)
 80095c6:	f000 fa95 	bl	8009af4 <__assert_func>
 80095ca:	2301      	movs	r3, #1
 80095cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095d0:	4610      	mov	r0, r2
 80095d2:	b003      	add	sp, #12
 80095d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d8:	bfbc      	itt	lt
 80095da:	464b      	movlt	r3, r9
 80095dc:	46a1      	movlt	r9, r4
 80095de:	4630      	mov	r0, r6
 80095e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80095e4:	bfba      	itte	lt
 80095e6:	461c      	movlt	r4, r3
 80095e8:	2501      	movlt	r5, #1
 80095ea:	2500      	movge	r5, #0
 80095ec:	f7ff fd48 	bl	8009080 <_Balloc>
 80095f0:	4602      	mov	r2, r0
 80095f2:	b918      	cbnz	r0, 80095fc <__mdiff+0x60>
 80095f4:	4b31      	ldr	r3, [pc, #196]	@ (80096bc <__mdiff+0x120>)
 80095f6:	f240 2145 	movw	r1, #581	@ 0x245
 80095fa:	e7e3      	b.n	80095c4 <__mdiff+0x28>
 80095fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009600:	6926      	ldr	r6, [r4, #16]
 8009602:	60c5      	str	r5, [r0, #12]
 8009604:	f109 0310 	add.w	r3, r9, #16
 8009608:	f109 0514 	add.w	r5, r9, #20
 800960c:	f104 0e14 	add.w	lr, r4, #20
 8009610:	f100 0b14 	add.w	fp, r0, #20
 8009614:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009618:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800961c:	9301      	str	r3, [sp, #4]
 800961e:	46d9      	mov	r9, fp
 8009620:	f04f 0c00 	mov.w	ip, #0
 8009624:	9b01      	ldr	r3, [sp, #4]
 8009626:	f85e 0b04 	ldr.w	r0, [lr], #4
 800962a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800962e:	9301      	str	r3, [sp, #4]
 8009630:	fa1f f38a 	uxth.w	r3, sl
 8009634:	4619      	mov	r1, r3
 8009636:	b283      	uxth	r3, r0
 8009638:	1acb      	subs	r3, r1, r3
 800963a:	0c00      	lsrs	r0, r0, #16
 800963c:	4463      	add	r3, ip
 800963e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009642:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009646:	b29b      	uxth	r3, r3
 8009648:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800964c:	4576      	cmp	r6, lr
 800964e:	f849 3b04 	str.w	r3, [r9], #4
 8009652:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009656:	d8e5      	bhi.n	8009624 <__mdiff+0x88>
 8009658:	1b33      	subs	r3, r6, r4
 800965a:	3b15      	subs	r3, #21
 800965c:	f023 0303 	bic.w	r3, r3, #3
 8009660:	3415      	adds	r4, #21
 8009662:	3304      	adds	r3, #4
 8009664:	42a6      	cmp	r6, r4
 8009666:	bf38      	it	cc
 8009668:	2304      	movcc	r3, #4
 800966a:	441d      	add	r5, r3
 800966c:	445b      	add	r3, fp
 800966e:	461e      	mov	r6, r3
 8009670:	462c      	mov	r4, r5
 8009672:	4544      	cmp	r4, r8
 8009674:	d30e      	bcc.n	8009694 <__mdiff+0xf8>
 8009676:	f108 0103 	add.w	r1, r8, #3
 800967a:	1b49      	subs	r1, r1, r5
 800967c:	f021 0103 	bic.w	r1, r1, #3
 8009680:	3d03      	subs	r5, #3
 8009682:	45a8      	cmp	r8, r5
 8009684:	bf38      	it	cc
 8009686:	2100      	movcc	r1, #0
 8009688:	440b      	add	r3, r1
 800968a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800968e:	b191      	cbz	r1, 80096b6 <__mdiff+0x11a>
 8009690:	6117      	str	r7, [r2, #16]
 8009692:	e79d      	b.n	80095d0 <__mdiff+0x34>
 8009694:	f854 1b04 	ldr.w	r1, [r4], #4
 8009698:	46e6      	mov	lr, ip
 800969a:	0c08      	lsrs	r0, r1, #16
 800969c:	fa1c fc81 	uxtah	ip, ip, r1
 80096a0:	4471      	add	r1, lr
 80096a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80096a6:	b289      	uxth	r1, r1
 80096a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80096ac:	f846 1b04 	str.w	r1, [r6], #4
 80096b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096b4:	e7dd      	b.n	8009672 <__mdiff+0xd6>
 80096b6:	3f01      	subs	r7, #1
 80096b8:	e7e7      	b.n	800968a <__mdiff+0xee>
 80096ba:	bf00      	nop
 80096bc:	08009e1c 	.word	0x08009e1c
 80096c0:	08009e3e 	.word	0x08009e3e

080096c4 <__d2b>:
 80096c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096c8:	460f      	mov	r7, r1
 80096ca:	2101      	movs	r1, #1
 80096cc:	ec59 8b10 	vmov	r8, r9, d0
 80096d0:	4616      	mov	r6, r2
 80096d2:	f7ff fcd5 	bl	8009080 <_Balloc>
 80096d6:	4604      	mov	r4, r0
 80096d8:	b930      	cbnz	r0, 80096e8 <__d2b+0x24>
 80096da:	4602      	mov	r2, r0
 80096dc:	4b23      	ldr	r3, [pc, #140]	@ (800976c <__d2b+0xa8>)
 80096de:	4824      	ldr	r0, [pc, #144]	@ (8009770 <__d2b+0xac>)
 80096e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80096e4:	f000 fa06 	bl	8009af4 <__assert_func>
 80096e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80096ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096f0:	b10d      	cbz	r5, 80096f6 <__d2b+0x32>
 80096f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	f1b8 0300 	subs.w	r3, r8, #0
 80096fc:	d023      	beq.n	8009746 <__d2b+0x82>
 80096fe:	4668      	mov	r0, sp
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	f7ff fd84 	bl	800920e <__lo0bits>
 8009706:	e9dd 1200 	ldrd	r1, r2, [sp]
 800970a:	b1d0      	cbz	r0, 8009742 <__d2b+0x7e>
 800970c:	f1c0 0320 	rsb	r3, r0, #32
 8009710:	fa02 f303 	lsl.w	r3, r2, r3
 8009714:	430b      	orrs	r3, r1
 8009716:	40c2      	lsrs	r2, r0
 8009718:	6163      	str	r3, [r4, #20]
 800971a:	9201      	str	r2, [sp, #4]
 800971c:	9b01      	ldr	r3, [sp, #4]
 800971e:	61a3      	str	r3, [r4, #24]
 8009720:	2b00      	cmp	r3, #0
 8009722:	bf0c      	ite	eq
 8009724:	2201      	moveq	r2, #1
 8009726:	2202      	movne	r2, #2
 8009728:	6122      	str	r2, [r4, #16]
 800972a:	b1a5      	cbz	r5, 8009756 <__d2b+0x92>
 800972c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009730:	4405      	add	r5, r0
 8009732:	603d      	str	r5, [r7, #0]
 8009734:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009738:	6030      	str	r0, [r6, #0]
 800973a:	4620      	mov	r0, r4
 800973c:	b003      	add	sp, #12
 800973e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009742:	6161      	str	r1, [r4, #20]
 8009744:	e7ea      	b.n	800971c <__d2b+0x58>
 8009746:	a801      	add	r0, sp, #4
 8009748:	f7ff fd61 	bl	800920e <__lo0bits>
 800974c:	9b01      	ldr	r3, [sp, #4]
 800974e:	6163      	str	r3, [r4, #20]
 8009750:	3020      	adds	r0, #32
 8009752:	2201      	movs	r2, #1
 8009754:	e7e8      	b.n	8009728 <__d2b+0x64>
 8009756:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800975a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800975e:	6038      	str	r0, [r7, #0]
 8009760:	6918      	ldr	r0, [r3, #16]
 8009762:	f7ff fd35 	bl	80091d0 <__hi0bits>
 8009766:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800976a:	e7e5      	b.n	8009738 <__d2b+0x74>
 800976c:	08009e1c 	.word	0x08009e1c
 8009770:	08009e3e 	.word	0x08009e3e

08009774 <__sread>:
 8009774:	b510      	push	{r4, lr}
 8009776:	460c      	mov	r4, r1
 8009778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800977c:	f000 f956 	bl	8009a2c <_read_r>
 8009780:	2800      	cmp	r0, #0
 8009782:	bfab      	itete	ge
 8009784:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009786:	89a3      	ldrhlt	r3, [r4, #12]
 8009788:	181b      	addge	r3, r3, r0
 800978a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800978e:	bfac      	ite	ge
 8009790:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009792:	81a3      	strhlt	r3, [r4, #12]
 8009794:	bd10      	pop	{r4, pc}

08009796 <__swrite>:
 8009796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800979a:	461f      	mov	r7, r3
 800979c:	898b      	ldrh	r3, [r1, #12]
 800979e:	05db      	lsls	r3, r3, #23
 80097a0:	4605      	mov	r5, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	4616      	mov	r6, r2
 80097a6:	d505      	bpl.n	80097b4 <__swrite+0x1e>
 80097a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ac:	2302      	movs	r3, #2
 80097ae:	2200      	movs	r2, #0
 80097b0:	f000 f92a 	bl	8009a08 <_lseek_r>
 80097b4:	89a3      	ldrh	r3, [r4, #12]
 80097b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097be:	81a3      	strh	r3, [r4, #12]
 80097c0:	4632      	mov	r2, r6
 80097c2:	463b      	mov	r3, r7
 80097c4:	4628      	mov	r0, r5
 80097c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ca:	f000 b951 	b.w	8009a70 <_write_r>

080097ce <__sseek>:
 80097ce:	b510      	push	{r4, lr}
 80097d0:	460c      	mov	r4, r1
 80097d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d6:	f000 f917 	bl	8009a08 <_lseek_r>
 80097da:	1c43      	adds	r3, r0, #1
 80097dc:	89a3      	ldrh	r3, [r4, #12]
 80097de:	bf15      	itete	ne
 80097e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80097e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80097e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80097ea:	81a3      	strheq	r3, [r4, #12]
 80097ec:	bf18      	it	ne
 80097ee:	81a3      	strhne	r3, [r4, #12]
 80097f0:	bd10      	pop	{r4, pc}

080097f2 <__sclose>:
 80097f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f6:	f000 b94d 	b.w	8009a94 <_close_r>

080097fa <__swbuf_r>:
 80097fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fc:	460e      	mov	r6, r1
 80097fe:	4614      	mov	r4, r2
 8009800:	4605      	mov	r5, r0
 8009802:	b118      	cbz	r0, 800980c <__swbuf_r+0x12>
 8009804:	6a03      	ldr	r3, [r0, #32]
 8009806:	b90b      	cbnz	r3, 800980c <__swbuf_r+0x12>
 8009808:	f7fe fa5c 	bl	8007cc4 <__sinit>
 800980c:	69a3      	ldr	r3, [r4, #24]
 800980e:	60a3      	str	r3, [r4, #8]
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	071a      	lsls	r2, r3, #28
 8009814:	d501      	bpl.n	800981a <__swbuf_r+0x20>
 8009816:	6923      	ldr	r3, [r4, #16]
 8009818:	b943      	cbnz	r3, 800982c <__swbuf_r+0x32>
 800981a:	4621      	mov	r1, r4
 800981c:	4628      	mov	r0, r5
 800981e:	f000 f82b 	bl	8009878 <__swsetup_r>
 8009822:	b118      	cbz	r0, 800982c <__swbuf_r+0x32>
 8009824:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009828:	4638      	mov	r0, r7
 800982a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	6922      	ldr	r2, [r4, #16]
 8009830:	1a98      	subs	r0, r3, r2
 8009832:	6963      	ldr	r3, [r4, #20]
 8009834:	b2f6      	uxtb	r6, r6
 8009836:	4283      	cmp	r3, r0
 8009838:	4637      	mov	r7, r6
 800983a:	dc05      	bgt.n	8009848 <__swbuf_r+0x4e>
 800983c:	4621      	mov	r1, r4
 800983e:	4628      	mov	r0, r5
 8009840:	f7ff fbea 	bl	8009018 <_fflush_r>
 8009844:	2800      	cmp	r0, #0
 8009846:	d1ed      	bne.n	8009824 <__swbuf_r+0x2a>
 8009848:	68a3      	ldr	r3, [r4, #8]
 800984a:	3b01      	subs	r3, #1
 800984c:	60a3      	str	r3, [r4, #8]
 800984e:	6823      	ldr	r3, [r4, #0]
 8009850:	1c5a      	adds	r2, r3, #1
 8009852:	6022      	str	r2, [r4, #0]
 8009854:	701e      	strb	r6, [r3, #0]
 8009856:	6962      	ldr	r2, [r4, #20]
 8009858:	1c43      	adds	r3, r0, #1
 800985a:	429a      	cmp	r2, r3
 800985c:	d004      	beq.n	8009868 <__swbuf_r+0x6e>
 800985e:	89a3      	ldrh	r3, [r4, #12]
 8009860:	07db      	lsls	r3, r3, #31
 8009862:	d5e1      	bpl.n	8009828 <__swbuf_r+0x2e>
 8009864:	2e0a      	cmp	r6, #10
 8009866:	d1df      	bne.n	8009828 <__swbuf_r+0x2e>
 8009868:	4621      	mov	r1, r4
 800986a:	4628      	mov	r0, r5
 800986c:	f7ff fbd4 	bl	8009018 <_fflush_r>
 8009870:	2800      	cmp	r0, #0
 8009872:	d0d9      	beq.n	8009828 <__swbuf_r+0x2e>
 8009874:	e7d6      	b.n	8009824 <__swbuf_r+0x2a>
	...

08009878 <__swsetup_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4b29      	ldr	r3, [pc, #164]	@ (8009920 <__swsetup_r+0xa8>)
 800987c:	4605      	mov	r5, r0
 800987e:	6818      	ldr	r0, [r3, #0]
 8009880:	460c      	mov	r4, r1
 8009882:	b118      	cbz	r0, 800988c <__swsetup_r+0x14>
 8009884:	6a03      	ldr	r3, [r0, #32]
 8009886:	b90b      	cbnz	r3, 800988c <__swsetup_r+0x14>
 8009888:	f7fe fa1c 	bl	8007cc4 <__sinit>
 800988c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009890:	0719      	lsls	r1, r3, #28
 8009892:	d422      	bmi.n	80098da <__swsetup_r+0x62>
 8009894:	06da      	lsls	r2, r3, #27
 8009896:	d407      	bmi.n	80098a8 <__swsetup_r+0x30>
 8009898:	2209      	movs	r2, #9
 800989a:	602a      	str	r2, [r5, #0]
 800989c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098a0:	81a3      	strh	r3, [r4, #12]
 80098a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098a6:	e033      	b.n	8009910 <__swsetup_r+0x98>
 80098a8:	0758      	lsls	r0, r3, #29
 80098aa:	d512      	bpl.n	80098d2 <__swsetup_r+0x5a>
 80098ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098ae:	b141      	cbz	r1, 80098c2 <__swsetup_r+0x4a>
 80098b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098b4:	4299      	cmp	r1, r3
 80098b6:	d002      	beq.n	80098be <__swsetup_r+0x46>
 80098b8:	4628      	mov	r0, r5
 80098ba:	f000 f94d 	bl	8009b58 <_free_r>
 80098be:	2300      	movs	r3, #0
 80098c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098c8:	81a3      	strh	r3, [r4, #12]
 80098ca:	2300      	movs	r3, #0
 80098cc:	6063      	str	r3, [r4, #4]
 80098ce:	6923      	ldr	r3, [r4, #16]
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	89a3      	ldrh	r3, [r4, #12]
 80098d4:	f043 0308 	orr.w	r3, r3, #8
 80098d8:	81a3      	strh	r3, [r4, #12]
 80098da:	6923      	ldr	r3, [r4, #16]
 80098dc:	b94b      	cbnz	r3, 80098f2 <__swsetup_r+0x7a>
 80098de:	89a3      	ldrh	r3, [r4, #12]
 80098e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098e8:	d003      	beq.n	80098f2 <__swsetup_r+0x7a>
 80098ea:	4621      	mov	r1, r4
 80098ec:	4628      	mov	r0, r5
 80098ee:	f000 f83f 	bl	8009970 <__smakebuf_r>
 80098f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098f6:	f013 0201 	ands.w	r2, r3, #1
 80098fa:	d00a      	beq.n	8009912 <__swsetup_r+0x9a>
 80098fc:	2200      	movs	r2, #0
 80098fe:	60a2      	str	r2, [r4, #8]
 8009900:	6962      	ldr	r2, [r4, #20]
 8009902:	4252      	negs	r2, r2
 8009904:	61a2      	str	r2, [r4, #24]
 8009906:	6922      	ldr	r2, [r4, #16]
 8009908:	b942      	cbnz	r2, 800991c <__swsetup_r+0xa4>
 800990a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800990e:	d1c5      	bne.n	800989c <__swsetup_r+0x24>
 8009910:	bd38      	pop	{r3, r4, r5, pc}
 8009912:	0799      	lsls	r1, r3, #30
 8009914:	bf58      	it	pl
 8009916:	6962      	ldrpl	r2, [r4, #20]
 8009918:	60a2      	str	r2, [r4, #8]
 800991a:	e7f4      	b.n	8009906 <__swsetup_r+0x8e>
 800991c:	2000      	movs	r0, #0
 800991e:	e7f7      	b.n	8009910 <__swsetup_r+0x98>
 8009920:	20000018 	.word	0x20000018

08009924 <__swhatbuf_r>:
 8009924:	b570      	push	{r4, r5, r6, lr}
 8009926:	460c      	mov	r4, r1
 8009928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992c:	2900      	cmp	r1, #0
 800992e:	b096      	sub	sp, #88	@ 0x58
 8009930:	4615      	mov	r5, r2
 8009932:	461e      	mov	r6, r3
 8009934:	da0d      	bge.n	8009952 <__swhatbuf_r+0x2e>
 8009936:	89a3      	ldrh	r3, [r4, #12]
 8009938:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800993c:	f04f 0100 	mov.w	r1, #0
 8009940:	bf14      	ite	ne
 8009942:	2340      	movne	r3, #64	@ 0x40
 8009944:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009948:	2000      	movs	r0, #0
 800994a:	6031      	str	r1, [r6, #0]
 800994c:	602b      	str	r3, [r5, #0]
 800994e:	b016      	add	sp, #88	@ 0x58
 8009950:	bd70      	pop	{r4, r5, r6, pc}
 8009952:	466a      	mov	r2, sp
 8009954:	f000 f8ae 	bl	8009ab4 <_fstat_r>
 8009958:	2800      	cmp	r0, #0
 800995a:	dbec      	blt.n	8009936 <__swhatbuf_r+0x12>
 800995c:	9901      	ldr	r1, [sp, #4]
 800995e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009962:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009966:	4259      	negs	r1, r3
 8009968:	4159      	adcs	r1, r3
 800996a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800996e:	e7eb      	b.n	8009948 <__swhatbuf_r+0x24>

08009970 <__smakebuf_r>:
 8009970:	898b      	ldrh	r3, [r1, #12]
 8009972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009974:	079d      	lsls	r5, r3, #30
 8009976:	4606      	mov	r6, r0
 8009978:	460c      	mov	r4, r1
 800997a:	d507      	bpl.n	800998c <__smakebuf_r+0x1c>
 800997c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	6123      	str	r3, [r4, #16]
 8009984:	2301      	movs	r3, #1
 8009986:	6163      	str	r3, [r4, #20]
 8009988:	b003      	add	sp, #12
 800998a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800998c:	ab01      	add	r3, sp, #4
 800998e:	466a      	mov	r2, sp
 8009990:	f7ff ffc8 	bl	8009924 <__swhatbuf_r>
 8009994:	9f00      	ldr	r7, [sp, #0]
 8009996:	4605      	mov	r5, r0
 8009998:	4639      	mov	r1, r7
 800999a:	4630      	mov	r0, r6
 800999c:	f7ff fa38 	bl	8008e10 <_malloc_r>
 80099a0:	b948      	cbnz	r0, 80099b6 <__smakebuf_r+0x46>
 80099a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099a6:	059a      	lsls	r2, r3, #22
 80099a8:	d4ee      	bmi.n	8009988 <__smakebuf_r+0x18>
 80099aa:	f023 0303 	bic.w	r3, r3, #3
 80099ae:	f043 0302 	orr.w	r3, r3, #2
 80099b2:	81a3      	strh	r3, [r4, #12]
 80099b4:	e7e2      	b.n	800997c <__smakebuf_r+0xc>
 80099b6:	89a3      	ldrh	r3, [r4, #12]
 80099b8:	6020      	str	r0, [r4, #0]
 80099ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099be:	81a3      	strh	r3, [r4, #12]
 80099c0:	9b01      	ldr	r3, [sp, #4]
 80099c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099c6:	b15b      	cbz	r3, 80099e0 <__smakebuf_r+0x70>
 80099c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099cc:	4630      	mov	r0, r6
 80099ce:	f000 f80b 	bl	80099e8 <_isatty_r>
 80099d2:	b128      	cbz	r0, 80099e0 <__smakebuf_r+0x70>
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	f023 0303 	bic.w	r3, r3, #3
 80099da:	f043 0301 	orr.w	r3, r3, #1
 80099de:	81a3      	strh	r3, [r4, #12]
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	431d      	orrs	r5, r3
 80099e4:	81a5      	strh	r5, [r4, #12]
 80099e6:	e7cf      	b.n	8009988 <__smakebuf_r+0x18>

080099e8 <_isatty_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4d06      	ldr	r5, [pc, #24]	@ (8009a04 <_isatty_r+0x1c>)
 80099ec:	2300      	movs	r3, #0
 80099ee:	4604      	mov	r4, r0
 80099f0:	4608      	mov	r0, r1
 80099f2:	602b      	str	r3, [r5, #0]
 80099f4:	f7f7 ffa4 	bl	8001940 <_isatty>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d102      	bne.n	8009a02 <_isatty_r+0x1a>
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	b103      	cbz	r3, 8009a02 <_isatty_r+0x1a>
 8009a00:	6023      	str	r3, [r4, #0]
 8009a02:	bd38      	pop	{r3, r4, r5, pc}
 8009a04:	20000538 	.word	0x20000538

08009a08 <_lseek_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	4d07      	ldr	r5, [pc, #28]	@ (8009a28 <_lseek_r+0x20>)
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	4608      	mov	r0, r1
 8009a10:	4611      	mov	r1, r2
 8009a12:	2200      	movs	r2, #0
 8009a14:	602a      	str	r2, [r5, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	f7f7 ff9d 	bl	8001956 <_lseek>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d102      	bne.n	8009a26 <_lseek_r+0x1e>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	b103      	cbz	r3, 8009a26 <_lseek_r+0x1e>
 8009a24:	6023      	str	r3, [r4, #0]
 8009a26:	bd38      	pop	{r3, r4, r5, pc}
 8009a28:	20000538 	.word	0x20000538

08009a2c <_read_r>:
 8009a2c:	b538      	push	{r3, r4, r5, lr}
 8009a2e:	4d07      	ldr	r5, [pc, #28]	@ (8009a4c <_read_r+0x20>)
 8009a30:	4604      	mov	r4, r0
 8009a32:	4608      	mov	r0, r1
 8009a34:	4611      	mov	r1, r2
 8009a36:	2200      	movs	r2, #0
 8009a38:	602a      	str	r2, [r5, #0]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	f7f7 ff2b 	bl	8001896 <_read>
 8009a40:	1c43      	adds	r3, r0, #1
 8009a42:	d102      	bne.n	8009a4a <_read_r+0x1e>
 8009a44:	682b      	ldr	r3, [r5, #0]
 8009a46:	b103      	cbz	r3, 8009a4a <_read_r+0x1e>
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}
 8009a4c:	20000538 	.word	0x20000538

08009a50 <_sbrk_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	4d06      	ldr	r5, [pc, #24]	@ (8009a6c <_sbrk_r+0x1c>)
 8009a54:	2300      	movs	r3, #0
 8009a56:	4604      	mov	r4, r0
 8009a58:	4608      	mov	r0, r1
 8009a5a:	602b      	str	r3, [r5, #0]
 8009a5c:	f7f7 ff88 	bl	8001970 <_sbrk>
 8009a60:	1c43      	adds	r3, r0, #1
 8009a62:	d102      	bne.n	8009a6a <_sbrk_r+0x1a>
 8009a64:	682b      	ldr	r3, [r5, #0]
 8009a66:	b103      	cbz	r3, 8009a6a <_sbrk_r+0x1a>
 8009a68:	6023      	str	r3, [r4, #0]
 8009a6a:	bd38      	pop	{r3, r4, r5, pc}
 8009a6c:	20000538 	.word	0x20000538

08009a70 <_write_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4d07      	ldr	r5, [pc, #28]	@ (8009a90 <_write_r+0x20>)
 8009a74:	4604      	mov	r4, r0
 8009a76:	4608      	mov	r0, r1
 8009a78:	4611      	mov	r1, r2
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	602a      	str	r2, [r5, #0]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f7f7 ff26 	bl	80018d0 <_write>
 8009a84:	1c43      	adds	r3, r0, #1
 8009a86:	d102      	bne.n	8009a8e <_write_r+0x1e>
 8009a88:	682b      	ldr	r3, [r5, #0]
 8009a8a:	b103      	cbz	r3, 8009a8e <_write_r+0x1e>
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	bd38      	pop	{r3, r4, r5, pc}
 8009a90:	20000538 	.word	0x20000538

08009a94 <_close_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	4d06      	ldr	r5, [pc, #24]	@ (8009ab0 <_close_r+0x1c>)
 8009a98:	2300      	movs	r3, #0
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	602b      	str	r3, [r5, #0]
 8009aa0:	f7f7 ff32 	bl	8001908 <_close>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d102      	bne.n	8009aae <_close_r+0x1a>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	b103      	cbz	r3, 8009aae <_close_r+0x1a>
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	20000538 	.word	0x20000538

08009ab4 <_fstat_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	4d07      	ldr	r5, [pc, #28]	@ (8009ad4 <_fstat_r+0x20>)
 8009ab8:	2300      	movs	r3, #0
 8009aba:	4604      	mov	r4, r0
 8009abc:	4608      	mov	r0, r1
 8009abe:	4611      	mov	r1, r2
 8009ac0:	602b      	str	r3, [r5, #0]
 8009ac2:	f7f7 ff2d 	bl	8001920 <_fstat>
 8009ac6:	1c43      	adds	r3, r0, #1
 8009ac8:	d102      	bne.n	8009ad0 <_fstat_r+0x1c>
 8009aca:	682b      	ldr	r3, [r5, #0]
 8009acc:	b103      	cbz	r3, 8009ad0 <_fstat_r+0x1c>
 8009ace:	6023      	str	r3, [r4, #0]
 8009ad0:	bd38      	pop	{r3, r4, r5, pc}
 8009ad2:	bf00      	nop
 8009ad4:	20000538 	.word	0x20000538

08009ad8 <memcpy>:
 8009ad8:	440a      	add	r2, r1
 8009ada:	4291      	cmp	r1, r2
 8009adc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009ae0:	d100      	bne.n	8009ae4 <memcpy+0xc>
 8009ae2:	4770      	bx	lr
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009aee:	4291      	cmp	r1, r2
 8009af0:	d1f9      	bne.n	8009ae6 <memcpy+0xe>
 8009af2:	bd10      	pop	{r4, pc}

08009af4 <__assert_func>:
 8009af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009af6:	4614      	mov	r4, r2
 8009af8:	461a      	mov	r2, r3
 8009afa:	4b09      	ldr	r3, [pc, #36]	@ (8009b20 <__assert_func+0x2c>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4605      	mov	r5, r0
 8009b00:	68d8      	ldr	r0, [r3, #12]
 8009b02:	b14c      	cbz	r4, 8009b18 <__assert_func+0x24>
 8009b04:	4b07      	ldr	r3, [pc, #28]	@ (8009b24 <__assert_func+0x30>)
 8009b06:	9100      	str	r1, [sp, #0]
 8009b08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b0c:	4906      	ldr	r1, [pc, #24]	@ (8009b28 <__assert_func+0x34>)
 8009b0e:	462b      	mov	r3, r5
 8009b10:	f000 f87e 	bl	8009c10 <fiprintf>
 8009b14:	f000 f89b 	bl	8009c4e <abort>
 8009b18:	4b04      	ldr	r3, [pc, #16]	@ (8009b2c <__assert_func+0x38>)
 8009b1a:	461c      	mov	r4, r3
 8009b1c:	e7f3      	b.n	8009b06 <__assert_func+0x12>
 8009b1e:	bf00      	nop
 8009b20:	20000018 	.word	0x20000018
 8009b24:	08009ea1 	.word	0x08009ea1
 8009b28:	08009eae 	.word	0x08009eae
 8009b2c:	08009edc 	.word	0x08009edc

08009b30 <_calloc_r>:
 8009b30:	b570      	push	{r4, r5, r6, lr}
 8009b32:	fba1 5402 	umull	r5, r4, r1, r2
 8009b36:	b934      	cbnz	r4, 8009b46 <_calloc_r+0x16>
 8009b38:	4629      	mov	r1, r5
 8009b3a:	f7ff f969 	bl	8008e10 <_malloc_r>
 8009b3e:	4606      	mov	r6, r0
 8009b40:	b928      	cbnz	r0, 8009b4e <_calloc_r+0x1e>
 8009b42:	4630      	mov	r0, r6
 8009b44:	bd70      	pop	{r4, r5, r6, pc}
 8009b46:	220c      	movs	r2, #12
 8009b48:	6002      	str	r2, [r0, #0]
 8009b4a:	2600      	movs	r6, #0
 8009b4c:	e7f9      	b.n	8009b42 <_calloc_r+0x12>
 8009b4e:	462a      	mov	r2, r5
 8009b50:	4621      	mov	r1, r4
 8009b52:	f7fe f95d 	bl	8007e10 <memset>
 8009b56:	e7f4      	b.n	8009b42 <_calloc_r+0x12>

08009b58 <_free_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4605      	mov	r5, r0
 8009b5c:	2900      	cmp	r1, #0
 8009b5e:	d041      	beq.n	8009be4 <_free_r+0x8c>
 8009b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b64:	1f0c      	subs	r4, r1, #4
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bfb8      	it	lt
 8009b6a:	18e4      	addlt	r4, r4, r3
 8009b6c:	f7ff fa7c 	bl	8009068 <__malloc_lock>
 8009b70:	4a1d      	ldr	r2, [pc, #116]	@ (8009be8 <_free_r+0x90>)
 8009b72:	6813      	ldr	r3, [r2, #0]
 8009b74:	b933      	cbnz	r3, 8009b84 <_free_r+0x2c>
 8009b76:	6063      	str	r3, [r4, #4]
 8009b78:	6014      	str	r4, [r2, #0]
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b80:	f7ff ba78 	b.w	8009074 <__malloc_unlock>
 8009b84:	42a3      	cmp	r3, r4
 8009b86:	d908      	bls.n	8009b9a <_free_r+0x42>
 8009b88:	6820      	ldr	r0, [r4, #0]
 8009b8a:	1821      	adds	r1, r4, r0
 8009b8c:	428b      	cmp	r3, r1
 8009b8e:	bf01      	itttt	eq
 8009b90:	6819      	ldreq	r1, [r3, #0]
 8009b92:	685b      	ldreq	r3, [r3, #4]
 8009b94:	1809      	addeq	r1, r1, r0
 8009b96:	6021      	streq	r1, [r4, #0]
 8009b98:	e7ed      	b.n	8009b76 <_free_r+0x1e>
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	b10b      	cbz	r3, 8009ba4 <_free_r+0x4c>
 8009ba0:	42a3      	cmp	r3, r4
 8009ba2:	d9fa      	bls.n	8009b9a <_free_r+0x42>
 8009ba4:	6811      	ldr	r1, [r2, #0]
 8009ba6:	1850      	adds	r0, r2, r1
 8009ba8:	42a0      	cmp	r0, r4
 8009baa:	d10b      	bne.n	8009bc4 <_free_r+0x6c>
 8009bac:	6820      	ldr	r0, [r4, #0]
 8009bae:	4401      	add	r1, r0
 8009bb0:	1850      	adds	r0, r2, r1
 8009bb2:	4283      	cmp	r3, r0
 8009bb4:	6011      	str	r1, [r2, #0]
 8009bb6:	d1e0      	bne.n	8009b7a <_free_r+0x22>
 8009bb8:	6818      	ldr	r0, [r3, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	6053      	str	r3, [r2, #4]
 8009bbe:	4408      	add	r0, r1
 8009bc0:	6010      	str	r0, [r2, #0]
 8009bc2:	e7da      	b.n	8009b7a <_free_r+0x22>
 8009bc4:	d902      	bls.n	8009bcc <_free_r+0x74>
 8009bc6:	230c      	movs	r3, #12
 8009bc8:	602b      	str	r3, [r5, #0]
 8009bca:	e7d6      	b.n	8009b7a <_free_r+0x22>
 8009bcc:	6820      	ldr	r0, [r4, #0]
 8009bce:	1821      	adds	r1, r4, r0
 8009bd0:	428b      	cmp	r3, r1
 8009bd2:	bf04      	itt	eq
 8009bd4:	6819      	ldreq	r1, [r3, #0]
 8009bd6:	685b      	ldreq	r3, [r3, #4]
 8009bd8:	6063      	str	r3, [r4, #4]
 8009bda:	bf04      	itt	eq
 8009bdc:	1809      	addeq	r1, r1, r0
 8009bde:	6021      	streq	r1, [r4, #0]
 8009be0:	6054      	str	r4, [r2, #4]
 8009be2:	e7ca      	b.n	8009b7a <_free_r+0x22>
 8009be4:	bd38      	pop	{r3, r4, r5, pc}
 8009be6:	bf00      	nop
 8009be8:	20000534 	.word	0x20000534

08009bec <__ascii_mbtowc>:
 8009bec:	b082      	sub	sp, #8
 8009bee:	b901      	cbnz	r1, 8009bf2 <__ascii_mbtowc+0x6>
 8009bf0:	a901      	add	r1, sp, #4
 8009bf2:	b142      	cbz	r2, 8009c06 <__ascii_mbtowc+0x1a>
 8009bf4:	b14b      	cbz	r3, 8009c0a <__ascii_mbtowc+0x1e>
 8009bf6:	7813      	ldrb	r3, [r2, #0]
 8009bf8:	600b      	str	r3, [r1, #0]
 8009bfa:	7812      	ldrb	r2, [r2, #0]
 8009bfc:	1e10      	subs	r0, r2, #0
 8009bfe:	bf18      	it	ne
 8009c00:	2001      	movne	r0, #1
 8009c02:	b002      	add	sp, #8
 8009c04:	4770      	bx	lr
 8009c06:	4610      	mov	r0, r2
 8009c08:	e7fb      	b.n	8009c02 <__ascii_mbtowc+0x16>
 8009c0a:	f06f 0001 	mvn.w	r0, #1
 8009c0e:	e7f8      	b.n	8009c02 <__ascii_mbtowc+0x16>

08009c10 <fiprintf>:
 8009c10:	b40e      	push	{r1, r2, r3}
 8009c12:	b503      	push	{r0, r1, lr}
 8009c14:	4601      	mov	r1, r0
 8009c16:	ab03      	add	r3, sp, #12
 8009c18:	4805      	ldr	r0, [pc, #20]	@ (8009c30 <fiprintf+0x20>)
 8009c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c1e:	6800      	ldr	r0, [r0, #0]
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	f7fe ffb3 	bl	8008b8c <_vfiprintf_r>
 8009c26:	b002      	add	sp, #8
 8009c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c2c:	b003      	add	sp, #12
 8009c2e:	4770      	bx	lr
 8009c30:	20000018 	.word	0x20000018

08009c34 <__ascii_wctomb>:
 8009c34:	4603      	mov	r3, r0
 8009c36:	4608      	mov	r0, r1
 8009c38:	b141      	cbz	r1, 8009c4c <__ascii_wctomb+0x18>
 8009c3a:	2aff      	cmp	r2, #255	@ 0xff
 8009c3c:	d904      	bls.n	8009c48 <__ascii_wctomb+0x14>
 8009c3e:	228a      	movs	r2, #138	@ 0x8a
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c46:	4770      	bx	lr
 8009c48:	700a      	strb	r2, [r1, #0]
 8009c4a:	2001      	movs	r0, #1
 8009c4c:	4770      	bx	lr

08009c4e <abort>:
 8009c4e:	b508      	push	{r3, lr}
 8009c50:	2006      	movs	r0, #6
 8009c52:	f000 f82b 	bl	8009cac <raise>
 8009c56:	2001      	movs	r0, #1
 8009c58:	f7f7 fe12 	bl	8001880 <_exit>

08009c5c <_raise_r>:
 8009c5c:	291f      	cmp	r1, #31
 8009c5e:	b538      	push	{r3, r4, r5, lr}
 8009c60:	4605      	mov	r5, r0
 8009c62:	460c      	mov	r4, r1
 8009c64:	d904      	bls.n	8009c70 <_raise_r+0x14>
 8009c66:	2316      	movs	r3, #22
 8009c68:	6003      	str	r3, [r0, #0]
 8009c6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}
 8009c70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009c72:	b112      	cbz	r2, 8009c7a <_raise_r+0x1e>
 8009c74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c78:	b94b      	cbnz	r3, 8009c8e <_raise_r+0x32>
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	f000 f830 	bl	8009ce0 <_getpid_r>
 8009c80:	4622      	mov	r2, r4
 8009c82:	4601      	mov	r1, r0
 8009c84:	4628      	mov	r0, r5
 8009c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c8a:	f000 b817 	b.w	8009cbc <_kill_r>
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d00a      	beq.n	8009ca8 <_raise_r+0x4c>
 8009c92:	1c59      	adds	r1, r3, #1
 8009c94:	d103      	bne.n	8009c9e <_raise_r+0x42>
 8009c96:	2316      	movs	r3, #22
 8009c98:	6003      	str	r3, [r0, #0]
 8009c9a:	2001      	movs	r0, #1
 8009c9c:	e7e7      	b.n	8009c6e <_raise_r+0x12>
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	4798      	blx	r3
 8009ca8:	2000      	movs	r0, #0
 8009caa:	e7e0      	b.n	8009c6e <_raise_r+0x12>

08009cac <raise>:
 8009cac:	4b02      	ldr	r3, [pc, #8]	@ (8009cb8 <raise+0xc>)
 8009cae:	4601      	mov	r1, r0
 8009cb0:	6818      	ldr	r0, [r3, #0]
 8009cb2:	f7ff bfd3 	b.w	8009c5c <_raise_r>
 8009cb6:	bf00      	nop
 8009cb8:	20000018 	.word	0x20000018

08009cbc <_kill_r>:
 8009cbc:	b538      	push	{r3, r4, r5, lr}
 8009cbe:	4d07      	ldr	r5, [pc, #28]	@ (8009cdc <_kill_r+0x20>)
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	4608      	mov	r0, r1
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	602b      	str	r3, [r5, #0]
 8009cca:	f7f7 fdc9 	bl	8001860 <_kill>
 8009cce:	1c43      	adds	r3, r0, #1
 8009cd0:	d102      	bne.n	8009cd8 <_kill_r+0x1c>
 8009cd2:	682b      	ldr	r3, [r5, #0]
 8009cd4:	b103      	cbz	r3, 8009cd8 <_kill_r+0x1c>
 8009cd6:	6023      	str	r3, [r4, #0]
 8009cd8:	bd38      	pop	{r3, r4, r5, pc}
 8009cda:	bf00      	nop
 8009cdc:	20000538 	.word	0x20000538

08009ce0 <_getpid_r>:
 8009ce0:	f7f7 bdb6 	b.w	8001850 <_getpid>

08009ce4 <_init>:
 8009ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce6:	bf00      	nop
 8009ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cea:	bc08      	pop	{r3}
 8009cec:	469e      	mov	lr, r3
 8009cee:	4770      	bx	lr

08009cf0 <_fini>:
 8009cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf2:	bf00      	nop
 8009cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cf6:	bc08      	pop	{r3}
 8009cf8:	469e      	mov	lr, r3
 8009cfa:	4770      	bx	lr
