
PEPL_PPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008034  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08008218  08008218  00009218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800869c  0800869c  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800869c  0800869c  0000969c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086a4  080086a4  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086a4  080086a4  000096a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086a8  080086a8  000096a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080086ac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  200001d4  08008880  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08008880  0000a530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136cf  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c6  00000000  00000000  0001d8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0001ffa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8b  00000000  00000000  000210f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000292bc  00000000  00000000  00021e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001380b  00000000  00000000  0004b13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113da5  00000000  00000000  0005e94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001726ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005af4  00000000  00000000  00172734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00178228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080081fc 	.word	0x080081fc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	080081fc 	.word	0x080081fc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b5b0      	push	{r4, r5, r7, lr}
 8000f26:	b096      	sub	sp, #88	@ 0x58
 8000f28:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	#ifdef INTERLEAVING
		float current1 = 0;
 8000f2a:	f04f 0300 	mov.w	r3, #0
 8000f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		float error1 = 0;
 8000f30:	f04f 0300 	mov.w	r3, #0
 8000f34:	63bb      	str	r3, [r7, #56]	@ 0x38
		float integral1 = 0;
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		float control1 = 0;
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	637b      	str	r3, [r7, #52]	@ 0x34
		float pulse1 = 63;
 8000f42:	4b9d      	ldr	r3, [pc, #628]	@ (80011b8 <main+0x294>)
 8000f44:	64bb      	str	r3, [r7, #72]	@ 0x48

		float current2 = 0;
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	633b      	str	r3, [r7, #48]	@ 0x30
		float error2 = 0;
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
		float integral2 = 0;
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	647b      	str	r3, [r7, #68]	@ 0x44
		float control2 = 0;
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
		float pulse2 = 63;
 8000f5e:	4b96      	ldr	r3, [pc, #600]	@ (80011b8 <main+0x294>)
 8000f60:	643b      	str	r3, [r7, #64]	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f62:	f000 fdb2 	bl	8001aca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f66:	f000 f941 	bl	80011ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6a:	f000 faff 	bl	800156c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f6e:	f000 fabf 	bl	80014f0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000f72:	f000 f9d1 	bl	8001318 <MX_TIM1_Init>
  // MX_ADC1_Init();
  MX_TIM3_Init();
 8000f76:	f000 fa6d 	bl	8001454 <MX_TIM3_Init>
  // MX_ADC4_Init();
  MX_LPUART1_UART_Init();
 8000f7a:	f000 f983 	bl	8001284 <MX_LPUART1_UART_Init>
//  {
//      Error_Handler();  // Handle calibration failure
//  }

  // Optional: wait a bit for safety (not strictly required)
  HAL_Delay(1);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f000 fe14 	bl	8001bac <HAL_Delay>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);      // Start main PWM on PA9
 8000f84:	2104      	movs	r1, #4
 8000f86:	488d      	ldr	r0, [pc, #564]	@ (80011bc <main+0x298>)
 8000f88:	f002 fac2 	bl	8003510 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);   // Start complementary PWM on PB0
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	488b      	ldr	r0, [pc, #556]	@ (80011bc <main+0x298>)
 8000f90:	f003 fa9a 	bl	80044c8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);      // Start main PWM on PA9
 8000f94:	2100      	movs	r1, #0
 8000f96:	4889      	ldr	r0, [pc, #548]	@ (80011bc <main+0x298>)
 8000f98:	f002 faba 	bl	8003510 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);   // Start complementary PWM on PB0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4887      	ldr	r0, [pc, #540]	@ (80011bc <main+0x298>)
 8000fa0:	f003 fa92 	bl	80044c8 <HAL_TIMEx_PWMN_Start>
  // HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_diff_buffer, ADC_BUFFER_SIZE);
  // HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4_diff_buffer, ADC_BUFFER_SIZE);
  HAL_TIM_Base_Start(&htim3);  // Start TIM3 base timer
 8000fa4:	4886      	ldr	r0, [pc, #536]	@ (80011c0 <main+0x29c>)
 8000fa6:	f002 f9eb 	bl	8003380 <HAL_TIM_Base_Start>

  printf("Starting ADC Readout\r\n");
 8000faa:	4886      	ldr	r0, [pc, #536]	@ (80011c4 <main+0x2a0>)
 8000fac:	f005 f9b4 	bl	8006318 <puts>

	#ifdef INTERLEAVING
		  // current1 = convert_adc_to_current(adc1_diff_buffer);
		  // current2 = convert_adc_to_current(adc4_diff_buffer);

		  error1 = current1 - CURRENT1_SETPOINT;
 8000fb0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000fb4:	eeb4 7a08 	vmov.f32	s14, #72	@ 0x3e400000  0.1875000
 8000fb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fbc:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		  error2 = current2 - CURRENT2_SETPOINT;
 8000fc0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000fc4:	eeb4 7a08 	vmov.f32	s14, #72	@ 0x3e400000  0.1875000
 8000fc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fcc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		  integral1 = fmaxf(fminf(integral1 + error1 * CTRL_LP_T, MAX_INTEGRAL), MIN_INTEGRAL);
 8000fd0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000fd4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fdc:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8000fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe4:	f004 fb9b 	bl	800571e <fminf>
 8000fe8:	eef0 7a40 	vmov.f32	s15, s0
 8000fec:	eefb 0a09 	vmov.f32	s1, #185	@ 0xc1c80000 -25.0
 8000ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff4:	f004 fb76 	bl	80056e4 <fmaxf>
 8000ff8:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
		  integral2 = fmaxf(fminf(integral2 + error2 * CTRL_LP_T, MAX_INTEGRAL), MIN_INTEGRAL);
 8000ffc:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001000:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001008:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 800100c:	eeb0 0a67 	vmov.f32	s0, s15
 8001010:	f004 fb85 	bl	800571e <fminf>
 8001014:	eef0 7a40 	vmov.f32	s15, s0
 8001018:	eefb 0a09 	vmov.f32	s1, #185	@ 0xc1c80000 -25.0
 800101c:	eeb0 0a67 	vmov.f32	s0, s15
 8001020:	f004 fb60 	bl	80056e4 <fmaxf>
 8001024:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44

		  control1 = Kp_current * error1 + Ki_current * integral1;
 8001028:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800102c:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80011c8 <main+0x2a4>
 8001030:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001034:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001038:	eddf 6a63 	vldr	s13, [pc, #396]	@ 80011c8 <main+0x2a4>
 800103c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001044:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  control2 = Kp_current * error2 + Ki_current * integral2;
 8001048:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800104c:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80011c8 <main+0x2a4>
 8001050:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001054:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001058:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 80011c8 <main+0x2a4>
 800105c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001064:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		  pulse1 = floorf(fmaxf(fminf(pulse1 - control1, MAX_PWM), MIN_PWM));
 8001068:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800106c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001074:	eddf 0a55 	vldr	s1, [pc, #340]	@ 80011cc <main+0x2a8>
 8001078:	eeb0 0a67 	vmov.f32	s0, s15
 800107c:	f004 fb4f 	bl	800571e <fminf>
 8001080:	eef0 7a40 	vmov.f32	s15, s0
 8001084:	eddf 0a52 	vldr	s1, [pc, #328]	@ 80011d0 <main+0x2ac>
 8001088:	eeb0 0a67 	vmov.f32	s0, s15
 800108c:	f004 fb2a 	bl	80056e4 <fmaxf>
 8001090:	eef0 7a40 	vmov.f32	s15, s0
 8001094:	eeb0 0a67 	vmov.f32	s0, s15
 8001098:	f004 fb7a 	bl	8005790 <floorf>
 800109c:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
		  pulse2 = floorf(fmaxf(fminf(pulse2 - control2, MAX_PWM), MIN_PWM));
 80010a0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80010a4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80010a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ac:	eddf 0a47 	vldr	s1, [pc, #284]	@ 80011cc <main+0x2a8>
 80010b0:	eeb0 0a67 	vmov.f32	s0, s15
 80010b4:	f004 fb33 	bl	800571e <fminf>
 80010b8:	eef0 7a40 	vmov.f32	s15, s0
 80010bc:	eddf 0a44 	vldr	s1, [pc, #272]	@ 80011d0 <main+0x2ac>
 80010c0:	eeb0 0a67 	vmov.f32	s0, s15
 80010c4:	f004 fb0e 	bl	80056e4 <fmaxf>
 80010c8:	eef0 7a40 	vmov.f32	s15, s0
 80010cc:	eeb0 0a67 	vmov.f32	s0, s15
 80010d0:	f004 fb5e 	bl	8005790 <floorf>
 80010d4:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40


		  printf("Current: [%f, %f] Amps\r\n", current1, current2);
 80010d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80010da:	f7ff fa5d 	bl	8000598 <__aeabi_f2d>
 80010de:	4604      	mov	r4, r0
 80010e0:	460d      	mov	r5, r1
 80010e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80010e4:	f7ff fa58 	bl	8000598 <__aeabi_f2d>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	e9cd 2300 	strd	r2, r3, [sp]
 80010f0:	4622      	mov	r2, r4
 80010f2:	462b      	mov	r3, r5
 80010f4:	4837      	ldr	r0, [pc, #220]	@ (80011d4 <main+0x2b0>)
 80010f6:	f005 f8a7 	bl	8006248 <iprintf>
		  printf("Error: [%f, %f] \r\n", error1, error2);
 80010fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80010fc:	f7ff fa4c 	bl	8000598 <__aeabi_f2d>
 8001100:	4604      	mov	r4, r0
 8001102:	460d      	mov	r5, r1
 8001104:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001106:	f7ff fa47 	bl	8000598 <__aeabi_f2d>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	e9cd 2300 	strd	r2, r3, [sp]
 8001112:	4622      	mov	r2, r4
 8001114:	462b      	mov	r3, r5
 8001116:	4830      	ldr	r0, [pc, #192]	@ (80011d8 <main+0x2b4>)
 8001118:	f005 f896 	bl	8006248 <iprintf>
		  printf("Integral: [%f, %f] \r\n", integral1, integral2);
 800111c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800111e:	f7ff fa3b 	bl	8000598 <__aeabi_f2d>
 8001122:	4604      	mov	r4, r0
 8001124:	460d      	mov	r5, r1
 8001126:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001128:	f7ff fa36 	bl	8000598 <__aeabi_f2d>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	e9cd 2300 	strd	r2, r3, [sp]
 8001134:	4622      	mov	r2, r4
 8001136:	462b      	mov	r3, r5
 8001138:	4828      	ldr	r0, [pc, #160]	@ (80011dc <main+0x2b8>)
 800113a:	f005 f885 	bl	8006248 <iprintf>
		  printf("Control: [%f, %f] \r\n", control1, control2);
 800113e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001140:	f7ff fa2a 	bl	8000598 <__aeabi_f2d>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800114a:	f7ff fa25 	bl	8000598 <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	e9cd 2300 	strd	r2, r3, [sp]
 8001156:	4622      	mov	r2, r4
 8001158:	462b      	mov	r3, r5
 800115a:	4821      	ldr	r0, [pc, #132]	@ (80011e0 <main+0x2bc>)
 800115c:	f005 f874 	bl	8006248 <iprintf>
		  printf("pulse: [%f, %f] \r\n\n\n", pulse1, pulse2);
 8001160:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001162:	f7ff fa19 	bl	8000598 <__aeabi_f2d>
 8001166:	4604      	mov	r4, r0
 8001168:	460d      	mov	r5, r1
 800116a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800116c:	f7ff fa14 	bl	8000598 <__aeabi_f2d>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	e9cd 2300 	strd	r2, r3, [sp]
 8001178:	4622      	mov	r2, r4
 800117a:	462b      	mov	r3, r5
 800117c:	4819      	ldr	r0, [pc, #100]	@ (80011e4 <main+0x2c0>)
 800117e:	f005 f863 	bl	8006248 <iprintf>
		  printf("    -----  NEXT  -----    \r\n");
 8001182:	4819      	ldr	r0, [pc, #100]	@ (80011e8 <main+0x2c4>)
 8001184:	f005 f8c8 	bl	8006318 <puts>

		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse1);
 8001188:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <main+0x298>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001194:	ee17 2a90 	vmov	r2, s15
 8001198:	639a      	str	r2, [r3, #56]	@ 0x38
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse2);
 800119a:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <main+0x298>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80011a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011a6:	ee17 2a90 	vmov	r2, s15
 80011aa:	635a      	str	r2, [r3, #52]	@ 0x34

		  HAL_Delay(1000 * CTRL_LP_T);
 80011ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011b0:	f000 fcfc 	bl	8001bac <HAL_Delay>
		  error1 = current1 - CURRENT1_SETPOINT;
 80011b4:	bf00      	nop
 80011b6:	e6fb      	b.n	8000fb0 <main+0x8c>
 80011b8:	427c0000 	.word	0x427c0000
 80011bc:	20000344 	.word	0x20000344
 80011c0:	20000390 	.word	0x20000390
 80011c4:	0800823c 	.word	0x0800823c
 80011c8:	00000000 	.word	0x00000000
 80011cc:	42fa0000 	.word	0x42fa0000
 80011d0:	42600000 	.word	0x42600000
 80011d4:	08008254 	.word	0x08008254
 80011d8:	08008270 	.word	0x08008270
 80011dc:	08008284 	.word	0x08008284
 80011e0:	0800829c 	.word	0x0800829c
 80011e4:	080082b4 	.word	0x080082b4
 80011e8:	080082cc 	.word	0x080082cc

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b094      	sub	sp, #80	@ 0x50
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 0318 	add.w	r3, r7, #24
 80011f6:	2238      	movs	r2, #56	@ 0x38
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f005 f894 	bl	8006328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800120e:	2000      	movs	r0, #0
 8001210:	f001 f82e 	bl	8002270 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001214:	2302      	movs	r3, #2
 8001216:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001218:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121e:	2340      	movs	r3, #64	@ 0x40
 8001220:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001222:	2302      	movs	r3, #2
 8001224:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001226:	2302      	movs	r3, #2
 8001228:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800122a:	2304      	movs	r3, #4
 800122c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800122e:	2355      	movs	r3, #85	@ 0x55
 8001230:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001232:	2302      	movs	r3, #2
 8001234:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001236:	2302      	movs	r3, #2
 8001238:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800123a:	2302      	movs	r3, #2
 800123c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123e:	f107 0318 	add.w	r3, r7, #24
 8001242:	4618      	mov	r0, r3
 8001244:	f001 f8c8 	bl	80023d8 <HAL_RCC_OscConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800124e:	f000 f9cf 	bl	80015f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001252:	230f      	movs	r3, #15
 8001254:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001256:	2303      	movs	r3, #3
 8001258:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2104      	movs	r1, #4
 800126a:	4618      	mov	r0, r3
 800126c:	f001 fbc6 	bl	80029fc <HAL_RCC_ClockConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001276:	f000 f9bb 	bl	80015f0 <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	3750      	adds	r7, #80	@ 0x50
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001288:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <MX_LPUART1_UART_Init+0x8c>)
 800128a:	4a22      	ldr	r2, [pc, #136]	@ (8001314 <MX_LPUART1_UART_Init+0x90>)
 800128c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800128e:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <MX_LPUART1_UART_Init+0x8c>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b1e      	ldr	r3, [pc, #120]	@ (8001310 <MX_LPUART1_UART_Init+0x8c>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <MX_LPUART1_UART_Init+0x8c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001310 <MX_LPUART1_UART_Init+0x8c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <MX_LPUART1_UART_Init+0x8c>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <MX_LPUART1_UART_Init+0x8c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b4:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <MX_LPUART1_UART_Init+0x8c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <MX_LPUART1_UART_Init+0x8c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c0:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <MX_LPUART1_UART_Init+0x8c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012c6:	4812      	ldr	r0, [pc, #72]	@ (8001310 <MX_LPUART1_UART_Init+0x8c>)
 80012c8:	f003 fb0f 	bl	80048ea <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80012d2:	f000 f98d 	bl	80015f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d6:	2100      	movs	r1, #0
 80012d8:	480d      	ldr	r0, [pc, #52]	@ (8001310 <MX_LPUART1_UART_Init+0x8c>)
 80012da:	f004 f939 	bl	8005550 <HAL_UARTEx_SetTxFifoThreshold>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80012e4:	f000 f984 	bl	80015f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e8:	2100      	movs	r1, #0
 80012ea:	4809      	ldr	r0, [pc, #36]	@ (8001310 <MX_LPUART1_UART_Init+0x8c>)
 80012ec:	f004 f96e 	bl	80055cc <HAL_UARTEx_SetRxFifoThreshold>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80012f6:	f000 f97b 	bl	80015f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	@ (8001310 <MX_LPUART1_UART_Init+0x8c>)
 80012fc:	f004 f8ef 	bl	80054de <HAL_UARTEx_DisableFifoMode>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001306:	f000 f973 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200002b0 	.word	0x200002b0
 8001314:	40008000 	.word	0x40008000

08001318 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b098      	sub	sp, #96	@ 0x60
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]
 800133a:	615a      	str	r2, [r3, #20]
 800133c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2234      	movs	r2, #52	@ 0x34
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f004 ffef 	bl	8006328 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800134a:	4b40      	ldr	r3, [pc, #256]	@ (800144c <MX_TIM1_Init+0x134>)
 800134c:	4a40      	ldr	r2, [pc, #256]	@ (8001450 <MX_TIM1_Init+0x138>)
 800134e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001350:	4b3e      	ldr	r3, [pc, #248]	@ (800144c <MX_TIM1_Init+0x134>)
 8001352:	2200      	movs	r2, #0
 8001354:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001356:	4b3d      	ldr	r3, [pc, #244]	@ (800144c <MX_TIM1_Init+0x134>)
 8001358:	2220      	movs	r2, #32
 800135a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 169;
 800135c:	4b3b      	ldr	r3, [pc, #236]	@ (800144c <MX_TIM1_Init+0x134>)
 800135e:	22a9      	movs	r2, #169	@ 0xa9
 8001360:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001362:	4b3a      	ldr	r3, [pc, #232]	@ (800144c <MX_TIM1_Init+0x134>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001368:	4b38      	ldr	r3, [pc, #224]	@ (800144c <MX_TIM1_Init+0x134>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b37      	ldr	r3, [pc, #220]	@ (800144c <MX_TIM1_Init+0x134>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001374:	4835      	ldr	r0, [pc, #212]	@ (800144c <MX_TIM1_Init+0x134>)
 8001376:	f002 f873 	bl	8003460 <HAL_TIM_PWM_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001380:	f000 f936 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001390:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001394:	4619      	mov	r1, r3
 8001396:	482d      	ldr	r0, [pc, #180]	@ (800144c <MX_TIM1_Init+0x134>)
 8001398:	f003 f958 	bl	800464c <HAL_TIMEx_MasterConfigSynchronization>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80013a2:	f000 f925 	bl	80015f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a6:	2360      	movs	r3, #96	@ 0x60
 80013a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 63;
 80013aa:	233f      	movs	r3, #63	@ 0x3f
 80013ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ae:	2300      	movs	r3, #0
 80013b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013b2:	2300      	movs	r3, #0
 80013b4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013c6:	2200      	movs	r2, #0
 80013c8:	4619      	mov	r1, r3
 80013ca:	4820      	ldr	r0, [pc, #128]	@ (800144c <MX_TIM1_Init+0x134>)
 80013cc:	f002 f9b2 	bl	8003734 <HAL_TIM_PWM_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80013d6:	f000 f90b 	bl	80015f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013de:	2204      	movs	r2, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	481a      	ldr	r0, [pc, #104]	@ (800144c <MX_TIM1_Init+0x134>)
 80013e4:	f002 f9a6 	bl	8003734 <HAL_TIM_PWM_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80013ee:	f000 f8ff 	bl	80015f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 1;
 80013fe:	2301      	movs	r3, #1
 8001400:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001406:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800140a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001418:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001422:	2300      	movs	r3, #0
 8001424:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	4619      	mov	r1, r3
 800142e:	4807      	ldr	r0, [pc, #28]	@ (800144c <MX_TIM1_Init+0x134>)
 8001430:	f003 f9a2 	bl	8004778 <HAL_TIMEx_ConfigBreakDeadTime>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800143a:	f000 f8d9 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800143e:	4803      	ldr	r0, [pc, #12]	@ (800144c <MX_TIM1_Init+0x134>)
 8001440:	f000 f998 	bl	8001774 <HAL_TIM_MspPostInit>

}
 8001444:	bf00      	nop
 8001446:	3760      	adds	r7, #96	@ 0x60
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000344 	.word	0x20000344
 8001450:	40012c00 	.word	0x40012c00

08001454 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145a:	f107 0310 	add.w	r3, r7, #16
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001472:	4b1d      	ldr	r3, [pc, #116]	@ (80014e8 <MX_TIM3_Init+0x94>)
 8001474:	4a1d      	ldr	r2, [pc, #116]	@ (80014ec <MX_TIM3_Init+0x98>)
 8001476:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001478:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <MX_TIM3_Init+0x94>)
 800147a:	2200      	movs	r2, #0
 800147c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147e:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <MX_TIM3_Init+0x94>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 8001484:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <MX_TIM3_Init+0x94>)
 8001486:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800148a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148c:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <MX_TIM3_Init+0x94>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001492:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <MX_TIM3_Init+0x94>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001498:	4813      	ldr	r0, [pc, #76]	@ (80014e8 <MX_TIM3_Init+0x94>)
 800149a:	f001 ff19 	bl	80032d0 <HAL_TIM_Base_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80014a4:	f000 f8a4 	bl	80015f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	4619      	mov	r1, r3
 80014b4:	480c      	ldr	r0, [pc, #48]	@ (80014e8 <MX_TIM3_Init+0x94>)
 80014b6:	f002 fa51 	bl	800395c <HAL_TIM_ConfigClockSource>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014c0:	f000 f896 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014c4:	2320      	movs	r3, #32
 80014c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <MX_TIM3_Init+0x94>)
 80014d2:	f003 f8bb 	bl	800464c <HAL_TIMEx_MasterConfigSynchronization>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014dc:	f000 f888 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	3720      	adds	r7, #32
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000390 	.word	0x20000390
 80014ec:	40000400 	.word	0x40000400

080014f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <MX_DMA_Init+0x78>)
 80014f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001568 <MX_DMA_Init+0x78>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6493      	str	r3, [r2, #72]	@ 0x48
 8001502:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <MX_DMA_Init+0x78>)
 8001504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800150e:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <MX_DMA_Init+0x78>)
 8001510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001512:	4a15      	ldr	r2, [pc, #84]	@ (8001568 <MX_DMA_Init+0x78>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6493      	str	r3, [r2, #72]	@ 0x48
 800151a:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <MX_DMA_Init+0x78>)
 800151c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001526:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <MX_DMA_Init+0x78>)
 8001528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800152a:	4a0f      	ldr	r2, [pc, #60]	@ (8001568 <MX_DMA_Init+0x78>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6493      	str	r3, [r2, #72]	@ 0x48
 8001532:	4b0d      	ldr	r3, [pc, #52]	@ (8001568 <MX_DMA_Init+0x78>)
 8001534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	200b      	movs	r0, #11
 8001544:	f000 fc2f 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001548:	200b      	movs	r0, #11
 800154a:	f000 fc46 	bl	8001dda <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	2038      	movs	r0, #56	@ 0x38
 8001554:	f000 fc27 	bl	8001da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001558:	2038      	movs	r0, #56	@ 0x38
 800155a:	f000 fc3e 	bl	8001dda <HAL_NVIC_EnableIRQ>

}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000

0800156c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <MX_GPIO_Init+0x5c>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a14      	ldr	r2, [pc, #80]	@ (80015c8 <MX_GPIO_Init+0x5c>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <MX_GPIO_Init+0x5c>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <MX_GPIO_Init+0x5c>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	4a0e      	ldr	r2, [pc, #56]	@ (80015c8 <MX_GPIO_Init+0x5c>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001596:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <MX_GPIO_Init+0x5c>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <MX_GPIO_Init+0x5c>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	4a08      	ldr	r2, [pc, #32]	@ (80015c8 <MX_GPIO_Init+0x5c>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <MX_GPIO_Init+0x5c>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000

080015cc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80015d4:	1d39      	adds	r1, r7, #4
 80015d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015da:	2201      	movs	r2, #1
 80015dc:	4803      	ldr	r0, [pc, #12]	@ (80015ec <__io_putchar+0x20>)
 80015de:	f003 f9d4 	bl	800498a <HAL_UART_Transmit>
  return ch;
 80015e2:	687b      	ldr	r3, [r7, #4]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200002b0 	.word	0x200002b0

080015f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f4:	b672      	cpsid	i
}
 80015f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <Error_Handler+0x8>

080015fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <HAL_MspInit+0x44>)
 8001604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001606:	4a0e      	ldr	r2, [pc, #56]	@ (8001640 <HAL_MspInit+0x44>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6613      	str	r3, [r2, #96]	@ 0x60
 800160e:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <HAL_MspInit+0x44>)
 8001610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <HAL_MspInit+0x44>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	4a08      	ldr	r2, [pc, #32]	@ (8001640 <HAL_MspInit+0x44>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001624:	6593      	str	r3, [r2, #88]	@ 0x58
 8001626:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_MspInit+0x44>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001632:	f000 fec1 	bl	80023b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000

08001644 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b09e      	sub	sp, #120	@ 0x78
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	2254      	movs	r2, #84	@ 0x54
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f004 fe5f 	bl	8006328 <memset>
  if(huart->Instance==LPUART1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a1f      	ldr	r2, [pc, #124]	@ (80016ec <HAL_UART_MspInit+0xa8>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d136      	bne.n	80016e2 <HAL_UART_MspInit+0x9e>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001674:	2320      	movs	r3, #32
 8001676:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001678:	2300      	movs	r3, #0
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	4618      	mov	r0, r3
 8001682:	f001 fbd7 	bl	8002e34 <HAL_RCCEx_PeriphCLKConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800168c:	f7ff ffb0 	bl	80015f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001690:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <HAL_UART_MspInit+0xac>)
 8001692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001694:	4a16      	ldr	r2, [pc, #88]	@ (80016f0 <HAL_UART_MspInit+0xac>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <HAL_UART_MspInit+0xac>)
 800169e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <HAL_UART_MspInit+0xac>)
 80016aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ac:	4a10      	ldr	r2, [pc, #64]	@ (80016f0 <HAL_UART_MspInit+0xac>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <HAL_UART_MspInit+0xac>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016c0:	230c      	movs	r3, #12
 80016c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80016d0:	230c      	movs	r3, #12
 80016d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016d8:	4619      	mov	r1, r3
 80016da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016de:	f000 fc45 	bl	8001f6c <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80016e2:	bf00      	nop
 80016e4:	3778      	adds	r7, #120	@ 0x78
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40008000 	.word	0x40008000
 80016f0:	40021000 	.word	0x40021000

080016f4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <HAL_TIM_PWM_MspInit+0x38>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d10b      	bne.n	800171e <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001706:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <HAL_TIM_PWM_MspInit+0x3c>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170a:	4a09      	ldr	r2, [pc, #36]	@ (8001730 <HAL_TIM_PWM_MspInit+0x3c>)
 800170c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001710:	6613      	str	r3, [r2, #96]	@ 0x60
 8001712:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <HAL_TIM_PWM_MspInit+0x3c>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001716:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40012c00 	.word	0x40012c00
 8001730:	40021000 	.word	0x40021000

08001734 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <HAL_TIM_Base_MspInit+0x38>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d10b      	bne.n	800175e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <HAL_TIM_Base_MspInit+0x3c>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174a:	4a09      	ldr	r2, [pc, #36]	@ (8001770 <HAL_TIM_Base_MspInit+0x3c>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6593      	str	r3, [r2, #88]	@ 0x58
 8001752:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <HAL_TIM_Base_MspInit+0x3c>)
 8001754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40000400 	.word	0x40000400
 8001770:	40021000 	.word	0x40021000

08001774 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	@ 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a27      	ldr	r2, [pc, #156]	@ (8001830 <HAL_TIM_MspPostInit+0xbc>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d148      	bne.n	8001828 <HAL_TIM_MspPostInit+0xb4>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001796:	4b27      	ldr	r3, [pc, #156]	@ (8001834 <HAL_TIM_MspPostInit+0xc0>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	4a26      	ldr	r2, [pc, #152]	@ (8001834 <HAL_TIM_MspPostInit+0xc0>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a2:	4b24      	ldr	r3, [pc, #144]	@ (8001834 <HAL_TIM_MspPostInit+0xc0>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	4b21      	ldr	r3, [pc, #132]	@ (8001834 <HAL_TIM_MspPostInit+0xc0>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b2:	4a20      	ldr	r2, [pc, #128]	@ (8001834 <HAL_TIM_MspPostInit+0xc0>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001834 <HAL_TIM_MspPostInit+0xc0>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    PC13     ------> TIM1_CH1N
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80017d8:	2304      	movs	r3, #4
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4619      	mov	r1, r3
 80017e2:	4815      	ldr	r0, [pc, #84]	@ (8001838 <HAL_TIM_MspPostInit+0xc4>)
 80017e4:	f000 fbc2 	bl	8001f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017e8:	2303      	movs	r3, #3
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80017f8:	2302      	movs	r3, #2
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	480d      	ldr	r0, [pc, #52]	@ (8001838 <HAL_TIM_MspPostInit+0xc4>)
 8001804:	f000 fbb2 	bl	8001f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001808:	2301      	movs	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001818:	2306      	movs	r3, #6
 800181a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	4806      	ldr	r0, [pc, #24]	@ (800183c <HAL_TIM_MspPostInit+0xc8>)
 8001824:	f000 fba2 	bl	8001f6c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	@ 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40012c00 	.word	0x40012c00
 8001834:	40021000 	.word	0x40021000
 8001838:	48000800 	.word	0x48000800
 800183c:	48000400 	.word	0x48000400

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <NMI_Handler+0x4>

08001848 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <MemManage_Handler+0x4>

08001858 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <BusFault_Handler+0x4>

08001860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <UsageFault_Handler+0x4>

08001868 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001896:	f000 f96b 	bl	8001b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <DMA1_Channel1_IRQHandler+0x10>)
 80018a6:	f000 fab2 	bl	8001e0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200001f0 	.word	0x200001f0

080018b4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80018b8:	4802      	ldr	r0, [pc, #8]	@ (80018c4 <DMA2_Channel1_IRQHandler+0x10>)
 80018ba:	f000 faa8 	bl	8001e0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000250 	.word	0x20000250

080018c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return 1;
 80018cc:	2301      	movs	r3, #1
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_kill>:

int _kill(int pid, int sig)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018e2:	f004 fd29 	bl	8006338 <__errno>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2216      	movs	r2, #22
 80018ea:	601a      	str	r2, [r3, #0]
  return -1;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_exit>:

void _exit (int status)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001900:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ffe7 	bl	80018d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800190a:	bf00      	nop
 800190c:	e7fd      	b.n	800190a <_exit+0x12>

0800190e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	e00a      	b.n	8001936 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001920:	f3af 8000 	nop.w
 8001924:	4601      	mov	r1, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	60ba      	str	r2, [r7, #8]
 800192c:	b2ca      	uxtb	r2, r1
 800192e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	429a      	cmp	r2, r3
 800193c:	dbf0      	blt.n	8001920 <_read+0x12>
  }

  return len;
 800193e:	687b      	ldr	r3, [r7, #4]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	e009      	b.n	800196e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	60ba      	str	r2, [r7, #8]
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fe32 	bl	80015cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3301      	adds	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	429a      	cmp	r2, r3
 8001974:	dbf1      	blt.n	800195a <_write+0x12>
  }
  return len;
 8001976:	687b      	ldr	r3, [r7, #4]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_close>:

int _close(int file)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001988:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019a8:	605a      	str	r2, [r3, #4]
  return 0;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_isatty>:

int _isatty(int file)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019c0:	2301      	movs	r3, #1
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b085      	sub	sp, #20
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f0:	4a14      	ldr	r2, [pc, #80]	@ (8001a44 <_sbrk+0x5c>)
 80019f2:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <_sbrk+0x60>)
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019fc:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <_sbrk+0x64>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	@ (8001a50 <_sbrk+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0a:	4b10      	ldr	r3, [pc, #64]	@ (8001a4c <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d207      	bcs.n	8001a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a18:	f004 fc8e 	bl	8006338 <__errno>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	220c      	movs	r2, #12
 8001a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a26:	e009      	b.n	8001a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a28:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	@ (8001a4c <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	4a05      	ldr	r2, [pc, #20]	@ (8001a4c <_sbrk+0x64>)
 8001a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20020000 	.word	0x20020000
 8001a48:	00000400 	.word	0x00000400
 8001a4c:	200003dc 	.word	0x200003dc
 8001a50:	20000530 	.word	0x20000530

08001a54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a58:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <SystemInit+0x20>)
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a5e:	4a05      	ldr	r2, [pc, #20]	@ (8001a74 <SystemInit+0x20>)
 8001a60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a78:	480d      	ldr	r0, [pc, #52]	@ (8001ab0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a7c:	f7ff ffea 	bl	8001a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a80:	480c      	ldr	r0, [pc, #48]	@ (8001ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a82:	490d      	ldr	r1, [pc, #52]	@ (8001ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a84:	4a0d      	ldr	r2, [pc, #52]	@ (8001abc <LoopForever+0xe>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a88:	e002      	b.n	8001a90 <LoopCopyDataInit>

08001a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8e:	3304      	adds	r3, #4

08001a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a94:	d3f9      	bcc.n	8001a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a98:	4c0a      	ldr	r4, [pc, #40]	@ (8001ac4 <LoopForever+0x16>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a9c:	e001      	b.n	8001aa2 <LoopFillZerobss>

08001a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa0:	3204      	adds	r2, #4

08001aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa4:	d3fb      	bcc.n	8001a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aa6:	f004 fc4d 	bl	8006344 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aaa:	f7ff fa3b 	bl	8000f24 <main>

08001aae <LoopForever>:

LoopForever:
    b LoopForever
 8001aae:	e7fe      	b.n	8001aae <LoopForever>
  ldr   r0, =_estack
 8001ab0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001abc:	080086ac 	.word	0x080086ac
  ldr r2, =_sbss
 8001ac0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ac4:	20000530 	.word	0x20000530

08001ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ac8:	e7fe      	b.n	8001ac8 <ADC1_2_IRQHandler>

08001aca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f000 f95b 	bl	8001d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 f80e 	bl	8001afc <HAL_InitTick>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	71fb      	strb	r3, [r7, #7]
 8001aea:	e001      	b.n	8001af0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aec:	f7ff fd86 	bl	80015fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001af0:	79fb      	ldrb	r3, [r7, #7]

}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b08:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <HAL_InitTick+0x68>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d022      	beq.n	8001b56 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b10:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <HAL_InitTick+0x6c>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <HAL_InitTick+0x68>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b24:	4618      	mov	r0, r3
 8001b26:	f000 f966 	bl	8001df6 <HAL_SYSTICK_Config>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10f      	bne.n	8001b50 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b0f      	cmp	r3, #15
 8001b34:	d809      	bhi.n	8001b4a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b36:	2200      	movs	r2, #0
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b3e:	f000 f932 	bl	8001da6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <HAL_InitTick+0x70>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	e007      	b.n	8001b5a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	73fb      	strb	r3, [r7, #15]
 8001b4e:	e004      	b.n	8001b5a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e001      	b.n	8001b5a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000008 	.word	0x20000008
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <HAL_IncTick+0x1c>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <HAL_IncTick+0x20>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a03      	ldr	r2, [pc, #12]	@ (8001b8c <HAL_IncTick+0x1c>)
 8001b80:	6013      	str	r3, [r2, #0]
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	200003e0 	.word	0x200003e0
 8001b90:	20000008 	.word	0x20000008

08001b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return uwTick;
 8001b98:	4b03      	ldr	r3, [pc, #12]	@ (8001ba8 <HAL_GetTick+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	200003e0 	.word	0x200003e0

08001bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff ffee 	bl	8001b94 <HAL_GetTick>
 8001bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bc4:	d004      	beq.n	8001bd0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <HAL_Delay+0x40>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	4413      	add	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd0:	bf00      	nop
 8001bd2:	f7ff ffdf 	bl	8001b94 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d8f7      	bhi.n	8001bd2 <HAL_Delay+0x26>
  {
  }
}
 8001be2:	bf00      	nop
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000008 	.word	0x20000008

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	@ (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db0b      	blt.n	8001c7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4907      	ldr	r1, [pc, #28]	@ (8001c8c <__NVIC_EnableIRQ+0x38>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	@ (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	@ (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	@ 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	@ 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d5c:	d301      	bcc.n	8001d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00f      	b.n	8001d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d62:	4a0a      	ldr	r2, [pc, #40]	@ (8001d8c <SysTick_Config+0x40>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d70:	f7ff ff8e 	bl	8001c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d74:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <SysTick_Config+0x40>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7a:	4b04      	ldr	r3, [pc, #16]	@ (8001d8c <SysTick_Config+0x40>)
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	e000e010 	.word	0xe000e010

08001d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff29 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001db4:	f7ff ff40 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001db8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7ff ff90 	bl	8001ce4 <NVIC_EncodePriority>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff5f 	bl	8001c90 <__NVIC_SetPriority>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff33 	bl	8001c54 <__NVIC_EnableIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffa4 	bl	8001d4c <SysTick_Config>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	2204      	movs	r2, #4
 8001e30:	409a      	lsls	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d026      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x7a>
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d021      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d107      	bne.n	8001e62 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0204 	bic.w	r2, r2, #4
 8001e60:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e66:	f003 021f 	and.w	r2, r3, #31
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	2104      	movs	r1, #4
 8001e70:	fa01 f202 	lsl.w	r2, r1, r2
 8001e74:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d071      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001e86:	e06c      	b.n	8001f62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	2202      	movs	r2, #2
 8001e92:	409a      	lsls	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d02e      	beq.n	8001efa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d029      	beq.n	8001efa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10b      	bne.n	8001ecc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 020a 	bic.w	r2, r2, #10
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed0:	f003 021f 	and.w	r2, r3, #31
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed8:	2102      	movs	r1, #2
 8001eda:	fa01 f202 	lsl.w	r2, r1, r2
 8001ede:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d038      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001ef8:	e033      	b.n	8001f62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	2208      	movs	r2, #8
 8001f04:	409a      	lsls	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d02a      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d025      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 020e 	bic.w	r2, r2, #14
 8001f26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	2101      	movs	r1, #1
 8001f36:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d004      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f62:	bf00      	nop
 8001f64:	bf00      	nop
}
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f7a:	e15a      	b.n	8002232 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2101      	movs	r1, #1
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 814c 	beq.w	800222c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d005      	beq.n	8001fac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d130      	bne.n	800200e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	f003 0201 	and.w	r2, r3, #1
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b03      	cmp	r3, #3
 8002018:	d017      	beq.n	800204a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d123      	bne.n	800209e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	08da      	lsrs	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3208      	adds	r2, #8
 800205e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	220f      	movs	r2, #15
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	08da      	lsrs	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3208      	adds	r2, #8
 8002098:	6939      	ldr	r1, [r7, #16]
 800209a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0203 	and.w	r2, r3, #3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80a6 	beq.w	800222c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e0:	4b5b      	ldr	r3, [pc, #364]	@ (8002250 <HAL_GPIO_Init+0x2e4>)
 80020e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e4:	4a5a      	ldr	r2, [pc, #360]	@ (8002250 <HAL_GPIO_Init+0x2e4>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80020ec:	4b58      	ldr	r3, [pc, #352]	@ (8002250 <HAL_GPIO_Init+0x2e4>)
 80020ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f8:	4a56      	ldr	r2, [pc, #344]	@ (8002254 <HAL_GPIO_Init+0x2e8>)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	3302      	adds	r3, #2
 8002100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	220f      	movs	r2, #15
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002122:	d01f      	beq.n	8002164 <HAL_GPIO_Init+0x1f8>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a4c      	ldr	r2, [pc, #304]	@ (8002258 <HAL_GPIO_Init+0x2ec>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d019      	beq.n	8002160 <HAL_GPIO_Init+0x1f4>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a4b      	ldr	r2, [pc, #300]	@ (800225c <HAL_GPIO_Init+0x2f0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d013      	beq.n	800215c <HAL_GPIO_Init+0x1f0>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a4a      	ldr	r2, [pc, #296]	@ (8002260 <HAL_GPIO_Init+0x2f4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00d      	beq.n	8002158 <HAL_GPIO_Init+0x1ec>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a49      	ldr	r2, [pc, #292]	@ (8002264 <HAL_GPIO_Init+0x2f8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <HAL_GPIO_Init+0x1e8>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a48      	ldr	r2, [pc, #288]	@ (8002268 <HAL_GPIO_Init+0x2fc>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_GPIO_Init+0x1e4>
 800214c:	2305      	movs	r3, #5
 800214e:	e00a      	b.n	8002166 <HAL_GPIO_Init+0x1fa>
 8002150:	2306      	movs	r3, #6
 8002152:	e008      	b.n	8002166 <HAL_GPIO_Init+0x1fa>
 8002154:	2304      	movs	r3, #4
 8002156:	e006      	b.n	8002166 <HAL_GPIO_Init+0x1fa>
 8002158:	2303      	movs	r3, #3
 800215a:	e004      	b.n	8002166 <HAL_GPIO_Init+0x1fa>
 800215c:	2302      	movs	r3, #2
 800215e:	e002      	b.n	8002166 <HAL_GPIO_Init+0x1fa>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <HAL_GPIO_Init+0x1fa>
 8002164:	2300      	movs	r3, #0
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	f002 0203 	and.w	r2, r2, #3
 800216c:	0092      	lsls	r2, r2, #2
 800216e:	4093      	lsls	r3, r2
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002176:	4937      	ldr	r1, [pc, #220]	@ (8002254 <HAL_GPIO_Init+0x2e8>)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	3302      	adds	r3, #2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002184:	4b39      	ldr	r3, [pc, #228]	@ (800226c <HAL_GPIO_Init+0x300>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021a8:	4a30      	ldr	r2, [pc, #192]	@ (800226c <HAL_GPIO_Init+0x300>)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021ae:	4b2f      	ldr	r3, [pc, #188]	@ (800226c <HAL_GPIO_Init+0x300>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4013      	ands	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021d2:	4a26      	ldr	r2, [pc, #152]	@ (800226c <HAL_GPIO_Init+0x300>)
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80021d8:	4b24      	ldr	r3, [pc, #144]	@ (800226c <HAL_GPIO_Init+0x300>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021fc:	4a1b      	ldr	r2, [pc, #108]	@ (800226c <HAL_GPIO_Init+0x300>)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002202:	4b1a      	ldr	r3, [pc, #104]	@ (800226c <HAL_GPIO_Init+0x300>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	43db      	mvns	r3, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002226:	4a11      	ldr	r2, [pc, #68]	@ (800226c <HAL_GPIO_Init+0x300>)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3301      	adds	r3, #1
 8002230:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	f47f ae9d 	bne.w	8001f7c <HAL_GPIO_Init+0x10>
  }
}
 8002242:	bf00      	nop
 8002244:	bf00      	nop
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	40021000 	.word	0x40021000
 8002254:	40010000 	.word	0x40010000
 8002258:	48000400 	.word	0x48000400
 800225c:	48000800 	.word	0x48000800
 8002260:	48000c00 	.word	0x48000c00
 8002264:	48001000 	.word	0x48001000
 8002268:	48001400 	.word	0x48001400
 800226c:	40010400 	.word	0x40010400

08002270 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d141      	bne.n	8002302 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800227e:	4b4b      	ldr	r3, [pc, #300]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800228a:	d131      	bne.n	80022f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800228c:	4b47      	ldr	r3, [pc, #284]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002292:	4a46      	ldr	r2, [pc, #280]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002298:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800229c:	4b43      	ldr	r3, [pc, #268]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022a4:	4a41      	ldr	r2, [pc, #260]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022ac:	4b40      	ldr	r3, [pc, #256]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2232      	movs	r2, #50	@ 0x32
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	4a3f      	ldr	r2, [pc, #252]	@ (80023b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	0c9b      	lsrs	r3, r3, #18
 80022be:	3301      	adds	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022c2:	e002      	b.n	80022ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ca:	4b38      	ldr	r3, [pc, #224]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022d6:	d102      	bne.n	80022de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f2      	bne.n	80022c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022de:	4b33      	ldr	r3, [pc, #204]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ea:	d158      	bne.n	800239e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e057      	b.n	80023a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022f0:	4b2e      	ldr	r3, [pc, #184]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022f6:	4a2d      	ldr	r2, [pc, #180]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002300:	e04d      	b.n	800239e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002308:	d141      	bne.n	800238e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800230a:	4b28      	ldr	r3, [pc, #160]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002316:	d131      	bne.n	800237c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002318:	4b24      	ldr	r3, [pc, #144]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800231e:	4a23      	ldr	r2, [pc, #140]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002324:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002328:	4b20      	ldr	r3, [pc, #128]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002330:	4a1e      	ldr	r2, [pc, #120]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002332:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002336:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002338:	4b1d      	ldr	r3, [pc, #116]	@ (80023b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2232      	movs	r2, #50	@ 0x32
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	4a1c      	ldr	r2, [pc, #112]	@ (80023b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	0c9b      	lsrs	r3, r3, #18
 800234a:	3301      	adds	r3, #1
 800234c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800234e:	e002      	b.n	8002356 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3b01      	subs	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002356:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800235e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002362:	d102      	bne.n	800236a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f2      	bne.n	8002350 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800236a:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002376:	d112      	bne.n	800239e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e011      	b.n	80023a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800237c:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002382:	4a0a      	ldr	r2, [pc, #40]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002388:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800238c:	e007      	b.n	800239e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800238e:	4b07      	ldr	r3, [pc, #28]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002396:	4a05      	ldr	r2, [pc, #20]	@ (80023ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002398:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800239c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	40007000 	.word	0x40007000
 80023b0:	20000000 	.word	0x20000000
 80023b4:	431bde83 	.word	0x431bde83

080023b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80023bc:	4b05      	ldr	r3, [pc, #20]	@ (80023d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4a04      	ldr	r2, [pc, #16]	@ (80023d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c6:	6093      	str	r3, [r2, #8]
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40007000 	.word	0x40007000

080023d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e2fe      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d075      	beq.n	80024e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f6:	4b97      	ldr	r3, [pc, #604]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002400:	4b94      	ldr	r3, [pc, #592]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	2b0c      	cmp	r3, #12
 800240e:	d102      	bne.n	8002416 <HAL_RCC_OscConfig+0x3e>
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d002      	beq.n	800241c <HAL_RCC_OscConfig+0x44>
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b08      	cmp	r3, #8
 800241a:	d10b      	bne.n	8002434 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	4b8d      	ldr	r3, [pc, #564]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d05b      	beq.n	80024e0 <HAL_RCC_OscConfig+0x108>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d157      	bne.n	80024e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e2d9      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800243c:	d106      	bne.n	800244c <HAL_RCC_OscConfig+0x74>
 800243e:	4b85      	ldr	r3, [pc, #532]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a84      	ldr	r2, [pc, #528]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e01d      	b.n	8002488 <HAL_RCC_OscConfig+0xb0>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0x98>
 8002456:	4b7f      	ldr	r3, [pc, #508]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a7e      	ldr	r2, [pc, #504]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 800245c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b7c      	ldr	r3, [pc, #496]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7b      	ldr	r2, [pc, #492]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e00b      	b.n	8002488 <HAL_RCC_OscConfig+0xb0>
 8002470:	4b78      	ldr	r3, [pc, #480]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a77      	ldr	r2, [pc, #476]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 8002476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b75      	ldr	r3, [pc, #468]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a74      	ldr	r2, [pc, #464]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 8002482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7ff fb80 	bl	8001b94 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7ff fb7c 	bl	8001b94 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	@ 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e29e      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0xc0>
 80024b6:	e014      	b.n	80024e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7ff fb6c 	bl	8001b94 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c0:	f7ff fb68 	bl	8001b94 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	@ 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e28a      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024d2:	4b60      	ldr	r3, [pc, #384]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0xe8>
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d075      	beq.n	80025da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ee:	4b59      	ldr	r3, [pc, #356]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f8:	4b56      	ldr	r3, [pc, #344]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2b0c      	cmp	r3, #12
 8002506:	d102      	bne.n	800250e <HAL_RCC_OscConfig+0x136>
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d002      	beq.n	8002514 <HAL_RCC_OscConfig+0x13c>
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b04      	cmp	r3, #4
 8002512:	d11f      	bne.n	8002554 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002514:	4b4f      	ldr	r3, [pc, #316]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_OscConfig+0x154>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e25d      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252c:	4b49      	ldr	r3, [pc, #292]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	061b      	lsls	r3, r3, #24
 800253a:	4946      	ldr	r1, [pc, #280]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002540:	4b45      	ldr	r3, [pc, #276]	@ (8002658 <HAL_RCC_OscConfig+0x280>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fad9 	bl	8001afc <HAL_InitTick>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d043      	beq.n	80025d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e249      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d023      	beq.n	80025a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800255c:	4b3d      	ldr	r3, [pc, #244]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a3c      	ldr	r2, [pc, #240]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 8002562:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7ff fb14 	bl	8001b94 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002570:	f7ff fb10 	bl	8001b94 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e232      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002582:	4b34      	ldr	r3, [pc, #208]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258e:	4b31      	ldr	r3, [pc, #196]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	061b      	lsls	r3, r3, #24
 800259c:	492d      	ldr	r1, [pc, #180]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]
 80025a2:	e01a      	b.n	80025da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 80025aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7ff faf0 	bl	8001b94 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b8:	f7ff faec 	bl	8001b94 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e20e      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ca:	4b22      	ldr	r3, [pc, #136]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x1e0>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d041      	beq.n	800266a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d01c      	beq.n	8002628 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ee:	4b19      	ldr	r3, [pc, #100]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 80025f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025f4:	4a17      	ldr	r2, [pc, #92]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fe:	f7ff fac9 	bl	8001b94 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002606:	f7ff fac5 	bl	8001b94 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e1e7      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002618:	4b0e      	ldr	r3, [pc, #56]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 800261a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0ef      	beq.n	8002606 <HAL_RCC_OscConfig+0x22e>
 8002626:	e020      	b.n	800266a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002628:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 800262a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800262e:	4a09      	ldr	r2, [pc, #36]	@ (8002654 <HAL_RCC_OscConfig+0x27c>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7ff faac 	bl	8001b94 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800263e:	e00d      	b.n	800265c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002640:	f7ff faa8 	bl	8001b94 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d906      	bls.n	800265c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e1ca      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000
 8002658:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800265c:	4b8c      	ldr	r3, [pc, #560]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 800265e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1ea      	bne.n	8002640 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 80a6 	beq.w	80027c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002678:	2300      	movs	r3, #0
 800267a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800267c:	4b84      	ldr	r3, [pc, #528]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_RCC_OscConfig+0x2b4>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_RCC_OscConfig+0x2b6>
 800268c:	2300      	movs	r3, #0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00d      	beq.n	80026ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	4b7f      	ldr	r3, [pc, #508]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 8002694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002696:	4a7e      	ldr	r2, [pc, #504]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 8002698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800269c:	6593      	str	r3, [r2, #88]	@ 0x58
 800269e:	4b7c      	ldr	r3, [pc, #496]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 80026a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026aa:	2301      	movs	r3, #1
 80026ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ae:	4b79      	ldr	r3, [pc, #484]	@ (8002894 <HAL_RCC_OscConfig+0x4bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d118      	bne.n	80026ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026ba:	4b76      	ldr	r3, [pc, #472]	@ (8002894 <HAL_RCC_OscConfig+0x4bc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a75      	ldr	r2, [pc, #468]	@ (8002894 <HAL_RCC_OscConfig+0x4bc>)
 80026c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c6:	f7ff fa65 	bl	8001b94 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7ff fa61 	bl	8001b94 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e183      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002894 <HAL_RCC_OscConfig+0x4bc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d108      	bne.n	8002706 <HAL_RCC_OscConfig+0x32e>
 80026f4:	4b66      	ldr	r3, [pc, #408]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fa:	4a65      	ldr	r2, [pc, #404]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002704:	e024      	b.n	8002750 <HAL_RCC_OscConfig+0x378>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b05      	cmp	r3, #5
 800270c:	d110      	bne.n	8002730 <HAL_RCC_OscConfig+0x358>
 800270e:	4b60      	ldr	r3, [pc, #384]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002714:	4a5e      	ldr	r2, [pc, #376]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 8002716:	f043 0304 	orr.w	r3, r3, #4
 800271a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800271e:	4b5c      	ldr	r3, [pc, #368]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002724:	4a5a      	ldr	r2, [pc, #360]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800272e:	e00f      	b.n	8002750 <HAL_RCC_OscConfig+0x378>
 8002730:	4b57      	ldr	r3, [pc, #348]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002736:	4a56      	ldr	r2, [pc, #344]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 8002738:	f023 0301 	bic.w	r3, r3, #1
 800273c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002740:	4b53      	ldr	r3, [pc, #332]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002746:	4a52      	ldr	r2, [pc, #328]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 8002748:	f023 0304 	bic.w	r3, r3, #4
 800274c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d016      	beq.n	8002786 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7ff fa1c 	bl	8001b94 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800275e:	e00a      	b.n	8002776 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002760:	f7ff fa18 	bl	8001b94 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e138      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002776:	4b46      	ldr	r3, [pc, #280]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 8002778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ed      	beq.n	8002760 <HAL_RCC_OscConfig+0x388>
 8002784:	e015      	b.n	80027b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002786:	f7ff fa05 	bl	8001b94 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7ff fa01 	bl	8001b94 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e121      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1ed      	bne.n	800278e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027b2:	7ffb      	ldrb	r3, [r7, #31]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d105      	bne.n	80027c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b8:	4b35      	ldr	r3, [pc, #212]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 80027ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027bc:	4a34      	ldr	r2, [pc, #208]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 80027be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0320 	and.w	r3, r3, #32
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d03c      	beq.n	800284a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d01c      	beq.n	8002812 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 80027da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027de:	4a2c      	ldr	r2, [pc, #176]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e8:	f7ff f9d4 	bl	8001b94 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027f0:	f7ff f9d0 	bl	8001b94 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e0f2      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002802:	4b23      	ldr	r3, [pc, #140]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 8002804:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0ef      	beq.n	80027f0 <HAL_RCC_OscConfig+0x418>
 8002810:	e01b      	b.n	800284a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002812:	4b1f      	ldr	r3, [pc, #124]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 8002814:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002818:	4a1d      	ldr	r2, [pc, #116]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 800281a:	f023 0301 	bic.w	r3, r3, #1
 800281e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002822:	f7ff f9b7 	bl	8001b94 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800282a:	f7ff f9b3 	bl	8001b94 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e0d5      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800283c:	4b14      	ldr	r3, [pc, #80]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 800283e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1ef      	bne.n	800282a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80c9 	beq.w	80029e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002854:	4b0e      	ldr	r3, [pc, #56]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b0c      	cmp	r3, #12
 800285e:	f000 8083 	beq.w	8002968 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d15e      	bne.n	8002928 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a08      	ldr	r2, [pc, #32]	@ (8002890 <HAL_RCC_OscConfig+0x4b8>)
 8002870:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7ff f98d 	bl	8001b94 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800287c:	e00c      	b.n	8002898 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287e:	f7ff f989 	bl	8001b94 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d905      	bls.n	8002898 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e0ab      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
 8002890:	40021000 	.word	0x40021000
 8002894:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002898:	4b55      	ldr	r3, [pc, #340]	@ (80029f0 <HAL_RCC_OscConfig+0x618>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1ec      	bne.n	800287e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a4:	4b52      	ldr	r3, [pc, #328]	@ (80029f0 <HAL_RCC_OscConfig+0x618>)
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	4b52      	ldr	r3, [pc, #328]	@ (80029f4 <HAL_RCC_OscConfig+0x61c>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6a11      	ldr	r1, [r2, #32]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028b4:	3a01      	subs	r2, #1
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	4311      	orrs	r1, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80028be:	0212      	lsls	r2, r2, #8
 80028c0:	4311      	orrs	r1, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028c6:	0852      	lsrs	r2, r2, #1
 80028c8:	3a01      	subs	r2, #1
 80028ca:	0552      	lsls	r2, r2, #21
 80028cc:	4311      	orrs	r1, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028d2:	0852      	lsrs	r2, r2, #1
 80028d4:	3a01      	subs	r2, #1
 80028d6:	0652      	lsls	r2, r2, #25
 80028d8:	4311      	orrs	r1, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028de:	06d2      	lsls	r2, r2, #27
 80028e0:	430a      	orrs	r2, r1
 80028e2:	4943      	ldr	r1, [pc, #268]	@ (80029f0 <HAL_RCC_OscConfig+0x618>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e8:	4b41      	ldr	r3, [pc, #260]	@ (80029f0 <HAL_RCC_OscConfig+0x618>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a40      	ldr	r2, [pc, #256]	@ (80029f0 <HAL_RCC_OscConfig+0x618>)
 80028ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028f4:	4b3e      	ldr	r3, [pc, #248]	@ (80029f0 <HAL_RCC_OscConfig+0x618>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a3d      	ldr	r2, [pc, #244]	@ (80029f0 <HAL_RCC_OscConfig+0x618>)
 80028fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7ff f948 	bl	8001b94 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7ff f944 	bl	8001b94 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e066      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291a:	4b35      	ldr	r3, [pc, #212]	@ (80029f0 <HAL_RCC_OscConfig+0x618>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x530>
 8002926:	e05e      	b.n	80029e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002928:	4b31      	ldr	r3, [pc, #196]	@ (80029f0 <HAL_RCC_OscConfig+0x618>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a30      	ldr	r2, [pc, #192]	@ (80029f0 <HAL_RCC_OscConfig+0x618>)
 800292e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7ff f92e 	bl	8001b94 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293c:	f7ff f92a 	bl	8001b94 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e04c      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800294e:	4b28      	ldr	r3, [pc, #160]	@ (80029f0 <HAL_RCC_OscConfig+0x618>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800295a:	4b25      	ldr	r3, [pc, #148]	@ (80029f0 <HAL_RCC_OscConfig+0x618>)
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	4924      	ldr	r1, [pc, #144]	@ (80029f0 <HAL_RCC_OscConfig+0x618>)
 8002960:	4b25      	ldr	r3, [pc, #148]	@ (80029f8 <HAL_RCC_OscConfig+0x620>)
 8002962:	4013      	ands	r3, r2
 8002964:	60cb      	str	r3, [r1, #12]
 8002966:	e03e      	b.n	80029e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e039      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002974:	4b1e      	ldr	r3, [pc, #120]	@ (80029f0 <HAL_RCC_OscConfig+0x618>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f003 0203 	and.w	r2, r3, #3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	429a      	cmp	r2, r3
 8002986:	d12c      	bne.n	80029e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	3b01      	subs	r3, #1
 8002994:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002996:	429a      	cmp	r2, r3
 8002998:	d123      	bne.n	80029e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d11b      	bne.n	80029e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d113      	bne.n	80029e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c4:	085b      	lsrs	r3, r3, #1
 80029c6:	3b01      	subs	r3, #1
 80029c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d109      	bne.n	80029e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d8:	085b      	lsrs	r3, r3, #1
 80029da:	3b01      	subs	r3, #1
 80029dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000
 80029f4:	019f800c 	.word	0x019f800c
 80029f8:	feeefffc 	.word	0xfeeefffc

080029fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e11e      	b.n	8002c52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a14:	4b91      	ldr	r3, [pc, #580]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d910      	bls.n	8002a44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b8e      	ldr	r3, [pc, #568]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 020f 	bic.w	r2, r3, #15
 8002a2a:	498c      	ldr	r1, [pc, #560]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b8a      	ldr	r3, [pc, #552]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e106      	b.n	8002c52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d073      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d129      	bne.n	8002aac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a58:	4b81      	ldr	r3, [pc, #516]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0f4      	b.n	8002c52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a68:	f000 f99e 	bl	8002da8 <RCC_GetSysClockFreqFromPLLSource>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4a7c      	ldr	r2, [pc, #496]	@ (8002c64 <HAL_RCC_ClockConfig+0x268>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d93f      	bls.n	8002af6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a76:	4b7a      	ldr	r3, [pc, #488]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d033      	beq.n	8002af6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d12f      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a96:	4b72      	ldr	r3, [pc, #456]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a9e:	4a70      	ldr	r2, [pc, #448]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002aa4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002aa6:	2380      	movs	r3, #128	@ 0x80
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	e024      	b.n	8002af6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0c6      	b.n	8002c52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac4:	4b66      	ldr	r3, [pc, #408]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0be      	b.n	8002c52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ad4:	f000 f8ce 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4a61      	ldr	r2, [pc, #388]	@ (8002c64 <HAL_RCC_ClockConfig+0x268>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d909      	bls.n	8002af6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ae2:	4b5f      	ldr	r3, [pc, #380]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002aea:	4a5d      	ldr	r2, [pc, #372]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002af0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002af2:	2380      	movs	r3, #128	@ 0x80
 8002af4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002af6:	4b5a      	ldr	r3, [pc, #360]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4957      	ldr	r1, [pc, #348]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b08:	f7ff f844 	bl	8001b94 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f7ff f840 	bl	8001b94 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e095      	b.n	8002c52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b4e      	ldr	r3, [pc, #312]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 020c 	and.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1eb      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d023      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b50:	4b43      	ldr	r3, [pc, #268]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4a42      	ldr	r2, [pc, #264]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002b56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b5a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002b68:	4b3d      	ldr	r3, [pc, #244]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002b70:	4a3b      	ldr	r2, [pc, #236]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002b72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b39      	ldr	r3, [pc, #228]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4936      	ldr	r1, [pc, #216]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b80      	cmp	r3, #128	@ 0x80
 8002b90:	d105      	bne.n	8002b9e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b92:	4b33      	ldr	r3, [pc, #204]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	4a32      	ldr	r2, [pc, #200]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002b98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b9c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d21d      	bcs.n	8002be8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bac:	4b2b      	ldr	r3, [pc, #172]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f023 020f 	bic.w	r2, r3, #15
 8002bb4:	4929      	ldr	r1, [pc, #164]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe ffea 	bl	8001b94 <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc4:	f7fe ffe6 	bl	8001b94 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e03b      	b.n	8002c52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b20      	ldr	r3, [pc, #128]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d1ed      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4917      	ldr	r1, [pc, #92]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c12:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	490f      	ldr	r1, [pc, #60]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c26:	f000 f825 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	490c      	ldr	r1, [pc, #48]	@ (8002c68 <HAL_RCC_ClockConfig+0x26c>)
 8002c38:	5ccb      	ldrb	r3, [r1, r3]
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c42:	4a0a      	ldr	r2, [pc, #40]	@ (8002c6c <HAL_RCC_ClockConfig+0x270>)
 8002c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c46:	4b0a      	ldr	r3, [pc, #40]	@ (8002c70 <HAL_RCC_ClockConfig+0x274>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe ff56 	bl	8001afc <HAL_InitTick>
 8002c50:	4603      	mov	r3, r0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40022000 	.word	0x40022000
 8002c60:	40021000 	.word	0x40021000
 8002c64:	04c4b400 	.word	0x04c4b400
 8002c68:	080082e8 	.word	0x080082e8
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	20000004 	.word	0x20000004

08002c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d102      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c86:	4b2a      	ldr	r3, [pc, #168]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	e047      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c8c:	4b27      	ldr	r3, [pc, #156]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 030c 	and.w	r3, r3, #12
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c98:	4b26      	ldr	r3, [pc, #152]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	e03e      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c9e:	4b23      	ldr	r3, [pc, #140]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	d136      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002caa:	4b20      	ldr	r3, [pc, #128]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d10c      	bne.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd0:	4a16      	ldr	r2, [pc, #88]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cd2:	68d2      	ldr	r2, [r2, #12]
 8002cd4:	0a12      	lsrs	r2, r2, #8
 8002cd6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cda:	fb02 f303 	mul.w	r3, r2, r3
 8002cde:	617b      	str	r3, [r7, #20]
      break;
 8002ce0:	e00c      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ce2:	4a13      	ldr	r2, [pc, #76]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cea:	4a10      	ldr	r2, [pc, #64]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cec:	68d2      	ldr	r2, [r2, #12]
 8002cee:	0a12      	lsrs	r2, r2, #8
 8002cf0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002cf4:	fb02 f303 	mul.w	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
      break;
 8002cfa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	0e5b      	lsrs	r3, r3, #25
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	3301      	adds	r3, #1
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	e001      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d1c:	693b      	ldr	r3, [r7, #16]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	371c      	adds	r7, #28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	00f42400 	.word	0x00f42400
 8002d34:	016e3600 	.word	0x016e3600

08002d38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d3c:	4b03      	ldr	r3, [pc, #12]	@ (8002d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000000 	.word	0x20000000

08002d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d54:	f7ff fff0 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4904      	ldr	r1, [pc, #16]	@ (8002d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	080082f8 	.word	0x080082f8

08002d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d80:	f7ff ffda 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0adb      	lsrs	r3, r3, #11
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4904      	ldr	r1, [pc, #16]	@ (8002da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	080082f8 	.word	0x080082f8

08002da8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dae:	4b1e      	ldr	r3, [pc, #120]	@ (8002e28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002db8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d10c      	bne.n	8002de6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dcc:	4a17      	ldr	r2, [pc, #92]	@ (8002e2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd4:	4a14      	ldr	r2, [pc, #80]	@ (8002e28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002dd6:	68d2      	ldr	r2, [r2, #12]
 8002dd8:	0a12      	lsrs	r2, r2, #8
 8002dda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002dde:	fb02 f303 	mul.w	r3, r2, r3
 8002de2:	617b      	str	r3, [r7, #20]
    break;
 8002de4:	e00c      	b.n	8002e00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002de6:	4a12      	ldr	r2, [pc, #72]	@ (8002e30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dee:	4a0e      	ldr	r2, [pc, #56]	@ (8002e28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002df0:	68d2      	ldr	r2, [r2, #12]
 8002df2:	0a12      	lsrs	r2, r2, #8
 8002df4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002df8:	fb02 f303 	mul.w	r3, r2, r3
 8002dfc:	617b      	str	r3, [r7, #20]
    break;
 8002dfe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e00:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	0e5b      	lsrs	r3, r3, #25
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e1a:	687b      	ldr	r3, [r7, #4]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	016e3600 	.word	0x016e3600
 8002e30:	00f42400 	.word	0x00f42400

08002e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e40:	2300      	movs	r3, #0
 8002e42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8098 	beq.w	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e56:	4b43      	ldr	r3, [pc, #268]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10d      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	4b40      	ldr	r3, [pc, #256]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e66:	4a3f      	ldr	r2, [pc, #252]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e7e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a39      	ldr	r2, [pc, #228]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e8a:	f7fe fe83 	bl	8001b94 <HAL_GetTick>
 8002e8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e90:	e009      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e92:	f7fe fe7f 	bl	8001b94 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d902      	bls.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	74fb      	strb	r3, [r7, #19]
        break;
 8002ea4:	e005      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ea6:	4b30      	ldr	r3, [pc, #192]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0ef      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002eb2:	7cfb      	ldrb	r3, [r7, #19]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d159      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ec2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d01e      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d019      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ed4:	4b23      	ldr	r3, [pc, #140]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ede:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ee0:	4b20      	ldr	r3, [pc, #128]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ef8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f00:	4a18      	ldr	r2, [pc, #96]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d016      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f12:	f7fe fe3f 	bl	8001b94 <HAL_GetTick>
 8002f16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f18:	e00b      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fe fe3b 	bl	8001b94 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d902      	bls.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	74fb      	strb	r3, [r7, #19]
            break;
 8002f30:	e006      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f32:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0ec      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002f40:	7cfb      	ldrb	r3, [r7, #19]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10b      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f46:	4b07      	ldr	r3, [pc, #28]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f54:	4903      	ldr	r1, [pc, #12]	@ (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f5c:	e008      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f5e:	7cfb      	ldrb	r3, [r7, #19]
 8002f60:	74bb      	strb	r3, [r7, #18]
 8002f62:	e005      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f70:	7c7b      	ldrb	r3, [r7, #17]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d105      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f76:	4ba7      	ldr	r3, [pc, #668]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7a:	4aa6      	ldr	r2, [pc, #664]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f8e:	4ba1      	ldr	r3, [pc, #644]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f94:	f023 0203 	bic.w	r2, r3, #3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	499d      	ldr	r1, [pc, #628]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fb0:	4b98      	ldr	r3, [pc, #608]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb6:	f023 020c 	bic.w	r2, r3, #12
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	4995      	ldr	r1, [pc, #596]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fd2:	4b90      	ldr	r3, [pc, #576]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	498c      	ldr	r1, [pc, #560]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ff4:	4b87      	ldr	r3, [pc, #540]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	4984      	ldr	r1, [pc, #528]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003016:	4b7f      	ldr	r3, [pc, #508]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	497b      	ldr	r1, [pc, #492]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003038:	4b76      	ldr	r3, [pc, #472]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800303e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	4973      	ldr	r1, [pc, #460]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800305a:	4b6e      	ldr	r3, [pc, #440]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003060:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	496a      	ldr	r1, [pc, #424]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800307c:	4b65      	ldr	r3, [pc, #404]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003082:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	4962      	ldr	r1, [pc, #392]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800309e:	4b5d      	ldr	r3, [pc, #372]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ac:	4959      	ldr	r1, [pc, #356]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030c0:	4b54      	ldr	r3, [pc, #336]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030c6:	f023 0203 	bic.w	r2, r3, #3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ce:	4951      	ldr	r1, [pc, #324]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	4948      	ldr	r1, [pc, #288]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003100:	2b00      	cmp	r3, #0
 8003102:	d015      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003104:	4b43      	ldr	r3, [pc, #268]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	4940      	ldr	r1, [pc, #256]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003122:	d105      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003124:	4b3b      	ldr	r3, [pc, #236]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4a3a      	ldr	r2, [pc, #232]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800312e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003138:	2b00      	cmp	r3, #0
 800313a:	d015      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800313c:	4b35      	ldr	r3, [pc, #212]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003142:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314a:	4932      	ldr	r1, [pc, #200]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003156:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800315a:	d105      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800315c:	4b2d      	ldr	r3, [pc, #180]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a2c      	ldr	r2, [pc, #176]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003166:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d015      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003174:	4b27      	ldr	r3, [pc, #156]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003182:	4924      	ldr	r1, [pc, #144]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003192:	d105      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003194:	4b1f      	ldr	r3, [pc, #124]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4a1e      	ldr	r2, [pc, #120]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800319e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d015      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ac:	4b19      	ldr	r3, [pc, #100]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ba:	4916      	ldr	r1, [pc, #88]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031ca:	d105      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031cc:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4a10      	ldr	r2, [pc, #64]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d019      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	4908      	ldr	r1, [pc, #32]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003202:	d109      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003204:	4b03      	ldr	r3, [pc, #12]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a02      	ldr	r2, [pc, #8]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800320a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800320e:	60d3      	str	r3, [r2, #12]
 8003210:	e002      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d015      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003224:	4b29      	ldr	r3, [pc, #164]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003232:	4926      	ldr	r1, [pc, #152]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003242:	d105      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003244:	4b21      	ldr	r3, [pc, #132]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4a20      	ldr	r2, [pc, #128]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800324e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d015      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800325c:	4b1b      	ldr	r3, [pc, #108]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003262:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326a:	4918      	ldr	r1, [pc, #96]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800327a:	d105      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800327c:	4b13      	ldr	r3, [pc, #76]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4a12      	ldr	r2, [pc, #72]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003286:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d015      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003294:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003296:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800329a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a2:	490a      	ldr	r1, [pc, #40]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032b2:	d105      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b4:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a04      	ldr	r2, [pc, #16]	@ (80032cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80032c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000

080032d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e049      	b.n	8003376 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fe fa1c 	bl	8001734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f000 fc3a 	bl	8003b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d001      	beq.n	8003398 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e04c      	b.n	8003432 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a26      	ldr	r2, [pc, #152]	@ (8003440 <HAL_TIM_Base_Start+0xc0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d022      	beq.n	80033f0 <HAL_TIM_Base_Start+0x70>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b2:	d01d      	beq.n	80033f0 <HAL_TIM_Base_Start+0x70>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a22      	ldr	r2, [pc, #136]	@ (8003444 <HAL_TIM_Base_Start+0xc4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d018      	beq.n	80033f0 <HAL_TIM_Base_Start+0x70>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a21      	ldr	r2, [pc, #132]	@ (8003448 <HAL_TIM_Base_Start+0xc8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d013      	beq.n	80033f0 <HAL_TIM_Base_Start+0x70>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1f      	ldr	r2, [pc, #124]	@ (800344c <HAL_TIM_Base_Start+0xcc>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00e      	beq.n	80033f0 <HAL_TIM_Base_Start+0x70>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003450 <HAL_TIM_Base_Start+0xd0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d009      	beq.n	80033f0 <HAL_TIM_Base_Start+0x70>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003454 <HAL_TIM_Base_Start+0xd4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d004      	beq.n	80033f0 <HAL_TIM_Base_Start+0x70>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003458 <HAL_TIM_Base_Start+0xd8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d115      	bne.n	800341c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	4b19      	ldr	r3, [pc, #100]	@ (800345c <HAL_TIM_Base_Start+0xdc>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b06      	cmp	r3, #6
 8003400:	d015      	beq.n	800342e <HAL_TIM_Base_Start+0xae>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003408:	d011      	beq.n	800342e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0201 	orr.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341a:	e008      	b.n	800342e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e000      	b.n	8003430 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40012c00 	.word	0x40012c00
 8003444:	40000400 	.word	0x40000400
 8003448:	40000800 	.word	0x40000800
 800344c:	40000c00 	.word	0x40000c00
 8003450:	40013400 	.word	0x40013400
 8003454:	40014000 	.word	0x40014000
 8003458:	40015000 	.word	0x40015000
 800345c:	00010007 	.word	0x00010007

08003460 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e049      	b.n	8003506 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fe f934 	bl	80016f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3304      	adds	r3, #4
 800349c:	4619      	mov	r1, r3
 800349e:	4610      	mov	r0, r2
 80034a0:	f000 fb72 	bl	8003b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d109      	bne.n	8003534 <HAL_TIM_PWM_Start+0x24>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	bf14      	ite	ne
 800352c:	2301      	movne	r3, #1
 800352e:	2300      	moveq	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e03c      	b.n	80035ae <HAL_TIM_PWM_Start+0x9e>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2b04      	cmp	r3, #4
 8003538:	d109      	bne.n	800354e <HAL_TIM_PWM_Start+0x3e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	bf14      	ite	ne
 8003546:	2301      	movne	r3, #1
 8003548:	2300      	moveq	r3, #0
 800354a:	b2db      	uxtb	r3, r3
 800354c:	e02f      	b.n	80035ae <HAL_TIM_PWM_Start+0x9e>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b08      	cmp	r3, #8
 8003552:	d109      	bne.n	8003568 <HAL_TIM_PWM_Start+0x58>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	bf14      	ite	ne
 8003560:	2301      	movne	r3, #1
 8003562:	2300      	moveq	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e022      	b.n	80035ae <HAL_TIM_PWM_Start+0x9e>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b0c      	cmp	r3, #12
 800356c:	d109      	bne.n	8003582 <HAL_TIM_PWM_Start+0x72>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	bf14      	ite	ne
 800357a:	2301      	movne	r3, #1
 800357c:	2300      	moveq	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	e015      	b.n	80035ae <HAL_TIM_PWM_Start+0x9e>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b10      	cmp	r3, #16
 8003586:	d109      	bne.n	800359c <HAL_TIM_PWM_Start+0x8c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	bf14      	ite	ne
 8003594:	2301      	movne	r3, #1
 8003596:	2300      	moveq	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	e008      	b.n	80035ae <HAL_TIM_PWM_Start+0x9e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e0a6      	b.n	8003704 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d104      	bne.n	80035c6 <HAL_TIM_PWM_Start+0xb6>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035c4:	e023      	b.n	800360e <HAL_TIM_PWM_Start+0xfe>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d104      	bne.n	80035d6 <HAL_TIM_PWM_Start+0xc6>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035d4:	e01b      	b.n	800360e <HAL_TIM_PWM_Start+0xfe>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d104      	bne.n	80035e6 <HAL_TIM_PWM_Start+0xd6>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e4:	e013      	b.n	800360e <HAL_TIM_PWM_Start+0xfe>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b0c      	cmp	r3, #12
 80035ea:	d104      	bne.n	80035f6 <HAL_TIM_PWM_Start+0xe6>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035f4:	e00b      	b.n	800360e <HAL_TIM_PWM_Start+0xfe>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b10      	cmp	r3, #16
 80035fa:	d104      	bne.n	8003606 <HAL_TIM_PWM_Start+0xf6>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003604:	e003      	b.n	800360e <HAL_TIM_PWM_Start+0xfe>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2202      	movs	r2, #2
 800360a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2201      	movs	r2, #1
 8003614:	6839      	ldr	r1, [r7, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 ff30 	bl	800447c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a3a      	ldr	r2, [pc, #232]	@ (800370c <HAL_TIM_PWM_Start+0x1fc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d018      	beq.n	8003658 <HAL_TIM_PWM_Start+0x148>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a39      	ldr	r2, [pc, #228]	@ (8003710 <HAL_TIM_PWM_Start+0x200>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d013      	beq.n	8003658 <HAL_TIM_PWM_Start+0x148>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a37      	ldr	r2, [pc, #220]	@ (8003714 <HAL_TIM_PWM_Start+0x204>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00e      	beq.n	8003658 <HAL_TIM_PWM_Start+0x148>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a36      	ldr	r2, [pc, #216]	@ (8003718 <HAL_TIM_PWM_Start+0x208>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d009      	beq.n	8003658 <HAL_TIM_PWM_Start+0x148>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a34      	ldr	r2, [pc, #208]	@ (800371c <HAL_TIM_PWM_Start+0x20c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d004      	beq.n	8003658 <HAL_TIM_PWM_Start+0x148>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a33      	ldr	r2, [pc, #204]	@ (8003720 <HAL_TIM_PWM_Start+0x210>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d101      	bne.n	800365c <HAL_TIM_PWM_Start+0x14c>
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <HAL_TIM_PWM_Start+0x14e>
 800365c:	2300      	movs	r3, #0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003670:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a25      	ldr	r2, [pc, #148]	@ (800370c <HAL_TIM_PWM_Start+0x1fc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d022      	beq.n	80036c2 <HAL_TIM_PWM_Start+0x1b2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003684:	d01d      	beq.n	80036c2 <HAL_TIM_PWM_Start+0x1b2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a26      	ldr	r2, [pc, #152]	@ (8003724 <HAL_TIM_PWM_Start+0x214>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d018      	beq.n	80036c2 <HAL_TIM_PWM_Start+0x1b2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a24      	ldr	r2, [pc, #144]	@ (8003728 <HAL_TIM_PWM_Start+0x218>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d013      	beq.n	80036c2 <HAL_TIM_PWM_Start+0x1b2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a23      	ldr	r2, [pc, #140]	@ (800372c <HAL_TIM_PWM_Start+0x21c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00e      	beq.n	80036c2 <HAL_TIM_PWM_Start+0x1b2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a19      	ldr	r2, [pc, #100]	@ (8003710 <HAL_TIM_PWM_Start+0x200>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d009      	beq.n	80036c2 <HAL_TIM_PWM_Start+0x1b2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a18      	ldr	r2, [pc, #96]	@ (8003714 <HAL_TIM_PWM_Start+0x204>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_TIM_PWM_Start+0x1b2>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a18      	ldr	r2, [pc, #96]	@ (8003720 <HAL_TIM_PWM_Start+0x210>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d115      	bne.n	80036ee <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	4b19      	ldr	r3, [pc, #100]	@ (8003730 <HAL_TIM_PWM_Start+0x220>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b06      	cmp	r3, #6
 80036d2:	d015      	beq.n	8003700 <HAL_TIM_PWM_Start+0x1f0>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036da:	d011      	beq.n	8003700 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ec:	e008      	b.n	8003700 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0201 	orr.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	e000      	b.n	8003702 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003700:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40013400 	.word	0x40013400
 8003714:	40014000 	.word	0x40014000
 8003718:	40014400 	.word	0x40014400
 800371c:	40014800 	.word	0x40014800
 8003720:	40015000 	.word	0x40015000
 8003724:	40000400 	.word	0x40000400
 8003728:	40000800 	.word	0x40000800
 800372c:	40000c00 	.word	0x40000c00
 8003730:	00010007 	.word	0x00010007

08003734 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800374e:	2302      	movs	r3, #2
 8003750:	e0ff      	b.n	8003952 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b14      	cmp	r3, #20
 800375e:	f200 80f0 	bhi.w	8003942 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003762:	a201      	add	r2, pc, #4	@ (adr r2, 8003768 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	080037bd 	.word	0x080037bd
 800376c:	08003943 	.word	0x08003943
 8003770:	08003943 	.word	0x08003943
 8003774:	08003943 	.word	0x08003943
 8003778:	080037fd 	.word	0x080037fd
 800377c:	08003943 	.word	0x08003943
 8003780:	08003943 	.word	0x08003943
 8003784:	08003943 	.word	0x08003943
 8003788:	0800383f 	.word	0x0800383f
 800378c:	08003943 	.word	0x08003943
 8003790:	08003943 	.word	0x08003943
 8003794:	08003943 	.word	0x08003943
 8003798:	0800387f 	.word	0x0800387f
 800379c:	08003943 	.word	0x08003943
 80037a0:	08003943 	.word	0x08003943
 80037a4:	08003943 	.word	0x08003943
 80037a8:	080038c1 	.word	0x080038c1
 80037ac:	08003943 	.word	0x08003943
 80037b0:	08003943 	.word	0x08003943
 80037b4:	08003943 	.word	0x08003943
 80037b8:	08003901 	.word	0x08003901
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fa94 	bl	8003cf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0208 	orr.w	r2, r2, #8
 80037d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0204 	bic.w	r2, r2, #4
 80037e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6999      	ldr	r1, [r3, #24]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	619a      	str	r2, [r3, #24]
      break;
 80037fa:	e0a5      	b.n	8003948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fb0e 	bl	8003e24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6999      	ldr	r1, [r3, #24]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	021a      	lsls	r2, r3, #8
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	619a      	str	r2, [r3, #24]
      break;
 800383c:	e084      	b.n	8003948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fb81 	bl	8003f4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0208 	orr.w	r2, r2, #8
 8003858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69da      	ldr	r2, [r3, #28]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0204 	bic.w	r2, r2, #4
 8003868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69d9      	ldr	r1, [r3, #28]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	61da      	str	r2, [r3, #28]
      break;
 800387c:	e064      	b.n	8003948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fbf3 	bl	8004070 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69da      	ldr	r2, [r3, #28]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69d9      	ldr	r1, [r3, #28]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	021a      	lsls	r2, r3, #8
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	61da      	str	r2, [r3, #28]
      break;
 80038be:	e043      	b.n	8003948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fc66 	bl	8004198 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0208 	orr.w	r2, r2, #8
 80038da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0204 	bic.w	r2, r2, #4
 80038ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80038fe:	e023      	b.n	8003948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fcb0 	bl	800426c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800391a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800392a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	021a      	lsls	r2, r3, #8
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003940:	e002      	b.n	8003948 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	75fb      	strb	r3, [r7, #23]
      break;
 8003946:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003950:	7dfb      	ldrb	r3, [r7, #23]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop

0800395c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_TIM_ConfigClockSource+0x1c>
 8003974:	2302      	movs	r3, #2
 8003976:	e0f6      	b.n	8003b66 <HAL_TIM_ConfigClockSource+0x20a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003996:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800399a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a6f      	ldr	r2, [pc, #444]	@ (8003b70 <HAL_TIM_ConfigClockSource+0x214>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	f000 80c1 	beq.w	8003b3a <HAL_TIM_ConfigClockSource+0x1de>
 80039b8:	4a6d      	ldr	r2, [pc, #436]	@ (8003b70 <HAL_TIM_ConfigClockSource+0x214>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	f200 80c6 	bhi.w	8003b4c <HAL_TIM_ConfigClockSource+0x1f0>
 80039c0:	4a6c      	ldr	r2, [pc, #432]	@ (8003b74 <HAL_TIM_ConfigClockSource+0x218>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	f000 80b9 	beq.w	8003b3a <HAL_TIM_ConfigClockSource+0x1de>
 80039c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003b74 <HAL_TIM_ConfigClockSource+0x218>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	f200 80be 	bhi.w	8003b4c <HAL_TIM_ConfigClockSource+0x1f0>
 80039d0:	4a69      	ldr	r2, [pc, #420]	@ (8003b78 <HAL_TIM_ConfigClockSource+0x21c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	f000 80b1 	beq.w	8003b3a <HAL_TIM_ConfigClockSource+0x1de>
 80039d8:	4a67      	ldr	r2, [pc, #412]	@ (8003b78 <HAL_TIM_ConfigClockSource+0x21c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	f200 80b6 	bhi.w	8003b4c <HAL_TIM_ConfigClockSource+0x1f0>
 80039e0:	4a66      	ldr	r2, [pc, #408]	@ (8003b7c <HAL_TIM_ConfigClockSource+0x220>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	f000 80a9 	beq.w	8003b3a <HAL_TIM_ConfigClockSource+0x1de>
 80039e8:	4a64      	ldr	r2, [pc, #400]	@ (8003b7c <HAL_TIM_ConfigClockSource+0x220>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	f200 80ae 	bhi.w	8003b4c <HAL_TIM_ConfigClockSource+0x1f0>
 80039f0:	4a63      	ldr	r2, [pc, #396]	@ (8003b80 <HAL_TIM_ConfigClockSource+0x224>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	f000 80a1 	beq.w	8003b3a <HAL_TIM_ConfigClockSource+0x1de>
 80039f8:	4a61      	ldr	r2, [pc, #388]	@ (8003b80 <HAL_TIM_ConfigClockSource+0x224>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	f200 80a6 	bhi.w	8003b4c <HAL_TIM_ConfigClockSource+0x1f0>
 8003a00:	4a60      	ldr	r2, [pc, #384]	@ (8003b84 <HAL_TIM_ConfigClockSource+0x228>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	f000 8099 	beq.w	8003b3a <HAL_TIM_ConfigClockSource+0x1de>
 8003a08:	4a5e      	ldr	r2, [pc, #376]	@ (8003b84 <HAL_TIM_ConfigClockSource+0x228>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	f200 809e 	bhi.w	8003b4c <HAL_TIM_ConfigClockSource+0x1f0>
 8003a10:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003a14:	f000 8091 	beq.w	8003b3a <HAL_TIM_ConfigClockSource+0x1de>
 8003a18:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003a1c:	f200 8096 	bhi.w	8003b4c <HAL_TIM_ConfigClockSource+0x1f0>
 8003a20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a24:	f000 8089 	beq.w	8003b3a <HAL_TIM_ConfigClockSource+0x1de>
 8003a28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a2c:	f200 808e 	bhi.w	8003b4c <HAL_TIM_ConfigClockSource+0x1f0>
 8003a30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a34:	d03e      	beq.n	8003ab4 <HAL_TIM_ConfigClockSource+0x158>
 8003a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a3a:	f200 8087 	bhi.w	8003b4c <HAL_TIM_ConfigClockSource+0x1f0>
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a42:	f000 8086 	beq.w	8003b52 <HAL_TIM_ConfigClockSource+0x1f6>
 8003a46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a4a:	d87f      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x1f0>
 8003a4c:	2b70      	cmp	r3, #112	@ 0x70
 8003a4e:	d01a      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0x12a>
 8003a50:	2b70      	cmp	r3, #112	@ 0x70
 8003a52:	d87b      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x1f0>
 8003a54:	2b60      	cmp	r3, #96	@ 0x60
 8003a56:	d050      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0x19e>
 8003a58:	2b60      	cmp	r3, #96	@ 0x60
 8003a5a:	d877      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x1f0>
 8003a5c:	2b50      	cmp	r3, #80	@ 0x50
 8003a5e:	d03c      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0x17e>
 8003a60:	2b50      	cmp	r3, #80	@ 0x50
 8003a62:	d873      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x1f0>
 8003a64:	2b40      	cmp	r3, #64	@ 0x40
 8003a66:	d058      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x1be>
 8003a68:	2b40      	cmp	r3, #64	@ 0x40
 8003a6a:	d86f      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x1f0>
 8003a6c:	2b30      	cmp	r3, #48	@ 0x30
 8003a6e:	d064      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x1de>
 8003a70:	2b30      	cmp	r3, #48	@ 0x30
 8003a72:	d86b      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x1f0>
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d060      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x1de>
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d867      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x1f0>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d05c      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x1de>
 8003a80:	2b10      	cmp	r3, #16
 8003a82:	d05a      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x1de>
 8003a84:	e062      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a96:	f000 fcd1 	bl	800443c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003aa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	609a      	str	r2, [r3, #8]
      break;
 8003ab2:	e04f      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ac4:	f000 fcba 	bl	800443c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ad6:	609a      	str	r2, [r3, #8]
      break;
 8003ad8:	e03c      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f000 fc2c 	bl	8004344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2150      	movs	r1, #80	@ 0x50
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fc85 	bl	8004402 <TIM_ITRx_SetConfig>
      break;
 8003af8:	e02c      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b06:	461a      	mov	r2, r3
 8003b08:	f000 fc4b 	bl	80043a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2160      	movs	r1, #96	@ 0x60
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fc75 	bl	8004402 <TIM_ITRx_SetConfig>
      break;
 8003b18:	e01c      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b26:	461a      	mov	r2, r3
 8003b28:	f000 fc0c 	bl	8004344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2140      	movs	r1, #64	@ 0x40
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fc65 	bl	8004402 <TIM_ITRx_SetConfig>
      break;
 8003b38:	e00c      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4619      	mov	r1, r3
 8003b44:	4610      	mov	r0, r2
 8003b46:	f000 fc5c 	bl	8004402 <TIM_ITRx_SetConfig>
      break;
 8003b4a:	e003      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b50:	e000      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003b52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	00100070 	.word	0x00100070
 8003b74:	00100060 	.word	0x00100060
 8003b78:	00100050 	.word	0x00100050
 8003b7c:	00100040 	.word	0x00100040
 8003b80:	00100030 	.word	0x00100030
 8003b84:	00100020 	.word	0x00100020

08003b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a4c      	ldr	r2, [pc, #304]	@ (8003ccc <TIM_Base_SetConfig+0x144>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d017      	beq.n	8003bd0 <TIM_Base_SetConfig+0x48>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ba6:	d013      	beq.n	8003bd0 <TIM_Base_SetConfig+0x48>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a49      	ldr	r2, [pc, #292]	@ (8003cd0 <TIM_Base_SetConfig+0x148>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00f      	beq.n	8003bd0 <TIM_Base_SetConfig+0x48>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a48      	ldr	r2, [pc, #288]	@ (8003cd4 <TIM_Base_SetConfig+0x14c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00b      	beq.n	8003bd0 <TIM_Base_SetConfig+0x48>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a47      	ldr	r2, [pc, #284]	@ (8003cd8 <TIM_Base_SetConfig+0x150>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d007      	beq.n	8003bd0 <TIM_Base_SetConfig+0x48>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a46      	ldr	r2, [pc, #280]	@ (8003cdc <TIM_Base_SetConfig+0x154>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_Base_SetConfig+0x48>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a45      	ldr	r2, [pc, #276]	@ (8003ce0 <TIM_Base_SetConfig+0x158>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d108      	bne.n	8003be2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a39      	ldr	r2, [pc, #228]	@ (8003ccc <TIM_Base_SetConfig+0x144>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d023      	beq.n	8003c32 <TIM_Base_SetConfig+0xaa>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf0:	d01f      	beq.n	8003c32 <TIM_Base_SetConfig+0xaa>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a36      	ldr	r2, [pc, #216]	@ (8003cd0 <TIM_Base_SetConfig+0x148>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d01b      	beq.n	8003c32 <TIM_Base_SetConfig+0xaa>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a35      	ldr	r2, [pc, #212]	@ (8003cd4 <TIM_Base_SetConfig+0x14c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d017      	beq.n	8003c32 <TIM_Base_SetConfig+0xaa>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a34      	ldr	r2, [pc, #208]	@ (8003cd8 <TIM_Base_SetConfig+0x150>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <TIM_Base_SetConfig+0xaa>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a33      	ldr	r2, [pc, #204]	@ (8003cdc <TIM_Base_SetConfig+0x154>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00f      	beq.n	8003c32 <TIM_Base_SetConfig+0xaa>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a33      	ldr	r2, [pc, #204]	@ (8003ce4 <TIM_Base_SetConfig+0x15c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00b      	beq.n	8003c32 <TIM_Base_SetConfig+0xaa>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a32      	ldr	r2, [pc, #200]	@ (8003ce8 <TIM_Base_SetConfig+0x160>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d007      	beq.n	8003c32 <TIM_Base_SetConfig+0xaa>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a31      	ldr	r2, [pc, #196]	@ (8003cec <TIM_Base_SetConfig+0x164>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d003      	beq.n	8003c32 <TIM_Base_SetConfig+0xaa>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ce0 <TIM_Base_SetConfig+0x158>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d108      	bne.n	8003c44 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a18      	ldr	r2, [pc, #96]	@ (8003ccc <TIM_Base_SetConfig+0x144>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d013      	beq.n	8003c98 <TIM_Base_SetConfig+0x110>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a1a      	ldr	r2, [pc, #104]	@ (8003cdc <TIM_Base_SetConfig+0x154>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00f      	beq.n	8003c98 <TIM_Base_SetConfig+0x110>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ce4 <TIM_Base_SetConfig+0x15c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00b      	beq.n	8003c98 <TIM_Base_SetConfig+0x110>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a19      	ldr	r2, [pc, #100]	@ (8003ce8 <TIM_Base_SetConfig+0x160>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d007      	beq.n	8003c98 <TIM_Base_SetConfig+0x110>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a18      	ldr	r2, [pc, #96]	@ (8003cec <TIM_Base_SetConfig+0x164>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_Base_SetConfig+0x110>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a13      	ldr	r2, [pc, #76]	@ (8003ce0 <TIM_Base_SetConfig+0x158>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d103      	bne.n	8003ca0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d105      	bne.n	8003cbe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f023 0201 	bic.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	611a      	str	r2, [r3, #16]
  }
}
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40012c00 	.word	0x40012c00
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800
 8003cd8:	40000c00 	.word	0x40000c00
 8003cdc:	40013400 	.word	0x40013400
 8003ce0:	40015000 	.word	0x40015000
 8003ce4:	40014000 	.word	0x40014000
 8003ce8:	40014400 	.word	0x40014400
 8003cec:	40014800 	.word	0x40014800

08003cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	f023 0201 	bic.w	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0303 	bic.w	r3, r3, #3
 8003d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f023 0302 	bic.w	r3, r3, #2
 8003d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a30      	ldr	r2, [pc, #192]	@ (8003e0c <TIM_OC1_SetConfig+0x11c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d013      	beq.n	8003d78 <TIM_OC1_SetConfig+0x88>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a2f      	ldr	r2, [pc, #188]	@ (8003e10 <TIM_OC1_SetConfig+0x120>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00f      	beq.n	8003d78 <TIM_OC1_SetConfig+0x88>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a2e      	ldr	r2, [pc, #184]	@ (8003e14 <TIM_OC1_SetConfig+0x124>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00b      	beq.n	8003d78 <TIM_OC1_SetConfig+0x88>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a2d      	ldr	r2, [pc, #180]	@ (8003e18 <TIM_OC1_SetConfig+0x128>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d007      	beq.n	8003d78 <TIM_OC1_SetConfig+0x88>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8003e1c <TIM_OC1_SetConfig+0x12c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d003      	beq.n	8003d78 <TIM_OC1_SetConfig+0x88>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a2b      	ldr	r2, [pc, #172]	@ (8003e20 <TIM_OC1_SetConfig+0x130>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d10c      	bne.n	8003d92 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f023 0308 	bic.w	r3, r3, #8
 8003d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f023 0304 	bic.w	r3, r3, #4
 8003d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1d      	ldr	r2, [pc, #116]	@ (8003e0c <TIM_OC1_SetConfig+0x11c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d013      	beq.n	8003dc2 <TIM_OC1_SetConfig+0xd2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e10 <TIM_OC1_SetConfig+0x120>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00f      	beq.n	8003dc2 <TIM_OC1_SetConfig+0xd2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e14 <TIM_OC1_SetConfig+0x124>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00b      	beq.n	8003dc2 <TIM_OC1_SetConfig+0xd2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1a      	ldr	r2, [pc, #104]	@ (8003e18 <TIM_OC1_SetConfig+0x128>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d007      	beq.n	8003dc2 <TIM_OC1_SetConfig+0xd2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a19      	ldr	r2, [pc, #100]	@ (8003e1c <TIM_OC1_SetConfig+0x12c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d003      	beq.n	8003dc2 <TIM_OC1_SetConfig+0xd2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a18      	ldr	r2, [pc, #96]	@ (8003e20 <TIM_OC1_SetConfig+0x130>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d111      	bne.n	8003de6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	621a      	str	r2, [r3, #32]
}
 8003e00:	bf00      	nop
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	40012c00 	.word	0x40012c00
 8003e10:	40013400 	.word	0x40013400
 8003e14:	40014000 	.word	0x40014000
 8003e18:	40014400 	.word	0x40014400
 8003e1c:	40014800 	.word	0x40014800
 8003e20:	40015000 	.word	0x40015000

08003e24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f023 0210 	bic.w	r2, r3, #16
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f023 0320 	bic.w	r3, r3, #32
 8003e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a2c      	ldr	r2, [pc, #176]	@ (8003f34 <TIM_OC2_SetConfig+0x110>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d007      	beq.n	8003e98 <TIM_OC2_SetConfig+0x74>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a2b      	ldr	r2, [pc, #172]	@ (8003f38 <TIM_OC2_SetConfig+0x114>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_OC2_SetConfig+0x74>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a2a      	ldr	r2, [pc, #168]	@ (8003f3c <TIM_OC2_SetConfig+0x118>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d10d      	bne.n	8003eb4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a1f      	ldr	r2, [pc, #124]	@ (8003f34 <TIM_OC2_SetConfig+0x110>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d013      	beq.n	8003ee4 <TIM_OC2_SetConfig+0xc0>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8003f38 <TIM_OC2_SetConfig+0x114>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00f      	beq.n	8003ee4 <TIM_OC2_SetConfig+0xc0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f40 <TIM_OC2_SetConfig+0x11c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00b      	beq.n	8003ee4 <TIM_OC2_SetConfig+0xc0>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a1d      	ldr	r2, [pc, #116]	@ (8003f44 <TIM_OC2_SetConfig+0x120>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d007      	beq.n	8003ee4 <TIM_OC2_SetConfig+0xc0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f48 <TIM_OC2_SetConfig+0x124>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d003      	beq.n	8003ee4 <TIM_OC2_SetConfig+0xc0>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a17      	ldr	r2, [pc, #92]	@ (8003f3c <TIM_OC2_SetConfig+0x118>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d113      	bne.n	8003f0c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	621a      	str	r2, [r3, #32]
}
 8003f26:	bf00      	nop
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40012c00 	.word	0x40012c00
 8003f38:	40013400 	.word	0x40013400
 8003f3c:	40015000 	.word	0x40015000
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800

08003f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8004058 <TIM_OC3_SetConfig+0x10c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d007      	beq.n	8003fbe <TIM_OC3_SetConfig+0x72>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800405c <TIM_OC3_SetConfig+0x110>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d003      	beq.n	8003fbe <TIM_OC3_SetConfig+0x72>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a29      	ldr	r2, [pc, #164]	@ (8004060 <TIM_OC3_SetConfig+0x114>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d10d      	bne.n	8003fda <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8004058 <TIM_OC3_SetConfig+0x10c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <TIM_OC3_SetConfig+0xbe>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800405c <TIM_OC3_SetConfig+0x110>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00f      	beq.n	800400a <TIM_OC3_SetConfig+0xbe>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a1d      	ldr	r2, [pc, #116]	@ (8004064 <TIM_OC3_SetConfig+0x118>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00b      	beq.n	800400a <TIM_OC3_SetConfig+0xbe>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8004068 <TIM_OC3_SetConfig+0x11c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d007      	beq.n	800400a <TIM_OC3_SetConfig+0xbe>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800406c <TIM_OC3_SetConfig+0x120>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d003      	beq.n	800400a <TIM_OC3_SetConfig+0xbe>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a16      	ldr	r2, [pc, #88]	@ (8004060 <TIM_OC3_SetConfig+0x114>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d113      	bne.n	8004032 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	621a      	str	r2, [r3, #32]
}
 800404c:	bf00      	nop
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	40012c00 	.word	0x40012c00
 800405c:	40013400 	.word	0x40013400
 8004060:	40015000 	.word	0x40015000
 8004064:	40014000 	.word	0x40014000
 8004068:	40014400 	.word	0x40014400
 800406c:	40014800 	.word	0x40014800

08004070 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800409e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	021b      	lsls	r3, r3, #8
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	031b      	lsls	r3, r3, #12
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004180 <TIM_OC4_SetConfig+0x110>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d007      	beq.n	80040e4 <TIM_OC4_SetConfig+0x74>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004184 <TIM_OC4_SetConfig+0x114>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d003      	beq.n	80040e4 <TIM_OC4_SetConfig+0x74>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a2a      	ldr	r2, [pc, #168]	@ (8004188 <TIM_OC4_SetConfig+0x118>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d10d      	bne.n	8004100 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80040ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	031b      	lsls	r3, r3, #12
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a1f      	ldr	r2, [pc, #124]	@ (8004180 <TIM_OC4_SetConfig+0x110>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d013      	beq.n	8004130 <TIM_OC4_SetConfig+0xc0>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a1e      	ldr	r2, [pc, #120]	@ (8004184 <TIM_OC4_SetConfig+0x114>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00f      	beq.n	8004130 <TIM_OC4_SetConfig+0xc0>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a1e      	ldr	r2, [pc, #120]	@ (800418c <TIM_OC4_SetConfig+0x11c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00b      	beq.n	8004130 <TIM_OC4_SetConfig+0xc0>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a1d      	ldr	r2, [pc, #116]	@ (8004190 <TIM_OC4_SetConfig+0x120>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d007      	beq.n	8004130 <TIM_OC4_SetConfig+0xc0>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a1c      	ldr	r2, [pc, #112]	@ (8004194 <TIM_OC4_SetConfig+0x124>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_OC4_SetConfig+0xc0>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a17      	ldr	r2, [pc, #92]	@ (8004188 <TIM_OC4_SetConfig+0x118>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d113      	bne.n	8004158 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004136:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800413e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	019b      	lsls	r3, r3, #6
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	019b      	lsls	r3, r3, #6
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	621a      	str	r2, [r3, #32]
}
 8004172:	bf00      	nop
 8004174:	371c      	adds	r7, #28
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40012c00 	.word	0x40012c00
 8004184:	40013400 	.word	0x40013400
 8004188:	40015000 	.word	0x40015000
 800418c:	40014000 	.word	0x40014000
 8004190:	40014400 	.word	0x40014400
 8004194:	40014800 	.word	0x40014800

08004198 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80041dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	041b      	lsls	r3, r3, #16
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a19      	ldr	r2, [pc, #100]	@ (8004254 <TIM_OC5_SetConfig+0xbc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <TIM_OC5_SetConfig+0x82>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a18      	ldr	r2, [pc, #96]	@ (8004258 <TIM_OC5_SetConfig+0xc0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00f      	beq.n	800421a <TIM_OC5_SetConfig+0x82>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a17      	ldr	r2, [pc, #92]	@ (800425c <TIM_OC5_SetConfig+0xc4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00b      	beq.n	800421a <TIM_OC5_SetConfig+0x82>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a16      	ldr	r2, [pc, #88]	@ (8004260 <TIM_OC5_SetConfig+0xc8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d007      	beq.n	800421a <TIM_OC5_SetConfig+0x82>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a15      	ldr	r2, [pc, #84]	@ (8004264 <TIM_OC5_SetConfig+0xcc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <TIM_OC5_SetConfig+0x82>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a14      	ldr	r2, [pc, #80]	@ (8004268 <TIM_OC5_SetConfig+0xd0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d109      	bne.n	800422e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004220:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	621a      	str	r2, [r3, #32]
}
 8004248:	bf00      	nop
 800424a:	371c      	adds	r7, #28
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	40012c00 	.word	0x40012c00
 8004258:	40013400 	.word	0x40013400
 800425c:	40014000 	.word	0x40014000
 8004260:	40014400 	.word	0x40014400
 8004264:	40014800 	.word	0x40014800
 8004268:	40015000 	.word	0x40015000

0800426c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800429a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800429e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80042b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	051b      	lsls	r3, r3, #20
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a1a      	ldr	r2, [pc, #104]	@ (800432c <TIM_OC6_SetConfig+0xc0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <TIM_OC6_SetConfig+0x84>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a19      	ldr	r2, [pc, #100]	@ (8004330 <TIM_OC6_SetConfig+0xc4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00f      	beq.n	80042f0 <TIM_OC6_SetConfig+0x84>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a18      	ldr	r2, [pc, #96]	@ (8004334 <TIM_OC6_SetConfig+0xc8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00b      	beq.n	80042f0 <TIM_OC6_SetConfig+0x84>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a17      	ldr	r2, [pc, #92]	@ (8004338 <TIM_OC6_SetConfig+0xcc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d007      	beq.n	80042f0 <TIM_OC6_SetConfig+0x84>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a16      	ldr	r2, [pc, #88]	@ (800433c <TIM_OC6_SetConfig+0xd0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <TIM_OC6_SetConfig+0x84>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a15      	ldr	r2, [pc, #84]	@ (8004340 <TIM_OC6_SetConfig+0xd4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d109      	bne.n	8004304 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	029b      	lsls	r3, r3, #10
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40013400 	.word	0x40013400
 8004334:	40014000 	.word	0x40014000
 8004338:	40014400 	.word	0x40014400
 800433c:	40014800 	.word	0x40014800
 8004340:	40015000 	.word	0x40015000

08004344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f023 0201 	bic.w	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800436e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f023 030a 	bic.w	r3, r3, #10
 8004380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	621a      	str	r2, [r3, #32]
}
 8004396:	bf00      	nop
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b087      	sub	sp, #28
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	f023 0210 	bic.w	r2, r3, #16
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	031b      	lsls	r3, r3, #12
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	621a      	str	r2, [r3, #32]
}
 80043f6:	bf00      	nop
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800441c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	f043 0307 	orr.w	r3, r3, #7
 8004428:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	609a      	str	r2, [r3, #8]
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004456:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	021a      	lsls	r2, r3, #8
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	431a      	orrs	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4313      	orrs	r3, r2
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	609a      	str	r2, [r3, #8]
}
 8004470:	bf00      	nop
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 031f 	and.w	r3, r3, #31
 800448e:	2201      	movs	r2, #1
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a1a      	ldr	r2, [r3, #32]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	43db      	mvns	r3, r3
 800449e:	401a      	ands	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a1a      	ldr	r2, [r3, #32]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	fa01 f303 	lsl.w	r3, r1, r3
 80044b4:	431a      	orrs	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	621a      	str	r2, [r3, #32]
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <HAL_TIMEx_PWMN_Start+0x24>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	bf14      	ite	ne
 80044e4:	2301      	movne	r3, #1
 80044e6:	2300      	moveq	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	e022      	b.n	8004532 <HAL_TIMEx_PWMN_Start+0x6a>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d109      	bne.n	8004506 <HAL_TIMEx_PWMN_Start+0x3e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	bf14      	ite	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	2300      	moveq	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e015      	b.n	8004532 <HAL_TIMEx_PWMN_Start+0x6a>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d109      	bne.n	8004520 <HAL_TIMEx_PWMN_Start+0x58>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	bf14      	ite	ne
 8004518:	2301      	movne	r3, #1
 800451a:	2300      	moveq	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	e008      	b.n	8004532 <HAL_TIMEx_PWMN_Start+0x6a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	bf14      	ite	ne
 800452c:	2301      	movne	r3, #1
 800452e:	2300      	moveq	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e073      	b.n	8004622 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <HAL_TIMEx_PWMN_Start+0x82>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004548:	e013      	b.n	8004572 <HAL_TIMEx_PWMN_Start+0xaa>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b04      	cmp	r3, #4
 800454e:	d104      	bne.n	800455a <HAL_TIMEx_PWMN_Start+0x92>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004558:	e00b      	b.n	8004572 <HAL_TIMEx_PWMN_Start+0xaa>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d104      	bne.n	800456a <HAL_TIMEx_PWMN_Start+0xa2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004568:	e003      	b.n	8004572 <HAL_TIMEx_PWMN_Start+0xaa>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2204      	movs	r2, #4
 8004578:	6839      	ldr	r1, [r7, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 f990 	bl	80048a0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800458e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a25      	ldr	r2, [pc, #148]	@ (800462c <HAL_TIMEx_PWMN_Start+0x164>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d022      	beq.n	80045e0 <HAL_TIMEx_PWMN_Start+0x118>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a2:	d01d      	beq.n	80045e0 <HAL_TIMEx_PWMN_Start+0x118>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a21      	ldr	r2, [pc, #132]	@ (8004630 <HAL_TIMEx_PWMN_Start+0x168>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d018      	beq.n	80045e0 <HAL_TIMEx_PWMN_Start+0x118>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a20      	ldr	r2, [pc, #128]	@ (8004634 <HAL_TIMEx_PWMN_Start+0x16c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <HAL_TIMEx_PWMN_Start+0x118>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004638 <HAL_TIMEx_PWMN_Start+0x170>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00e      	beq.n	80045e0 <HAL_TIMEx_PWMN_Start+0x118>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a1d      	ldr	r2, [pc, #116]	@ (800463c <HAL_TIMEx_PWMN_Start+0x174>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d009      	beq.n	80045e0 <HAL_TIMEx_PWMN_Start+0x118>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004640 <HAL_TIMEx_PWMN_Start+0x178>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d004      	beq.n	80045e0 <HAL_TIMEx_PWMN_Start+0x118>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a1a      	ldr	r2, [pc, #104]	@ (8004644 <HAL_TIMEx_PWMN_Start+0x17c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d115      	bne.n	800460c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	4b18      	ldr	r3, [pc, #96]	@ (8004648 <HAL_TIMEx_PWMN_Start+0x180>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b06      	cmp	r3, #6
 80045f0:	d015      	beq.n	800461e <HAL_TIMEx_PWMN_Start+0x156>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f8:	d011      	beq.n	800461e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460a:	e008      	b.n	800461e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e000      	b.n	8004620 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40012c00 	.word	0x40012c00
 8004630:	40000400 	.word	0x40000400
 8004634:	40000800 	.word	0x40000800
 8004638:	40000c00 	.word	0x40000c00
 800463c:	40013400 	.word	0x40013400
 8004640:	40014000 	.word	0x40014000
 8004644:	40015000 	.word	0x40015000
 8004648:	00010007 	.word	0x00010007

0800464c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004660:	2302      	movs	r3, #2
 8004662:	e074      	b.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a34      	ldr	r2, [pc, #208]	@ (800475c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d009      	beq.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a33      	ldr	r2, [pc, #204]	@ (8004760 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d004      	beq.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a31      	ldr	r2, [pc, #196]	@ (8004764 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d108      	bne.n	80046b4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80046a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80046ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a21      	ldr	r2, [pc, #132]	@ (800475c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d022      	beq.n	8004722 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e4:	d01d      	beq.n	8004722 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004768 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d018      	beq.n	8004722 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1d      	ldr	r2, [pc, #116]	@ (800476c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d013      	beq.n	8004722 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004770 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00e      	beq.n	8004722 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a15      	ldr	r2, [pc, #84]	@ (8004760 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d009      	beq.n	8004722 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a18      	ldr	r2, [pc, #96]	@ (8004774 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d004      	beq.n	8004722 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a11      	ldr	r2, [pc, #68]	@ (8004764 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d10c      	bne.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	4313      	orrs	r3, r2
 8004732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40012c00 	.word	0x40012c00
 8004760:	40013400 	.word	0x40013400
 8004764:	40015000 	.word	0x40015000
 8004768:	40000400 	.word	0x40000400
 800476c:	40000800 	.word	0x40000800
 8004770:	40000c00 	.word	0x40000c00
 8004774:	40014000 	.word	0x40014000

08004778 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004790:	2302      	movs	r3, #2
 8004792:	e078      	b.n	8004886 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	041b      	lsls	r3, r3, #16
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1c      	ldr	r2, [pc, #112]	@ (8004894 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d009      	beq.n	800483a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1b      	ldr	r2, [pc, #108]	@ (8004898 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a19      	ldr	r2, [pc, #100]	@ (800489c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d11c      	bne.n	8004874 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004844:	051b      	lsls	r3, r3, #20
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	4313      	orrs	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40012c00 	.word	0x40012c00
 8004898:	40013400 	.word	0x40013400
 800489c:	40015000 	.word	0x40015000

080048a0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	2204      	movs	r2, #4
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a1a      	ldr	r2, [r3, #32]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	401a      	ands	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a1a      	ldr	r2, [r3, #32]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	fa01 f303 	lsl.w	r3, r1, r3
 80048d8:	431a      	orrs	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	621a      	str	r2, [r3, #32]
}
 80048de:	bf00      	nop
 80048e0:	371c      	adds	r7, #28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e042      	b.n	8004982 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fc fe98 	bl	8001644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2224      	movs	r2, #36	@ 0x24
 8004918:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 fbb3 	bl	80050a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f8b4 	bl	8004aa8 <UART_SetConfig>
 8004940:	4603      	mov	r3, r0
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e01b      	b.n	8004982 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004958:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004968:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0201 	orr.w	r2, r2, #1
 8004978:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fc32 	bl	80051e4 <UART_CheckIdleState>
 8004980:	4603      	mov	r3, r0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b08a      	sub	sp, #40	@ 0x28
 800498e:	af02      	add	r7, sp, #8
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	603b      	str	r3, [r7, #0]
 8004996:	4613      	mov	r3, r2
 8004998:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a0:	2b20      	cmp	r3, #32
 80049a2:	d17b      	bne.n	8004a9c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <HAL_UART_Transmit+0x26>
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e074      	b.n	8004a9e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2221      	movs	r2, #33	@ 0x21
 80049c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049c4:	f7fd f8e6 	bl	8001b94 <HAL_GetTick>
 80049c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	88fa      	ldrh	r2, [r7, #6]
 80049d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049e2:	d108      	bne.n	80049f6 <HAL_UART_Transmit+0x6c>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	e003      	b.n	80049fe <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049fe:	e030      	b.n	8004a62 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2200      	movs	r2, #0
 8004a08:	2180      	movs	r1, #128	@ 0x80
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 fc94 	bl	8005338 <UART_WaitOnFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e03d      	b.n	8004a9e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10b      	bne.n	8004a40 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a36:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	3302      	adds	r3, #2
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	e007      	b.n	8004a50 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	781a      	ldrb	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1c8      	bne.n	8004a00 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2200      	movs	r2, #0
 8004a76:	2140      	movs	r1, #64	@ 0x40
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fc5d 	bl	8005338 <UART_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e006      	b.n	8004a9e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	e000      	b.n	8004a9e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004a9c:	2302      	movs	r3, #2
  }
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aac:	b08c      	sub	sp, #48	@ 0x30
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4baa      	ldr	r3, [pc, #680]	@ (8004d80 <UART_SetConfig+0x2d8>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	6812      	ldr	r2, [r2, #0]
 8004ade:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a9f      	ldr	r2, [pc, #636]	@ (8004d84 <UART_SetConfig+0x2dc>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d004      	beq.n	8004b14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b10:	4313      	orrs	r3, r2
 8004b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004b1e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b32:	f023 010f 	bic.w	r1, r3, #15
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a90      	ldr	r2, [pc, #576]	@ (8004d88 <UART_SetConfig+0x2e0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d125      	bne.n	8004b98 <UART_SetConfig+0xf0>
 8004b4c:	4b8f      	ldr	r3, [pc, #572]	@ (8004d8c <UART_SetConfig+0x2e4>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d81a      	bhi.n	8004b90 <UART_SetConfig+0xe8>
 8004b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b60 <UART_SetConfig+0xb8>)
 8004b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b60:	08004b71 	.word	0x08004b71
 8004b64:	08004b81 	.word	0x08004b81
 8004b68:	08004b79 	.word	0x08004b79
 8004b6c:	08004b89 	.word	0x08004b89
 8004b70:	2301      	movs	r3, #1
 8004b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b76:	e116      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b7e:	e112      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004b80:	2304      	movs	r3, #4
 8004b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b86:	e10e      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004b88:	2308      	movs	r3, #8
 8004b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b8e:	e10a      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004b90:	2310      	movs	r3, #16
 8004b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b96:	e106      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a7c      	ldr	r2, [pc, #496]	@ (8004d90 <UART_SetConfig+0x2e8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d138      	bne.n	8004c14 <UART_SetConfig+0x16c>
 8004ba2:	4b7a      	ldr	r3, [pc, #488]	@ (8004d8c <UART_SetConfig+0x2e4>)
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba8:	f003 030c 	and.w	r3, r3, #12
 8004bac:	2b0c      	cmp	r3, #12
 8004bae:	d82d      	bhi.n	8004c0c <UART_SetConfig+0x164>
 8004bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb8 <UART_SetConfig+0x110>)
 8004bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb6:	bf00      	nop
 8004bb8:	08004bed 	.word	0x08004bed
 8004bbc:	08004c0d 	.word	0x08004c0d
 8004bc0:	08004c0d 	.word	0x08004c0d
 8004bc4:	08004c0d 	.word	0x08004c0d
 8004bc8:	08004bfd 	.word	0x08004bfd
 8004bcc:	08004c0d 	.word	0x08004c0d
 8004bd0:	08004c0d 	.word	0x08004c0d
 8004bd4:	08004c0d 	.word	0x08004c0d
 8004bd8:	08004bf5 	.word	0x08004bf5
 8004bdc:	08004c0d 	.word	0x08004c0d
 8004be0:	08004c0d 	.word	0x08004c0d
 8004be4:	08004c0d 	.word	0x08004c0d
 8004be8:	08004c05 	.word	0x08004c05
 8004bec:	2300      	movs	r3, #0
 8004bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bf2:	e0d8      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bfa:	e0d4      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c02:	e0d0      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c04:	2308      	movs	r3, #8
 8004c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c0a:	e0cc      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c12:	e0c8      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a5e      	ldr	r2, [pc, #376]	@ (8004d94 <UART_SetConfig+0x2ec>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d125      	bne.n	8004c6a <UART_SetConfig+0x1c2>
 8004c1e:	4b5b      	ldr	r3, [pc, #364]	@ (8004d8c <UART_SetConfig+0x2e4>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c28:	2b30      	cmp	r3, #48	@ 0x30
 8004c2a:	d016      	beq.n	8004c5a <UART_SetConfig+0x1b2>
 8004c2c:	2b30      	cmp	r3, #48	@ 0x30
 8004c2e:	d818      	bhi.n	8004c62 <UART_SetConfig+0x1ba>
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d00a      	beq.n	8004c4a <UART_SetConfig+0x1a2>
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	d814      	bhi.n	8004c62 <UART_SetConfig+0x1ba>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <UART_SetConfig+0x19a>
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d008      	beq.n	8004c52 <UART_SetConfig+0x1aa>
 8004c40:	e00f      	b.n	8004c62 <UART_SetConfig+0x1ba>
 8004c42:	2300      	movs	r3, #0
 8004c44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c48:	e0ad      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c50:	e0a9      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c52:	2304      	movs	r3, #4
 8004c54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c58:	e0a5      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c60:	e0a1      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c62:	2310      	movs	r3, #16
 8004c64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c68:	e09d      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a4a      	ldr	r2, [pc, #296]	@ (8004d98 <UART_SetConfig+0x2f0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d125      	bne.n	8004cc0 <UART_SetConfig+0x218>
 8004c74:	4b45      	ldr	r3, [pc, #276]	@ (8004d8c <UART_SetConfig+0x2e4>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c80:	d016      	beq.n	8004cb0 <UART_SetConfig+0x208>
 8004c82:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c84:	d818      	bhi.n	8004cb8 <UART_SetConfig+0x210>
 8004c86:	2b80      	cmp	r3, #128	@ 0x80
 8004c88:	d00a      	beq.n	8004ca0 <UART_SetConfig+0x1f8>
 8004c8a:	2b80      	cmp	r3, #128	@ 0x80
 8004c8c:	d814      	bhi.n	8004cb8 <UART_SetConfig+0x210>
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <UART_SetConfig+0x1f0>
 8004c92:	2b40      	cmp	r3, #64	@ 0x40
 8004c94:	d008      	beq.n	8004ca8 <UART_SetConfig+0x200>
 8004c96:	e00f      	b.n	8004cb8 <UART_SetConfig+0x210>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c9e:	e082      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ca6:	e07e      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cae:	e07a      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004cb0:	2308      	movs	r3, #8
 8004cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cb6:	e076      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004cb8:	2310      	movs	r3, #16
 8004cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cbe:	e072      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a35      	ldr	r2, [pc, #212]	@ (8004d9c <UART_SetConfig+0x2f4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d12a      	bne.n	8004d20 <UART_SetConfig+0x278>
 8004cca:	4b30      	ldr	r3, [pc, #192]	@ (8004d8c <UART_SetConfig+0x2e4>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cd8:	d01a      	beq.n	8004d10 <UART_SetConfig+0x268>
 8004cda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cde:	d81b      	bhi.n	8004d18 <UART_SetConfig+0x270>
 8004ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ce4:	d00c      	beq.n	8004d00 <UART_SetConfig+0x258>
 8004ce6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cea:	d815      	bhi.n	8004d18 <UART_SetConfig+0x270>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <UART_SetConfig+0x250>
 8004cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cf4:	d008      	beq.n	8004d08 <UART_SetConfig+0x260>
 8004cf6:	e00f      	b.n	8004d18 <UART_SetConfig+0x270>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cfe:	e052      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d00:	2302      	movs	r3, #2
 8004d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d06:	e04e      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d0e:	e04a      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d10:	2308      	movs	r3, #8
 8004d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d16:	e046      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d1e:	e042      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a17      	ldr	r2, [pc, #92]	@ (8004d84 <UART_SetConfig+0x2dc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d13a      	bne.n	8004da0 <UART_SetConfig+0x2f8>
 8004d2a:	4b18      	ldr	r3, [pc, #96]	@ (8004d8c <UART_SetConfig+0x2e4>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d38:	d01a      	beq.n	8004d70 <UART_SetConfig+0x2c8>
 8004d3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d3e:	d81b      	bhi.n	8004d78 <UART_SetConfig+0x2d0>
 8004d40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d44:	d00c      	beq.n	8004d60 <UART_SetConfig+0x2b8>
 8004d46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d4a:	d815      	bhi.n	8004d78 <UART_SetConfig+0x2d0>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <UART_SetConfig+0x2b0>
 8004d50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d54:	d008      	beq.n	8004d68 <UART_SetConfig+0x2c0>
 8004d56:	e00f      	b.n	8004d78 <UART_SetConfig+0x2d0>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d5e:	e022      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d60:	2302      	movs	r3, #2
 8004d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d66:	e01e      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d6e:	e01a      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d70:	2308      	movs	r3, #8
 8004d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d76:	e016      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d7e:	e012      	b.n	8004da6 <UART_SetConfig+0x2fe>
 8004d80:	cfff69f3 	.word	0xcfff69f3
 8004d84:	40008000 	.word	0x40008000
 8004d88:	40013800 	.word	0x40013800
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	40004400 	.word	0x40004400
 8004d94:	40004800 	.word	0x40004800
 8004d98:	40004c00 	.word	0x40004c00
 8004d9c:	40005000 	.word	0x40005000
 8004da0:	2310      	movs	r3, #16
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4aae      	ldr	r2, [pc, #696]	@ (8005064 <UART_SetConfig+0x5bc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	f040 8097 	bne.w	8004ee0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004db2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d823      	bhi.n	8004e02 <UART_SetConfig+0x35a>
 8004dba:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc0 <UART_SetConfig+0x318>)
 8004dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc0:	08004de5 	.word	0x08004de5
 8004dc4:	08004e03 	.word	0x08004e03
 8004dc8:	08004ded 	.word	0x08004ded
 8004dcc:	08004e03 	.word	0x08004e03
 8004dd0:	08004df3 	.word	0x08004df3
 8004dd4:	08004e03 	.word	0x08004e03
 8004dd8:	08004e03 	.word	0x08004e03
 8004ddc:	08004e03 	.word	0x08004e03
 8004de0:	08004dfb 	.word	0x08004dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de4:	f7fd ffb4 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8004de8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dea:	e010      	b.n	8004e0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dec:	4b9e      	ldr	r3, [pc, #632]	@ (8005068 <UART_SetConfig+0x5c0>)
 8004dee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004df0:	e00d      	b.n	8004e0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004df2:	f7fd ff3f 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8004df6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004df8:	e009      	b.n	8004e0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e00:	e005      	b.n	8004e0e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 8130 	beq.w	8005076 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	4a94      	ldr	r2, [pc, #592]	@ (800506c <UART_SetConfig+0x5c4>)
 8004e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e20:	461a      	mov	r2, r3
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	4413      	add	r3, r2
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d305      	bcc.n	8004e46 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d903      	bls.n	8004e4e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e4c:	e113      	b.n	8005076 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	2200      	movs	r2, #0
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	60fa      	str	r2, [r7, #12]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5a:	4a84      	ldr	r2, [pc, #528]	@ (800506c <UART_SetConfig+0x5c4>)
 8004e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2200      	movs	r2, #0
 8004e64:	603b      	str	r3, [r7, #0]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e70:	f7fb fec2 	bl	8000bf8 <__aeabi_uldivmod>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	020b      	lsls	r3, r1, #8
 8004e86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e8a:	0202      	lsls	r2, r0, #8
 8004e8c:	6979      	ldr	r1, [r7, #20]
 8004e8e:	6849      	ldr	r1, [r1, #4]
 8004e90:	0849      	lsrs	r1, r1, #1
 8004e92:	2000      	movs	r0, #0
 8004e94:	460c      	mov	r4, r1
 8004e96:	4605      	mov	r5, r0
 8004e98:	eb12 0804 	adds.w	r8, r2, r4
 8004e9c:	eb43 0905 	adc.w	r9, r3, r5
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	469a      	mov	sl, r3
 8004ea8:	4693      	mov	fp, r2
 8004eaa:	4652      	mov	r2, sl
 8004eac:	465b      	mov	r3, fp
 8004eae:	4640      	mov	r0, r8
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	f7fb fea1 	bl	8000bf8 <__aeabi_uldivmod>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4613      	mov	r3, r2
 8004ebc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ec4:	d308      	bcc.n	8004ed8 <UART_SetConfig+0x430>
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ecc:	d204      	bcs.n	8004ed8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6a3a      	ldr	r2, [r7, #32]
 8004ed4:	60da      	str	r2, [r3, #12]
 8004ed6:	e0ce      	b.n	8005076 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004ede:	e0ca      	b.n	8005076 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ee8:	d166      	bne.n	8004fb8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004eea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d827      	bhi.n	8004f42 <UART_SetConfig+0x49a>
 8004ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef8 <UART_SetConfig+0x450>)
 8004ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef8:	08004f1d 	.word	0x08004f1d
 8004efc:	08004f25 	.word	0x08004f25
 8004f00:	08004f2d 	.word	0x08004f2d
 8004f04:	08004f43 	.word	0x08004f43
 8004f08:	08004f33 	.word	0x08004f33
 8004f0c:	08004f43 	.word	0x08004f43
 8004f10:	08004f43 	.word	0x08004f43
 8004f14:	08004f43 	.word	0x08004f43
 8004f18:	08004f3b 	.word	0x08004f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f1c:	f7fd ff18 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8004f20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f22:	e014      	b.n	8004f4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f24:	f7fd ff2a 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8004f28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f2a:	e010      	b.n	8004f4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f2c:	4b4e      	ldr	r3, [pc, #312]	@ (8005068 <UART_SetConfig+0x5c0>)
 8004f2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f30:	e00d      	b.n	8004f4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f32:	f7fd fe9f 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8004f36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f38:	e009      	b.n	8004f4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f40:	e005      	b.n	8004f4e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 8090 	beq.w	8005076 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	4a44      	ldr	r2, [pc, #272]	@ (800506c <UART_SetConfig+0x5c4>)
 8004f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f60:	461a      	mov	r2, r3
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f68:	005a      	lsls	r2, r3, #1
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	441a      	add	r2, r3
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	2b0f      	cmp	r3, #15
 8004f80:	d916      	bls.n	8004fb0 <UART_SetConfig+0x508>
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f88:	d212      	bcs.n	8004fb0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	f023 030f 	bic.w	r3, r3, #15
 8004f92:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	085b      	lsrs	r3, r3, #1
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	8bfb      	ldrh	r3, [r7, #30]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	8bfa      	ldrh	r2, [r7, #30]
 8004fac:	60da      	str	r2, [r3, #12]
 8004fae:	e062      	b.n	8005076 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004fb6:	e05e      	b.n	8005076 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fb8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d828      	bhi.n	8005012 <UART_SetConfig+0x56a>
 8004fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc8 <UART_SetConfig+0x520>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	08004fed 	.word	0x08004fed
 8004fcc:	08004ff5 	.word	0x08004ff5
 8004fd0:	08004ffd 	.word	0x08004ffd
 8004fd4:	08005013 	.word	0x08005013
 8004fd8:	08005003 	.word	0x08005003
 8004fdc:	08005013 	.word	0x08005013
 8004fe0:	08005013 	.word	0x08005013
 8004fe4:	08005013 	.word	0x08005013
 8004fe8:	0800500b 	.word	0x0800500b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fec:	f7fd feb0 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8004ff0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ff2:	e014      	b.n	800501e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff4:	f7fd fec2 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8004ff8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ffa:	e010      	b.n	800501e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8005068 <UART_SetConfig+0x5c0>)
 8004ffe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005000:	e00d      	b.n	800501e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005002:	f7fd fe37 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8005006:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005008:	e009      	b.n	800501e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800500a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800500e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005010:	e005      	b.n	800501e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800501c:	bf00      	nop
    }

    if (pclk != 0U)
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	2b00      	cmp	r3, #0
 8005022:	d028      	beq.n	8005076 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	4a10      	ldr	r2, [pc, #64]	@ (800506c <UART_SetConfig+0x5c4>)
 800502a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800502e:	461a      	mov	r2, r3
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	fbb3 f2f2 	udiv	r2, r3, r2
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	085b      	lsrs	r3, r3, #1
 800503c:	441a      	add	r2, r3
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	fbb2 f3f3 	udiv	r3, r2, r3
 8005046:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	2b0f      	cmp	r3, #15
 800504c:	d910      	bls.n	8005070 <UART_SetConfig+0x5c8>
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005054:	d20c      	bcs.n	8005070 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	b29a      	uxth	r2, r3
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60da      	str	r2, [r3, #12]
 8005060:	e009      	b.n	8005076 <UART_SetConfig+0x5ce>
 8005062:	bf00      	nop
 8005064:	40008000 	.word	0x40008000
 8005068:	00f42400 	.word	0x00f42400
 800506c:	08008300 	.word	0x08008300
      }
      else
      {
        ret = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2201      	movs	r2, #1
 800507a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2201      	movs	r2, #1
 8005082:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2200      	movs	r2, #0
 800508a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2200      	movs	r2, #0
 8005090:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005092:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005096:	4618      	mov	r0, r3
 8005098:	3730      	adds	r7, #48	@ 0x30
 800509a:	46bd      	mov	sp, r7
 800509c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080050a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01a      	beq.n	80051b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800519e:	d10a      	bne.n	80051b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]
  }
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b098      	sub	sp, #96	@ 0x60
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051f4:	f7fc fcce 	bl	8001b94 <HAL_GetTick>
 80051f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b08      	cmp	r3, #8
 8005206:	d12f      	bne.n	8005268 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005208:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005210:	2200      	movs	r2, #0
 8005212:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f88e 	bl	8005338 <UART_WaitOnFlagUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d022      	beq.n	8005268 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005232:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005236:	653b      	str	r3, [r7, #80]	@ 0x50
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005240:	647b      	str	r3, [r7, #68]	@ 0x44
 8005242:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005246:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800524e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e6      	bne.n	8005222 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e063      	b.n	8005330 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b04      	cmp	r3, #4
 8005274:	d149      	bne.n	800530a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005276:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800527e:	2200      	movs	r2, #0
 8005280:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f857 	bl	8005338 <UART_WaitOnFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d03c      	beq.n	800530a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	623b      	str	r3, [r7, #32]
   return(result);
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80052b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052b6:	e841 2300 	strex	r3, r2, [r1]
 80052ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1e6      	bne.n	8005290 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3308      	adds	r3, #8
 80052c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f023 0301 	bic.w	r3, r3, #1
 80052d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3308      	adds	r3, #8
 80052e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052e2:	61fa      	str	r2, [r7, #28]
 80052e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	69b9      	ldr	r1, [r7, #24]
 80052e8:	69fa      	ldr	r2, [r7, #28]
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	617b      	str	r3, [r7, #20]
   return(result);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e5      	bne.n	80052c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e012      	b.n	8005330 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3758      	adds	r7, #88	@ 0x58
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	4613      	mov	r3, r2
 8005346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005348:	e04f      	b.n	80053ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005350:	d04b      	beq.n	80053ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005352:	f7fc fc1f 	bl	8001b94 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	429a      	cmp	r2, r3
 8005360:	d302      	bcc.n	8005368 <UART_WaitOnFlagUntilTimeout+0x30>
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e04e      	b.n	800540a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0304 	and.w	r3, r3, #4
 8005376:	2b00      	cmp	r3, #0
 8005378:	d037      	beq.n	80053ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b80      	cmp	r3, #128	@ 0x80
 800537e:	d034      	beq.n	80053ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b40      	cmp	r3, #64	@ 0x40
 8005384:	d031      	beq.n	80053ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b08      	cmp	r3, #8
 8005392:	d110      	bne.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2208      	movs	r2, #8
 800539a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f838 	bl	8005412 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2208      	movs	r2, #8
 80053a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e029      	b.n	800540a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053c4:	d111      	bne.n	80053ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f81e 	bl	8005412 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2220      	movs	r2, #32
 80053da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e00f      	b.n	800540a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4013      	ands	r3, r2
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	bf0c      	ite	eq
 80053fa:	2301      	moveq	r3, #1
 80053fc:	2300      	movne	r3, #0
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	461a      	mov	r2, r3
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	429a      	cmp	r2, r3
 8005406:	d0a0      	beq.n	800534a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005412:	b480      	push	{r7}
 8005414:	b095      	sub	sp, #84	@ 0x54
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800542e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	461a      	mov	r2, r3
 8005436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005438:	643b      	str	r3, [r7, #64]	@ 0x40
 800543a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800543e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e6      	bne.n	800541a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3308      	adds	r3, #8
 8005452:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	61fb      	str	r3, [r7, #28]
   return(result);
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005462:	f023 0301 	bic.w	r3, r3, #1
 8005466:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3308      	adds	r3, #8
 800546e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005470:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005472:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e3      	bne.n	800544c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005488:	2b01      	cmp	r3, #1
 800548a:	d118      	bne.n	80054be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	60bb      	str	r3, [r7, #8]
   return(result);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f023 0310 	bic.w	r3, r3, #16
 80054a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6979      	ldr	r1, [r7, #20]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	613b      	str	r3, [r7, #16]
   return(result);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e6      	bne.n	800548c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80054d2:	bf00      	nop
 80054d4:	3754      	adds	r7, #84	@ 0x54
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d101      	bne.n	80054f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80054f0:	2302      	movs	r3, #2
 80054f2:	e027      	b.n	8005544 <HAL_UARTEx_DisableFifoMode+0x66>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2224      	movs	r2, #36	@ 0x24
 8005500:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0201 	bic.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005522:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2220      	movs	r2, #32
 8005536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005564:	2302      	movs	r3, #2
 8005566:	e02d      	b.n	80055c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2224      	movs	r2, #36	@ 0x24
 8005574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0201 	bic.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f84f 	bl	8005648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e02d      	b.n	8005640 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2224      	movs	r2, #36	@ 0x24
 80055f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0201 	bic.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f811 	bl	8005648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005654:	2b00      	cmp	r3, #0
 8005656:	d108      	bne.n	800566a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005668:	e031      	b.n	80056ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800566a:	2308      	movs	r3, #8
 800566c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800566e:	2308      	movs	r3, #8
 8005670:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	0e5b      	lsrs	r3, r3, #25
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	0f5b      	lsrs	r3, r3, #29
 800568a:	b2db      	uxtb	r3, r3
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005692:	7bbb      	ldrb	r3, [r7, #14]
 8005694:	7b3a      	ldrb	r2, [r7, #12]
 8005696:	4911      	ldr	r1, [pc, #68]	@ (80056dc <UARTEx_SetNbDataToProcess+0x94>)
 8005698:	5c8a      	ldrb	r2, [r1, r2]
 800569a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800569e:	7b3a      	ldrb	r2, [r7, #12]
 80056a0:	490f      	ldr	r1, [pc, #60]	@ (80056e0 <UARTEx_SetNbDataToProcess+0x98>)
 80056a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	7b7a      	ldrb	r2, [r7, #13]
 80056b4:	4909      	ldr	r1, [pc, #36]	@ (80056dc <UARTEx_SetNbDataToProcess+0x94>)
 80056b6:	5c8a      	ldrb	r2, [r1, r2]
 80056b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056bc:	7b7a      	ldrb	r2, [r7, #13]
 80056be:	4908      	ldr	r1, [pc, #32]	@ (80056e0 <UARTEx_SetNbDataToProcess+0x98>)
 80056c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80056ce:	bf00      	nop
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	08008318 	.word	0x08008318
 80056e0:	08008320 	.word	0x08008320

080056e4 <fmaxf>:
 80056e4:	b508      	push	{r3, lr}
 80056e6:	ed2d 8b02 	vpush	{d8}
 80056ea:	eeb0 8a40 	vmov.f32	s16, s0
 80056ee:	eef0 8a60 	vmov.f32	s17, s1
 80056f2:	f000 f831 	bl	8005758 <__fpclassifyf>
 80056f6:	b930      	cbnz	r0, 8005706 <fmaxf+0x22>
 80056f8:	eeb0 8a68 	vmov.f32	s16, s17
 80056fc:	eeb0 0a48 	vmov.f32	s0, s16
 8005700:	ecbd 8b02 	vpop	{d8}
 8005704:	bd08      	pop	{r3, pc}
 8005706:	eeb0 0a68 	vmov.f32	s0, s17
 800570a:	f000 f825 	bl	8005758 <__fpclassifyf>
 800570e:	2800      	cmp	r0, #0
 8005710:	d0f4      	beq.n	80056fc <fmaxf+0x18>
 8005712:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800571a:	dded      	ble.n	80056f8 <fmaxf+0x14>
 800571c:	e7ee      	b.n	80056fc <fmaxf+0x18>

0800571e <fminf>:
 800571e:	b508      	push	{r3, lr}
 8005720:	ed2d 8b02 	vpush	{d8}
 8005724:	eeb0 8a40 	vmov.f32	s16, s0
 8005728:	eef0 8a60 	vmov.f32	s17, s1
 800572c:	f000 f814 	bl	8005758 <__fpclassifyf>
 8005730:	b930      	cbnz	r0, 8005740 <fminf+0x22>
 8005732:	eeb0 8a68 	vmov.f32	s16, s17
 8005736:	eeb0 0a48 	vmov.f32	s0, s16
 800573a:	ecbd 8b02 	vpop	{d8}
 800573e:	bd08      	pop	{r3, pc}
 8005740:	eeb0 0a68 	vmov.f32	s0, s17
 8005744:	f000 f808 	bl	8005758 <__fpclassifyf>
 8005748:	2800      	cmp	r0, #0
 800574a:	d0f4      	beq.n	8005736 <fminf+0x18>
 800574c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005754:	d5ed      	bpl.n	8005732 <fminf+0x14>
 8005756:	e7ee      	b.n	8005736 <fminf+0x18>

08005758 <__fpclassifyf>:
 8005758:	ee10 3a10 	vmov	r3, s0
 800575c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8005760:	d00d      	beq.n	800577e <__fpclassifyf+0x26>
 8005762:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8005766:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800576a:	d30a      	bcc.n	8005782 <__fpclassifyf+0x2a>
 800576c:	4b07      	ldr	r3, [pc, #28]	@ (800578c <__fpclassifyf+0x34>)
 800576e:	1e42      	subs	r2, r0, #1
 8005770:	429a      	cmp	r2, r3
 8005772:	d908      	bls.n	8005786 <__fpclassifyf+0x2e>
 8005774:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8005778:	4258      	negs	r0, r3
 800577a:	4158      	adcs	r0, r3
 800577c:	4770      	bx	lr
 800577e:	2002      	movs	r0, #2
 8005780:	4770      	bx	lr
 8005782:	2004      	movs	r0, #4
 8005784:	4770      	bx	lr
 8005786:	2003      	movs	r0, #3
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	007ffffe 	.word	0x007ffffe

08005790 <floorf>:
 8005790:	ee10 3a10 	vmov	r3, s0
 8005794:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005798:	3a7f      	subs	r2, #127	@ 0x7f
 800579a:	2a16      	cmp	r2, #22
 800579c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80057a0:	dc2b      	bgt.n	80057fa <floorf+0x6a>
 80057a2:	2a00      	cmp	r2, #0
 80057a4:	da12      	bge.n	80057cc <floorf+0x3c>
 80057a6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800580c <floorf+0x7c>
 80057aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80057ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80057b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b6:	dd06      	ble.n	80057c6 <floorf+0x36>
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	da24      	bge.n	8005806 <floorf+0x76>
 80057bc:	2900      	cmp	r1, #0
 80057be:	4b14      	ldr	r3, [pc, #80]	@ (8005810 <floorf+0x80>)
 80057c0:	bf08      	it	eq
 80057c2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80057c6:	ee00 3a10 	vmov	s0, r3
 80057ca:	4770      	bx	lr
 80057cc:	4911      	ldr	r1, [pc, #68]	@ (8005814 <floorf+0x84>)
 80057ce:	4111      	asrs	r1, r2
 80057d0:	420b      	tst	r3, r1
 80057d2:	d0fa      	beq.n	80057ca <floorf+0x3a>
 80057d4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800580c <floorf+0x7c>
 80057d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80057dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80057e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e4:	ddef      	ble.n	80057c6 <floorf+0x36>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	bfbe      	ittt	lt
 80057ea:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80057ee:	fa40 f202 	asrlt.w	r2, r0, r2
 80057f2:	189b      	addlt	r3, r3, r2
 80057f4:	ea23 0301 	bic.w	r3, r3, r1
 80057f8:	e7e5      	b.n	80057c6 <floorf+0x36>
 80057fa:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80057fe:	d3e4      	bcc.n	80057ca <floorf+0x3a>
 8005800:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005804:	4770      	bx	lr
 8005806:	2300      	movs	r3, #0
 8005808:	e7dd      	b.n	80057c6 <floorf+0x36>
 800580a:	bf00      	nop
 800580c:	7149f2ca 	.word	0x7149f2ca
 8005810:	bf800000 	.word	0xbf800000
 8005814:	007fffff 	.word	0x007fffff

08005818 <__cvt>:
 8005818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800581c:	ec57 6b10 	vmov	r6, r7, d0
 8005820:	2f00      	cmp	r7, #0
 8005822:	460c      	mov	r4, r1
 8005824:	4619      	mov	r1, r3
 8005826:	463b      	mov	r3, r7
 8005828:	bfbb      	ittet	lt
 800582a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800582e:	461f      	movlt	r7, r3
 8005830:	2300      	movge	r3, #0
 8005832:	232d      	movlt	r3, #45	@ 0x2d
 8005834:	700b      	strb	r3, [r1, #0]
 8005836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005838:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800583c:	4691      	mov	r9, r2
 800583e:	f023 0820 	bic.w	r8, r3, #32
 8005842:	bfbc      	itt	lt
 8005844:	4632      	movlt	r2, r6
 8005846:	4616      	movlt	r6, r2
 8005848:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800584c:	d005      	beq.n	800585a <__cvt+0x42>
 800584e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005852:	d100      	bne.n	8005856 <__cvt+0x3e>
 8005854:	3401      	adds	r4, #1
 8005856:	2102      	movs	r1, #2
 8005858:	e000      	b.n	800585c <__cvt+0x44>
 800585a:	2103      	movs	r1, #3
 800585c:	ab03      	add	r3, sp, #12
 800585e:	9301      	str	r3, [sp, #4]
 8005860:	ab02      	add	r3, sp, #8
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	ec47 6b10 	vmov	d0, r6, r7
 8005868:	4653      	mov	r3, sl
 800586a:	4622      	mov	r2, r4
 800586c:	f000 fe20 	bl	80064b0 <_dtoa_r>
 8005870:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005874:	4605      	mov	r5, r0
 8005876:	d119      	bne.n	80058ac <__cvt+0x94>
 8005878:	f019 0f01 	tst.w	r9, #1
 800587c:	d00e      	beq.n	800589c <__cvt+0x84>
 800587e:	eb00 0904 	add.w	r9, r0, r4
 8005882:	2200      	movs	r2, #0
 8005884:	2300      	movs	r3, #0
 8005886:	4630      	mov	r0, r6
 8005888:	4639      	mov	r1, r7
 800588a:	f7fb f945 	bl	8000b18 <__aeabi_dcmpeq>
 800588e:	b108      	cbz	r0, 8005894 <__cvt+0x7c>
 8005890:	f8cd 900c 	str.w	r9, [sp, #12]
 8005894:	2230      	movs	r2, #48	@ 0x30
 8005896:	9b03      	ldr	r3, [sp, #12]
 8005898:	454b      	cmp	r3, r9
 800589a:	d31e      	bcc.n	80058da <__cvt+0xc2>
 800589c:	9b03      	ldr	r3, [sp, #12]
 800589e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80058a0:	1b5b      	subs	r3, r3, r5
 80058a2:	4628      	mov	r0, r5
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	b004      	add	sp, #16
 80058a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80058b0:	eb00 0904 	add.w	r9, r0, r4
 80058b4:	d1e5      	bne.n	8005882 <__cvt+0x6a>
 80058b6:	7803      	ldrb	r3, [r0, #0]
 80058b8:	2b30      	cmp	r3, #48	@ 0x30
 80058ba:	d10a      	bne.n	80058d2 <__cvt+0xba>
 80058bc:	2200      	movs	r2, #0
 80058be:	2300      	movs	r3, #0
 80058c0:	4630      	mov	r0, r6
 80058c2:	4639      	mov	r1, r7
 80058c4:	f7fb f928 	bl	8000b18 <__aeabi_dcmpeq>
 80058c8:	b918      	cbnz	r0, 80058d2 <__cvt+0xba>
 80058ca:	f1c4 0401 	rsb	r4, r4, #1
 80058ce:	f8ca 4000 	str.w	r4, [sl]
 80058d2:	f8da 3000 	ldr.w	r3, [sl]
 80058d6:	4499      	add	r9, r3
 80058d8:	e7d3      	b.n	8005882 <__cvt+0x6a>
 80058da:	1c59      	adds	r1, r3, #1
 80058dc:	9103      	str	r1, [sp, #12]
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	e7d9      	b.n	8005896 <__cvt+0x7e>

080058e2 <__exponent>:
 80058e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058e4:	2900      	cmp	r1, #0
 80058e6:	bfba      	itte	lt
 80058e8:	4249      	neglt	r1, r1
 80058ea:	232d      	movlt	r3, #45	@ 0x2d
 80058ec:	232b      	movge	r3, #43	@ 0x2b
 80058ee:	2909      	cmp	r1, #9
 80058f0:	7002      	strb	r2, [r0, #0]
 80058f2:	7043      	strb	r3, [r0, #1]
 80058f4:	dd29      	ble.n	800594a <__exponent+0x68>
 80058f6:	f10d 0307 	add.w	r3, sp, #7
 80058fa:	461d      	mov	r5, r3
 80058fc:	270a      	movs	r7, #10
 80058fe:	461a      	mov	r2, r3
 8005900:	fbb1 f6f7 	udiv	r6, r1, r7
 8005904:	fb07 1416 	mls	r4, r7, r6, r1
 8005908:	3430      	adds	r4, #48	@ 0x30
 800590a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800590e:	460c      	mov	r4, r1
 8005910:	2c63      	cmp	r4, #99	@ 0x63
 8005912:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005916:	4631      	mov	r1, r6
 8005918:	dcf1      	bgt.n	80058fe <__exponent+0x1c>
 800591a:	3130      	adds	r1, #48	@ 0x30
 800591c:	1e94      	subs	r4, r2, #2
 800591e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005922:	1c41      	adds	r1, r0, #1
 8005924:	4623      	mov	r3, r4
 8005926:	42ab      	cmp	r3, r5
 8005928:	d30a      	bcc.n	8005940 <__exponent+0x5e>
 800592a:	f10d 0309 	add.w	r3, sp, #9
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	42ac      	cmp	r4, r5
 8005932:	bf88      	it	hi
 8005934:	2300      	movhi	r3, #0
 8005936:	3302      	adds	r3, #2
 8005938:	4403      	add	r3, r0
 800593a:	1a18      	subs	r0, r3, r0
 800593c:	b003      	add	sp, #12
 800593e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005940:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005944:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005948:	e7ed      	b.n	8005926 <__exponent+0x44>
 800594a:	2330      	movs	r3, #48	@ 0x30
 800594c:	3130      	adds	r1, #48	@ 0x30
 800594e:	7083      	strb	r3, [r0, #2]
 8005950:	70c1      	strb	r1, [r0, #3]
 8005952:	1d03      	adds	r3, r0, #4
 8005954:	e7f1      	b.n	800593a <__exponent+0x58>
	...

08005958 <_printf_float>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	b08d      	sub	sp, #52	@ 0x34
 800595e:	460c      	mov	r4, r1
 8005960:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005964:	4616      	mov	r6, r2
 8005966:	461f      	mov	r7, r3
 8005968:	4605      	mov	r5, r0
 800596a:	f000 fd13 	bl	8006394 <_localeconv_r>
 800596e:	6803      	ldr	r3, [r0, #0]
 8005970:	9304      	str	r3, [sp, #16]
 8005972:	4618      	mov	r0, r3
 8005974:	f7fa fca4 	bl	80002c0 <strlen>
 8005978:	2300      	movs	r3, #0
 800597a:	930a      	str	r3, [sp, #40]	@ 0x28
 800597c:	f8d8 3000 	ldr.w	r3, [r8]
 8005980:	9005      	str	r0, [sp, #20]
 8005982:	3307      	adds	r3, #7
 8005984:	f023 0307 	bic.w	r3, r3, #7
 8005988:	f103 0208 	add.w	r2, r3, #8
 800598c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005990:	f8d4 b000 	ldr.w	fp, [r4]
 8005994:	f8c8 2000 	str.w	r2, [r8]
 8005998:	e9d3 8900 	ldrd	r8, r9, [r3]
 800599c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80059a0:	9307      	str	r3, [sp, #28]
 80059a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80059a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80059aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059ae:	4b9c      	ldr	r3, [pc, #624]	@ (8005c20 <_printf_float+0x2c8>)
 80059b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059b4:	f7fb f8e2 	bl	8000b7c <__aeabi_dcmpun>
 80059b8:	bb70      	cbnz	r0, 8005a18 <_printf_float+0xc0>
 80059ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059be:	4b98      	ldr	r3, [pc, #608]	@ (8005c20 <_printf_float+0x2c8>)
 80059c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059c4:	f7fb f8bc 	bl	8000b40 <__aeabi_dcmple>
 80059c8:	bb30      	cbnz	r0, 8005a18 <_printf_float+0xc0>
 80059ca:	2200      	movs	r2, #0
 80059cc:	2300      	movs	r3, #0
 80059ce:	4640      	mov	r0, r8
 80059d0:	4649      	mov	r1, r9
 80059d2:	f7fb f8ab 	bl	8000b2c <__aeabi_dcmplt>
 80059d6:	b110      	cbz	r0, 80059de <_printf_float+0x86>
 80059d8:	232d      	movs	r3, #45	@ 0x2d
 80059da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059de:	4a91      	ldr	r2, [pc, #580]	@ (8005c24 <_printf_float+0x2cc>)
 80059e0:	4b91      	ldr	r3, [pc, #580]	@ (8005c28 <_printf_float+0x2d0>)
 80059e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80059e6:	bf8c      	ite	hi
 80059e8:	4690      	movhi	r8, r2
 80059ea:	4698      	movls	r8, r3
 80059ec:	2303      	movs	r3, #3
 80059ee:	6123      	str	r3, [r4, #16]
 80059f0:	f02b 0304 	bic.w	r3, fp, #4
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	f04f 0900 	mov.w	r9, #0
 80059fa:	9700      	str	r7, [sp, #0]
 80059fc:	4633      	mov	r3, r6
 80059fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005a00:	4621      	mov	r1, r4
 8005a02:	4628      	mov	r0, r5
 8005a04:	f000 f9d2 	bl	8005dac <_printf_common>
 8005a08:	3001      	adds	r0, #1
 8005a0a:	f040 808d 	bne.w	8005b28 <_printf_float+0x1d0>
 8005a0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a12:	b00d      	add	sp, #52	@ 0x34
 8005a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a18:	4642      	mov	r2, r8
 8005a1a:	464b      	mov	r3, r9
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	4649      	mov	r1, r9
 8005a20:	f7fb f8ac 	bl	8000b7c <__aeabi_dcmpun>
 8005a24:	b140      	cbz	r0, 8005a38 <_printf_float+0xe0>
 8005a26:	464b      	mov	r3, r9
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	bfbc      	itt	lt
 8005a2c:	232d      	movlt	r3, #45	@ 0x2d
 8005a2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005a32:	4a7e      	ldr	r2, [pc, #504]	@ (8005c2c <_printf_float+0x2d4>)
 8005a34:	4b7e      	ldr	r3, [pc, #504]	@ (8005c30 <_printf_float+0x2d8>)
 8005a36:	e7d4      	b.n	80059e2 <_printf_float+0x8a>
 8005a38:	6863      	ldr	r3, [r4, #4]
 8005a3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005a3e:	9206      	str	r2, [sp, #24]
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	d13b      	bne.n	8005abc <_printf_float+0x164>
 8005a44:	2306      	movs	r3, #6
 8005a46:	6063      	str	r3, [r4, #4]
 8005a48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	6022      	str	r2, [r4, #0]
 8005a50:	9303      	str	r3, [sp, #12]
 8005a52:	ab0a      	add	r3, sp, #40	@ 0x28
 8005a54:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005a58:	ab09      	add	r3, sp, #36	@ 0x24
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	6861      	ldr	r1, [r4, #4]
 8005a5e:	ec49 8b10 	vmov	d0, r8, r9
 8005a62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005a66:	4628      	mov	r0, r5
 8005a68:	f7ff fed6 	bl	8005818 <__cvt>
 8005a6c:	9b06      	ldr	r3, [sp, #24]
 8005a6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a70:	2b47      	cmp	r3, #71	@ 0x47
 8005a72:	4680      	mov	r8, r0
 8005a74:	d129      	bne.n	8005aca <_printf_float+0x172>
 8005a76:	1cc8      	adds	r0, r1, #3
 8005a78:	db02      	blt.n	8005a80 <_printf_float+0x128>
 8005a7a:	6863      	ldr	r3, [r4, #4]
 8005a7c:	4299      	cmp	r1, r3
 8005a7e:	dd41      	ble.n	8005b04 <_printf_float+0x1ac>
 8005a80:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a84:	fa5f fa8a 	uxtb.w	sl, sl
 8005a88:	3901      	subs	r1, #1
 8005a8a:	4652      	mov	r2, sl
 8005a8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005a90:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a92:	f7ff ff26 	bl	80058e2 <__exponent>
 8005a96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a98:	1813      	adds	r3, r2, r0
 8005a9a:	2a01      	cmp	r2, #1
 8005a9c:	4681      	mov	r9, r0
 8005a9e:	6123      	str	r3, [r4, #16]
 8005aa0:	dc02      	bgt.n	8005aa8 <_printf_float+0x150>
 8005aa2:	6822      	ldr	r2, [r4, #0]
 8005aa4:	07d2      	lsls	r2, r2, #31
 8005aa6:	d501      	bpl.n	8005aac <_printf_float+0x154>
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	6123      	str	r3, [r4, #16]
 8005aac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0a2      	beq.n	80059fa <_printf_float+0xa2>
 8005ab4:	232d      	movs	r3, #45	@ 0x2d
 8005ab6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005aba:	e79e      	b.n	80059fa <_printf_float+0xa2>
 8005abc:	9a06      	ldr	r2, [sp, #24]
 8005abe:	2a47      	cmp	r2, #71	@ 0x47
 8005ac0:	d1c2      	bne.n	8005a48 <_printf_float+0xf0>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1c0      	bne.n	8005a48 <_printf_float+0xf0>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e7bd      	b.n	8005a46 <_printf_float+0xee>
 8005aca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ace:	d9db      	bls.n	8005a88 <_printf_float+0x130>
 8005ad0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ad4:	d118      	bne.n	8005b08 <_printf_float+0x1b0>
 8005ad6:	2900      	cmp	r1, #0
 8005ad8:	6863      	ldr	r3, [r4, #4]
 8005ada:	dd0b      	ble.n	8005af4 <_printf_float+0x19c>
 8005adc:	6121      	str	r1, [r4, #16]
 8005ade:	b913      	cbnz	r3, 8005ae6 <_printf_float+0x18e>
 8005ae0:	6822      	ldr	r2, [r4, #0]
 8005ae2:	07d0      	lsls	r0, r2, #31
 8005ae4:	d502      	bpl.n	8005aec <_printf_float+0x194>
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	440b      	add	r3, r1
 8005aea:	6123      	str	r3, [r4, #16]
 8005aec:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005aee:	f04f 0900 	mov.w	r9, #0
 8005af2:	e7db      	b.n	8005aac <_printf_float+0x154>
 8005af4:	b913      	cbnz	r3, 8005afc <_printf_float+0x1a4>
 8005af6:	6822      	ldr	r2, [r4, #0]
 8005af8:	07d2      	lsls	r2, r2, #31
 8005afa:	d501      	bpl.n	8005b00 <_printf_float+0x1a8>
 8005afc:	3302      	adds	r3, #2
 8005afe:	e7f4      	b.n	8005aea <_printf_float+0x192>
 8005b00:	2301      	movs	r3, #1
 8005b02:	e7f2      	b.n	8005aea <_printf_float+0x192>
 8005b04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005b08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b0a:	4299      	cmp	r1, r3
 8005b0c:	db05      	blt.n	8005b1a <_printf_float+0x1c2>
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	6121      	str	r1, [r4, #16]
 8005b12:	07d8      	lsls	r0, r3, #31
 8005b14:	d5ea      	bpl.n	8005aec <_printf_float+0x194>
 8005b16:	1c4b      	adds	r3, r1, #1
 8005b18:	e7e7      	b.n	8005aea <_printf_float+0x192>
 8005b1a:	2900      	cmp	r1, #0
 8005b1c:	bfd4      	ite	le
 8005b1e:	f1c1 0202 	rsble	r2, r1, #2
 8005b22:	2201      	movgt	r2, #1
 8005b24:	4413      	add	r3, r2
 8005b26:	e7e0      	b.n	8005aea <_printf_float+0x192>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	055a      	lsls	r2, r3, #21
 8005b2c:	d407      	bmi.n	8005b3e <_printf_float+0x1e6>
 8005b2e:	6923      	ldr	r3, [r4, #16]
 8005b30:	4642      	mov	r2, r8
 8005b32:	4631      	mov	r1, r6
 8005b34:	4628      	mov	r0, r5
 8005b36:	47b8      	blx	r7
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d12b      	bne.n	8005b94 <_printf_float+0x23c>
 8005b3c:	e767      	b.n	8005a0e <_printf_float+0xb6>
 8005b3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b42:	f240 80dd 	bls.w	8005d00 <_printf_float+0x3a8>
 8005b46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f7fa ffe3 	bl	8000b18 <__aeabi_dcmpeq>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d033      	beq.n	8005bbe <_printf_float+0x266>
 8005b56:	4a37      	ldr	r2, [pc, #220]	@ (8005c34 <_printf_float+0x2dc>)
 8005b58:	2301      	movs	r3, #1
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	47b8      	blx	r7
 8005b60:	3001      	adds	r0, #1
 8005b62:	f43f af54 	beq.w	8005a0e <_printf_float+0xb6>
 8005b66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005b6a:	4543      	cmp	r3, r8
 8005b6c:	db02      	blt.n	8005b74 <_printf_float+0x21c>
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	07d8      	lsls	r0, r3, #31
 8005b72:	d50f      	bpl.n	8005b94 <_printf_float+0x23c>
 8005b74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b78:	4631      	mov	r1, r6
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	47b8      	blx	r7
 8005b7e:	3001      	adds	r0, #1
 8005b80:	f43f af45 	beq.w	8005a0e <_printf_float+0xb6>
 8005b84:	f04f 0900 	mov.w	r9, #0
 8005b88:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005b8c:	f104 0a1a 	add.w	sl, r4, #26
 8005b90:	45c8      	cmp	r8, r9
 8005b92:	dc09      	bgt.n	8005ba8 <_printf_float+0x250>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	079b      	lsls	r3, r3, #30
 8005b98:	f100 8103 	bmi.w	8005da2 <_printf_float+0x44a>
 8005b9c:	68e0      	ldr	r0, [r4, #12]
 8005b9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ba0:	4298      	cmp	r0, r3
 8005ba2:	bfb8      	it	lt
 8005ba4:	4618      	movlt	r0, r3
 8005ba6:	e734      	b.n	8005a12 <_printf_float+0xba>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	4652      	mov	r2, sl
 8005bac:	4631      	mov	r1, r6
 8005bae:	4628      	mov	r0, r5
 8005bb0:	47b8      	blx	r7
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	f43f af2b 	beq.w	8005a0e <_printf_float+0xb6>
 8005bb8:	f109 0901 	add.w	r9, r9, #1
 8005bbc:	e7e8      	b.n	8005b90 <_printf_float+0x238>
 8005bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	dc39      	bgt.n	8005c38 <_printf_float+0x2e0>
 8005bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c34 <_printf_float+0x2dc>)
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4631      	mov	r1, r6
 8005bca:	4628      	mov	r0, r5
 8005bcc:	47b8      	blx	r7
 8005bce:	3001      	adds	r0, #1
 8005bd0:	f43f af1d 	beq.w	8005a0e <_printf_float+0xb6>
 8005bd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005bd8:	ea59 0303 	orrs.w	r3, r9, r3
 8005bdc:	d102      	bne.n	8005be4 <_printf_float+0x28c>
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	07d9      	lsls	r1, r3, #31
 8005be2:	d5d7      	bpl.n	8005b94 <_printf_float+0x23c>
 8005be4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005be8:	4631      	mov	r1, r6
 8005bea:	4628      	mov	r0, r5
 8005bec:	47b8      	blx	r7
 8005bee:	3001      	adds	r0, #1
 8005bf0:	f43f af0d 	beq.w	8005a0e <_printf_float+0xb6>
 8005bf4:	f04f 0a00 	mov.w	sl, #0
 8005bf8:	f104 0b1a 	add.w	fp, r4, #26
 8005bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bfe:	425b      	negs	r3, r3
 8005c00:	4553      	cmp	r3, sl
 8005c02:	dc01      	bgt.n	8005c08 <_printf_float+0x2b0>
 8005c04:	464b      	mov	r3, r9
 8005c06:	e793      	b.n	8005b30 <_printf_float+0x1d8>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	465a      	mov	r2, fp
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	4628      	mov	r0, r5
 8005c10:	47b8      	blx	r7
 8005c12:	3001      	adds	r0, #1
 8005c14:	f43f aefb 	beq.w	8005a0e <_printf_float+0xb6>
 8005c18:	f10a 0a01 	add.w	sl, sl, #1
 8005c1c:	e7ee      	b.n	8005bfc <_printf_float+0x2a4>
 8005c1e:	bf00      	nop
 8005c20:	7fefffff 	.word	0x7fefffff
 8005c24:	0800832c 	.word	0x0800832c
 8005c28:	08008328 	.word	0x08008328
 8005c2c:	08008334 	.word	0x08008334
 8005c30:	08008330 	.word	0x08008330
 8005c34:	08008338 	.word	0x08008338
 8005c38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c3e:	4553      	cmp	r3, sl
 8005c40:	bfa8      	it	ge
 8005c42:	4653      	movge	r3, sl
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	4699      	mov	r9, r3
 8005c48:	dc36      	bgt.n	8005cb8 <_printf_float+0x360>
 8005c4a:	f04f 0b00 	mov.w	fp, #0
 8005c4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c52:	f104 021a 	add.w	r2, r4, #26
 8005c56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c58:	9306      	str	r3, [sp, #24]
 8005c5a:	eba3 0309 	sub.w	r3, r3, r9
 8005c5e:	455b      	cmp	r3, fp
 8005c60:	dc31      	bgt.n	8005cc6 <_printf_float+0x36e>
 8005c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c64:	459a      	cmp	sl, r3
 8005c66:	dc3a      	bgt.n	8005cde <_printf_float+0x386>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	07da      	lsls	r2, r3, #31
 8005c6c:	d437      	bmi.n	8005cde <_printf_float+0x386>
 8005c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c70:	ebaa 0903 	sub.w	r9, sl, r3
 8005c74:	9b06      	ldr	r3, [sp, #24]
 8005c76:	ebaa 0303 	sub.w	r3, sl, r3
 8005c7a:	4599      	cmp	r9, r3
 8005c7c:	bfa8      	it	ge
 8005c7e:	4699      	movge	r9, r3
 8005c80:	f1b9 0f00 	cmp.w	r9, #0
 8005c84:	dc33      	bgt.n	8005cee <_printf_float+0x396>
 8005c86:	f04f 0800 	mov.w	r8, #0
 8005c8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c8e:	f104 0b1a 	add.w	fp, r4, #26
 8005c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c94:	ebaa 0303 	sub.w	r3, sl, r3
 8005c98:	eba3 0309 	sub.w	r3, r3, r9
 8005c9c:	4543      	cmp	r3, r8
 8005c9e:	f77f af79 	ble.w	8005b94 <_printf_float+0x23c>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	465a      	mov	r2, fp
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4628      	mov	r0, r5
 8005caa:	47b8      	blx	r7
 8005cac:	3001      	adds	r0, #1
 8005cae:	f43f aeae 	beq.w	8005a0e <_printf_float+0xb6>
 8005cb2:	f108 0801 	add.w	r8, r8, #1
 8005cb6:	e7ec      	b.n	8005c92 <_printf_float+0x33a>
 8005cb8:	4642      	mov	r2, r8
 8005cba:	4631      	mov	r1, r6
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	47b8      	blx	r7
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d1c2      	bne.n	8005c4a <_printf_float+0x2f2>
 8005cc4:	e6a3      	b.n	8005a0e <_printf_float+0xb6>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4631      	mov	r1, r6
 8005cca:	4628      	mov	r0, r5
 8005ccc:	9206      	str	r2, [sp, #24]
 8005cce:	47b8      	blx	r7
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	f43f ae9c 	beq.w	8005a0e <_printf_float+0xb6>
 8005cd6:	9a06      	ldr	r2, [sp, #24]
 8005cd8:	f10b 0b01 	add.w	fp, fp, #1
 8005cdc:	e7bb      	b.n	8005c56 <_printf_float+0x2fe>
 8005cde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	47b8      	blx	r7
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d1c0      	bne.n	8005c6e <_printf_float+0x316>
 8005cec:	e68f      	b.n	8005a0e <_printf_float+0xb6>
 8005cee:	9a06      	ldr	r2, [sp, #24]
 8005cf0:	464b      	mov	r3, r9
 8005cf2:	4442      	add	r2, r8
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	47b8      	blx	r7
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	d1c3      	bne.n	8005c86 <_printf_float+0x32e>
 8005cfe:	e686      	b.n	8005a0e <_printf_float+0xb6>
 8005d00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d04:	f1ba 0f01 	cmp.w	sl, #1
 8005d08:	dc01      	bgt.n	8005d0e <_printf_float+0x3b6>
 8005d0a:	07db      	lsls	r3, r3, #31
 8005d0c:	d536      	bpl.n	8005d7c <_printf_float+0x424>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	4642      	mov	r2, r8
 8005d12:	4631      	mov	r1, r6
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b8      	blx	r7
 8005d18:	3001      	adds	r0, #1
 8005d1a:	f43f ae78 	beq.w	8005a0e <_printf_float+0xb6>
 8005d1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d22:	4631      	mov	r1, r6
 8005d24:	4628      	mov	r0, r5
 8005d26:	47b8      	blx	r7
 8005d28:	3001      	adds	r0, #1
 8005d2a:	f43f ae70 	beq.w	8005a0e <_printf_float+0xb6>
 8005d2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d32:	2200      	movs	r2, #0
 8005d34:	2300      	movs	r3, #0
 8005d36:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005d3a:	f7fa feed 	bl	8000b18 <__aeabi_dcmpeq>
 8005d3e:	b9c0      	cbnz	r0, 8005d72 <_printf_float+0x41a>
 8005d40:	4653      	mov	r3, sl
 8005d42:	f108 0201 	add.w	r2, r8, #1
 8005d46:	4631      	mov	r1, r6
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b8      	blx	r7
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d10c      	bne.n	8005d6a <_printf_float+0x412>
 8005d50:	e65d      	b.n	8005a0e <_printf_float+0xb6>
 8005d52:	2301      	movs	r3, #1
 8005d54:	465a      	mov	r2, fp
 8005d56:	4631      	mov	r1, r6
 8005d58:	4628      	mov	r0, r5
 8005d5a:	47b8      	blx	r7
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	f43f ae56 	beq.w	8005a0e <_printf_float+0xb6>
 8005d62:	f108 0801 	add.w	r8, r8, #1
 8005d66:	45d0      	cmp	r8, sl
 8005d68:	dbf3      	blt.n	8005d52 <_printf_float+0x3fa>
 8005d6a:	464b      	mov	r3, r9
 8005d6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d70:	e6df      	b.n	8005b32 <_printf_float+0x1da>
 8005d72:	f04f 0800 	mov.w	r8, #0
 8005d76:	f104 0b1a 	add.w	fp, r4, #26
 8005d7a:	e7f4      	b.n	8005d66 <_printf_float+0x40e>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	4642      	mov	r2, r8
 8005d80:	e7e1      	b.n	8005d46 <_printf_float+0x3ee>
 8005d82:	2301      	movs	r3, #1
 8005d84:	464a      	mov	r2, r9
 8005d86:	4631      	mov	r1, r6
 8005d88:	4628      	mov	r0, r5
 8005d8a:	47b8      	blx	r7
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	f43f ae3e 	beq.w	8005a0e <_printf_float+0xb6>
 8005d92:	f108 0801 	add.w	r8, r8, #1
 8005d96:	68e3      	ldr	r3, [r4, #12]
 8005d98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d9a:	1a5b      	subs	r3, r3, r1
 8005d9c:	4543      	cmp	r3, r8
 8005d9e:	dcf0      	bgt.n	8005d82 <_printf_float+0x42a>
 8005da0:	e6fc      	b.n	8005b9c <_printf_float+0x244>
 8005da2:	f04f 0800 	mov.w	r8, #0
 8005da6:	f104 0919 	add.w	r9, r4, #25
 8005daa:	e7f4      	b.n	8005d96 <_printf_float+0x43e>

08005dac <_printf_common>:
 8005dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db0:	4616      	mov	r6, r2
 8005db2:	4698      	mov	r8, r3
 8005db4:	688a      	ldr	r2, [r1, #8]
 8005db6:	690b      	ldr	r3, [r1, #16]
 8005db8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	bfb8      	it	lt
 8005dc0:	4613      	movlt	r3, r2
 8005dc2:	6033      	str	r3, [r6, #0]
 8005dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005dc8:	4607      	mov	r7, r0
 8005dca:	460c      	mov	r4, r1
 8005dcc:	b10a      	cbz	r2, 8005dd2 <_printf_common+0x26>
 8005dce:	3301      	adds	r3, #1
 8005dd0:	6033      	str	r3, [r6, #0]
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	0699      	lsls	r1, r3, #26
 8005dd6:	bf42      	ittt	mi
 8005dd8:	6833      	ldrmi	r3, [r6, #0]
 8005dda:	3302      	addmi	r3, #2
 8005ddc:	6033      	strmi	r3, [r6, #0]
 8005dde:	6825      	ldr	r5, [r4, #0]
 8005de0:	f015 0506 	ands.w	r5, r5, #6
 8005de4:	d106      	bne.n	8005df4 <_printf_common+0x48>
 8005de6:	f104 0a19 	add.w	sl, r4, #25
 8005dea:	68e3      	ldr	r3, [r4, #12]
 8005dec:	6832      	ldr	r2, [r6, #0]
 8005dee:	1a9b      	subs	r3, r3, r2
 8005df0:	42ab      	cmp	r3, r5
 8005df2:	dc26      	bgt.n	8005e42 <_printf_common+0x96>
 8005df4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005df8:	6822      	ldr	r2, [r4, #0]
 8005dfa:	3b00      	subs	r3, #0
 8005dfc:	bf18      	it	ne
 8005dfe:	2301      	movne	r3, #1
 8005e00:	0692      	lsls	r2, r2, #26
 8005e02:	d42b      	bmi.n	8005e5c <_printf_common+0xb0>
 8005e04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e08:	4641      	mov	r1, r8
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	47c8      	blx	r9
 8005e0e:	3001      	adds	r0, #1
 8005e10:	d01e      	beq.n	8005e50 <_printf_common+0xa4>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	6922      	ldr	r2, [r4, #16]
 8005e16:	f003 0306 	and.w	r3, r3, #6
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	bf02      	ittt	eq
 8005e1e:	68e5      	ldreq	r5, [r4, #12]
 8005e20:	6833      	ldreq	r3, [r6, #0]
 8005e22:	1aed      	subeq	r5, r5, r3
 8005e24:	68a3      	ldr	r3, [r4, #8]
 8005e26:	bf0c      	ite	eq
 8005e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e2c:	2500      	movne	r5, #0
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	bfc4      	itt	gt
 8005e32:	1a9b      	subgt	r3, r3, r2
 8005e34:	18ed      	addgt	r5, r5, r3
 8005e36:	2600      	movs	r6, #0
 8005e38:	341a      	adds	r4, #26
 8005e3a:	42b5      	cmp	r5, r6
 8005e3c:	d11a      	bne.n	8005e74 <_printf_common+0xc8>
 8005e3e:	2000      	movs	r0, #0
 8005e40:	e008      	b.n	8005e54 <_printf_common+0xa8>
 8005e42:	2301      	movs	r3, #1
 8005e44:	4652      	mov	r2, sl
 8005e46:	4641      	mov	r1, r8
 8005e48:	4638      	mov	r0, r7
 8005e4a:	47c8      	blx	r9
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	d103      	bne.n	8005e58 <_printf_common+0xac>
 8005e50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e58:	3501      	adds	r5, #1
 8005e5a:	e7c6      	b.n	8005dea <_printf_common+0x3e>
 8005e5c:	18e1      	adds	r1, r4, r3
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	2030      	movs	r0, #48	@ 0x30
 8005e62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e66:	4422      	add	r2, r4
 8005e68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e70:	3302      	adds	r3, #2
 8005e72:	e7c7      	b.n	8005e04 <_printf_common+0x58>
 8005e74:	2301      	movs	r3, #1
 8005e76:	4622      	mov	r2, r4
 8005e78:	4641      	mov	r1, r8
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	47c8      	blx	r9
 8005e7e:	3001      	adds	r0, #1
 8005e80:	d0e6      	beq.n	8005e50 <_printf_common+0xa4>
 8005e82:	3601      	adds	r6, #1
 8005e84:	e7d9      	b.n	8005e3a <_printf_common+0x8e>
	...

08005e88 <_printf_i>:
 8005e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8c:	7e0f      	ldrb	r7, [r1, #24]
 8005e8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e90:	2f78      	cmp	r7, #120	@ 0x78
 8005e92:	4691      	mov	r9, r2
 8005e94:	4680      	mov	r8, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	469a      	mov	sl, r3
 8005e9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e9e:	d807      	bhi.n	8005eb0 <_printf_i+0x28>
 8005ea0:	2f62      	cmp	r7, #98	@ 0x62
 8005ea2:	d80a      	bhi.n	8005eba <_printf_i+0x32>
 8005ea4:	2f00      	cmp	r7, #0
 8005ea6:	f000 80d1 	beq.w	800604c <_printf_i+0x1c4>
 8005eaa:	2f58      	cmp	r7, #88	@ 0x58
 8005eac:	f000 80b8 	beq.w	8006020 <_printf_i+0x198>
 8005eb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005eb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005eb8:	e03a      	b.n	8005f30 <_printf_i+0xa8>
 8005eba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ebe:	2b15      	cmp	r3, #21
 8005ec0:	d8f6      	bhi.n	8005eb0 <_printf_i+0x28>
 8005ec2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ec8 <_printf_i+0x40>)
 8005ec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ec8:	08005f21 	.word	0x08005f21
 8005ecc:	08005f35 	.word	0x08005f35
 8005ed0:	08005eb1 	.word	0x08005eb1
 8005ed4:	08005eb1 	.word	0x08005eb1
 8005ed8:	08005eb1 	.word	0x08005eb1
 8005edc:	08005eb1 	.word	0x08005eb1
 8005ee0:	08005f35 	.word	0x08005f35
 8005ee4:	08005eb1 	.word	0x08005eb1
 8005ee8:	08005eb1 	.word	0x08005eb1
 8005eec:	08005eb1 	.word	0x08005eb1
 8005ef0:	08005eb1 	.word	0x08005eb1
 8005ef4:	08006033 	.word	0x08006033
 8005ef8:	08005f5f 	.word	0x08005f5f
 8005efc:	08005fed 	.word	0x08005fed
 8005f00:	08005eb1 	.word	0x08005eb1
 8005f04:	08005eb1 	.word	0x08005eb1
 8005f08:	08006055 	.word	0x08006055
 8005f0c:	08005eb1 	.word	0x08005eb1
 8005f10:	08005f5f 	.word	0x08005f5f
 8005f14:	08005eb1 	.word	0x08005eb1
 8005f18:	08005eb1 	.word	0x08005eb1
 8005f1c:	08005ff5 	.word	0x08005ff5
 8005f20:	6833      	ldr	r3, [r6, #0]
 8005f22:	1d1a      	adds	r2, r3, #4
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6032      	str	r2, [r6, #0]
 8005f28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f30:	2301      	movs	r3, #1
 8005f32:	e09c      	b.n	800606e <_printf_i+0x1e6>
 8005f34:	6833      	ldr	r3, [r6, #0]
 8005f36:	6820      	ldr	r0, [r4, #0]
 8005f38:	1d19      	adds	r1, r3, #4
 8005f3a:	6031      	str	r1, [r6, #0]
 8005f3c:	0606      	lsls	r6, r0, #24
 8005f3e:	d501      	bpl.n	8005f44 <_printf_i+0xbc>
 8005f40:	681d      	ldr	r5, [r3, #0]
 8005f42:	e003      	b.n	8005f4c <_printf_i+0xc4>
 8005f44:	0645      	lsls	r5, r0, #25
 8005f46:	d5fb      	bpl.n	8005f40 <_printf_i+0xb8>
 8005f48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f4c:	2d00      	cmp	r5, #0
 8005f4e:	da03      	bge.n	8005f58 <_printf_i+0xd0>
 8005f50:	232d      	movs	r3, #45	@ 0x2d
 8005f52:	426d      	negs	r5, r5
 8005f54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f58:	4858      	ldr	r0, [pc, #352]	@ (80060bc <_printf_i+0x234>)
 8005f5a:	230a      	movs	r3, #10
 8005f5c:	e011      	b.n	8005f82 <_printf_i+0xfa>
 8005f5e:	6821      	ldr	r1, [r4, #0]
 8005f60:	6833      	ldr	r3, [r6, #0]
 8005f62:	0608      	lsls	r0, r1, #24
 8005f64:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f68:	d402      	bmi.n	8005f70 <_printf_i+0xe8>
 8005f6a:	0649      	lsls	r1, r1, #25
 8005f6c:	bf48      	it	mi
 8005f6e:	b2ad      	uxthmi	r5, r5
 8005f70:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f72:	4852      	ldr	r0, [pc, #328]	@ (80060bc <_printf_i+0x234>)
 8005f74:	6033      	str	r3, [r6, #0]
 8005f76:	bf14      	ite	ne
 8005f78:	230a      	movne	r3, #10
 8005f7a:	2308      	moveq	r3, #8
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f82:	6866      	ldr	r6, [r4, #4]
 8005f84:	60a6      	str	r6, [r4, #8]
 8005f86:	2e00      	cmp	r6, #0
 8005f88:	db05      	blt.n	8005f96 <_printf_i+0x10e>
 8005f8a:	6821      	ldr	r1, [r4, #0]
 8005f8c:	432e      	orrs	r6, r5
 8005f8e:	f021 0104 	bic.w	r1, r1, #4
 8005f92:	6021      	str	r1, [r4, #0]
 8005f94:	d04b      	beq.n	800602e <_printf_i+0x1a6>
 8005f96:	4616      	mov	r6, r2
 8005f98:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f9c:	fb03 5711 	mls	r7, r3, r1, r5
 8005fa0:	5dc7      	ldrb	r7, [r0, r7]
 8005fa2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fa6:	462f      	mov	r7, r5
 8005fa8:	42bb      	cmp	r3, r7
 8005faa:	460d      	mov	r5, r1
 8005fac:	d9f4      	bls.n	8005f98 <_printf_i+0x110>
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	d10b      	bne.n	8005fca <_printf_i+0x142>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	07df      	lsls	r7, r3, #31
 8005fb6:	d508      	bpl.n	8005fca <_printf_i+0x142>
 8005fb8:	6923      	ldr	r3, [r4, #16]
 8005fba:	6861      	ldr	r1, [r4, #4]
 8005fbc:	4299      	cmp	r1, r3
 8005fbe:	bfde      	ittt	le
 8005fc0:	2330      	movle	r3, #48	@ 0x30
 8005fc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fc6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005fca:	1b92      	subs	r2, r2, r6
 8005fcc:	6122      	str	r2, [r4, #16]
 8005fce:	f8cd a000 	str.w	sl, [sp]
 8005fd2:	464b      	mov	r3, r9
 8005fd4:	aa03      	add	r2, sp, #12
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	4640      	mov	r0, r8
 8005fda:	f7ff fee7 	bl	8005dac <_printf_common>
 8005fde:	3001      	adds	r0, #1
 8005fe0:	d14a      	bne.n	8006078 <_printf_i+0x1f0>
 8005fe2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fe6:	b004      	add	sp, #16
 8005fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	f043 0320 	orr.w	r3, r3, #32
 8005ff2:	6023      	str	r3, [r4, #0]
 8005ff4:	4832      	ldr	r0, [pc, #200]	@ (80060c0 <_printf_i+0x238>)
 8005ff6:	2778      	movs	r7, #120	@ 0x78
 8005ff8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	6831      	ldr	r1, [r6, #0]
 8006000:	061f      	lsls	r7, r3, #24
 8006002:	f851 5b04 	ldr.w	r5, [r1], #4
 8006006:	d402      	bmi.n	800600e <_printf_i+0x186>
 8006008:	065f      	lsls	r7, r3, #25
 800600a:	bf48      	it	mi
 800600c:	b2ad      	uxthmi	r5, r5
 800600e:	6031      	str	r1, [r6, #0]
 8006010:	07d9      	lsls	r1, r3, #31
 8006012:	bf44      	itt	mi
 8006014:	f043 0320 	orrmi.w	r3, r3, #32
 8006018:	6023      	strmi	r3, [r4, #0]
 800601a:	b11d      	cbz	r5, 8006024 <_printf_i+0x19c>
 800601c:	2310      	movs	r3, #16
 800601e:	e7ad      	b.n	8005f7c <_printf_i+0xf4>
 8006020:	4826      	ldr	r0, [pc, #152]	@ (80060bc <_printf_i+0x234>)
 8006022:	e7e9      	b.n	8005ff8 <_printf_i+0x170>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	f023 0320 	bic.w	r3, r3, #32
 800602a:	6023      	str	r3, [r4, #0]
 800602c:	e7f6      	b.n	800601c <_printf_i+0x194>
 800602e:	4616      	mov	r6, r2
 8006030:	e7bd      	b.n	8005fae <_printf_i+0x126>
 8006032:	6833      	ldr	r3, [r6, #0]
 8006034:	6825      	ldr	r5, [r4, #0]
 8006036:	6961      	ldr	r1, [r4, #20]
 8006038:	1d18      	adds	r0, r3, #4
 800603a:	6030      	str	r0, [r6, #0]
 800603c:	062e      	lsls	r6, r5, #24
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	d501      	bpl.n	8006046 <_printf_i+0x1be>
 8006042:	6019      	str	r1, [r3, #0]
 8006044:	e002      	b.n	800604c <_printf_i+0x1c4>
 8006046:	0668      	lsls	r0, r5, #25
 8006048:	d5fb      	bpl.n	8006042 <_printf_i+0x1ba>
 800604a:	8019      	strh	r1, [r3, #0]
 800604c:	2300      	movs	r3, #0
 800604e:	6123      	str	r3, [r4, #16]
 8006050:	4616      	mov	r6, r2
 8006052:	e7bc      	b.n	8005fce <_printf_i+0x146>
 8006054:	6833      	ldr	r3, [r6, #0]
 8006056:	1d1a      	adds	r2, r3, #4
 8006058:	6032      	str	r2, [r6, #0]
 800605a:	681e      	ldr	r6, [r3, #0]
 800605c:	6862      	ldr	r2, [r4, #4]
 800605e:	2100      	movs	r1, #0
 8006060:	4630      	mov	r0, r6
 8006062:	f7fa f8dd 	bl	8000220 <memchr>
 8006066:	b108      	cbz	r0, 800606c <_printf_i+0x1e4>
 8006068:	1b80      	subs	r0, r0, r6
 800606a:	6060      	str	r0, [r4, #4]
 800606c:	6863      	ldr	r3, [r4, #4]
 800606e:	6123      	str	r3, [r4, #16]
 8006070:	2300      	movs	r3, #0
 8006072:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006076:	e7aa      	b.n	8005fce <_printf_i+0x146>
 8006078:	6923      	ldr	r3, [r4, #16]
 800607a:	4632      	mov	r2, r6
 800607c:	4649      	mov	r1, r9
 800607e:	4640      	mov	r0, r8
 8006080:	47d0      	blx	sl
 8006082:	3001      	adds	r0, #1
 8006084:	d0ad      	beq.n	8005fe2 <_printf_i+0x15a>
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	079b      	lsls	r3, r3, #30
 800608a:	d413      	bmi.n	80060b4 <_printf_i+0x22c>
 800608c:	68e0      	ldr	r0, [r4, #12]
 800608e:	9b03      	ldr	r3, [sp, #12]
 8006090:	4298      	cmp	r0, r3
 8006092:	bfb8      	it	lt
 8006094:	4618      	movlt	r0, r3
 8006096:	e7a6      	b.n	8005fe6 <_printf_i+0x15e>
 8006098:	2301      	movs	r3, #1
 800609a:	4632      	mov	r2, r6
 800609c:	4649      	mov	r1, r9
 800609e:	4640      	mov	r0, r8
 80060a0:	47d0      	blx	sl
 80060a2:	3001      	adds	r0, #1
 80060a4:	d09d      	beq.n	8005fe2 <_printf_i+0x15a>
 80060a6:	3501      	adds	r5, #1
 80060a8:	68e3      	ldr	r3, [r4, #12]
 80060aa:	9903      	ldr	r1, [sp, #12]
 80060ac:	1a5b      	subs	r3, r3, r1
 80060ae:	42ab      	cmp	r3, r5
 80060b0:	dcf2      	bgt.n	8006098 <_printf_i+0x210>
 80060b2:	e7eb      	b.n	800608c <_printf_i+0x204>
 80060b4:	2500      	movs	r5, #0
 80060b6:	f104 0619 	add.w	r6, r4, #25
 80060ba:	e7f5      	b.n	80060a8 <_printf_i+0x220>
 80060bc:	0800833a 	.word	0x0800833a
 80060c0:	0800834b 	.word	0x0800834b

080060c4 <std>:
 80060c4:	2300      	movs	r3, #0
 80060c6:	b510      	push	{r4, lr}
 80060c8:	4604      	mov	r4, r0
 80060ca:	e9c0 3300 	strd	r3, r3, [r0]
 80060ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060d2:	6083      	str	r3, [r0, #8]
 80060d4:	8181      	strh	r1, [r0, #12]
 80060d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80060d8:	81c2      	strh	r2, [r0, #14]
 80060da:	6183      	str	r3, [r0, #24]
 80060dc:	4619      	mov	r1, r3
 80060de:	2208      	movs	r2, #8
 80060e0:	305c      	adds	r0, #92	@ 0x5c
 80060e2:	f000 f921 	bl	8006328 <memset>
 80060e6:	4b0d      	ldr	r3, [pc, #52]	@ (800611c <std+0x58>)
 80060e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80060ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006120 <std+0x5c>)
 80060ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80060ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006124 <std+0x60>)
 80060f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006128 <std+0x64>)
 80060f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80060f6:	4b0d      	ldr	r3, [pc, #52]	@ (800612c <std+0x68>)
 80060f8:	6224      	str	r4, [r4, #32]
 80060fa:	429c      	cmp	r4, r3
 80060fc:	d006      	beq.n	800610c <std+0x48>
 80060fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006102:	4294      	cmp	r4, r2
 8006104:	d002      	beq.n	800610c <std+0x48>
 8006106:	33d0      	adds	r3, #208	@ 0xd0
 8006108:	429c      	cmp	r4, r3
 800610a:	d105      	bne.n	8006118 <std+0x54>
 800610c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006114:	f000 b93a 	b.w	800638c <__retarget_lock_init_recursive>
 8006118:	bd10      	pop	{r4, pc}
 800611a:	bf00      	nop
 800611c:	08007c8d 	.word	0x08007c8d
 8006120:	08007caf 	.word	0x08007caf
 8006124:	08007ce7 	.word	0x08007ce7
 8006128:	08007d0b 	.word	0x08007d0b
 800612c:	200003e4 	.word	0x200003e4

08006130 <stdio_exit_handler>:
 8006130:	4a02      	ldr	r2, [pc, #8]	@ (800613c <stdio_exit_handler+0xc>)
 8006132:	4903      	ldr	r1, [pc, #12]	@ (8006140 <stdio_exit_handler+0x10>)
 8006134:	4803      	ldr	r0, [pc, #12]	@ (8006144 <stdio_exit_handler+0x14>)
 8006136:	f000 b869 	b.w	800620c <_fwalk_sglue>
 800613a:	bf00      	nop
 800613c:	2000000c 	.word	0x2000000c
 8006140:	08007531 	.word	0x08007531
 8006144:	2000001c 	.word	0x2000001c

08006148 <cleanup_stdio>:
 8006148:	6841      	ldr	r1, [r0, #4]
 800614a:	4b0c      	ldr	r3, [pc, #48]	@ (800617c <cleanup_stdio+0x34>)
 800614c:	4299      	cmp	r1, r3
 800614e:	b510      	push	{r4, lr}
 8006150:	4604      	mov	r4, r0
 8006152:	d001      	beq.n	8006158 <cleanup_stdio+0x10>
 8006154:	f001 f9ec 	bl	8007530 <_fflush_r>
 8006158:	68a1      	ldr	r1, [r4, #8]
 800615a:	4b09      	ldr	r3, [pc, #36]	@ (8006180 <cleanup_stdio+0x38>)
 800615c:	4299      	cmp	r1, r3
 800615e:	d002      	beq.n	8006166 <cleanup_stdio+0x1e>
 8006160:	4620      	mov	r0, r4
 8006162:	f001 f9e5 	bl	8007530 <_fflush_r>
 8006166:	68e1      	ldr	r1, [r4, #12]
 8006168:	4b06      	ldr	r3, [pc, #24]	@ (8006184 <cleanup_stdio+0x3c>)
 800616a:	4299      	cmp	r1, r3
 800616c:	d004      	beq.n	8006178 <cleanup_stdio+0x30>
 800616e:	4620      	mov	r0, r4
 8006170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006174:	f001 b9dc 	b.w	8007530 <_fflush_r>
 8006178:	bd10      	pop	{r4, pc}
 800617a:	bf00      	nop
 800617c:	200003e4 	.word	0x200003e4
 8006180:	2000044c 	.word	0x2000044c
 8006184:	200004b4 	.word	0x200004b4

08006188 <global_stdio_init.part.0>:
 8006188:	b510      	push	{r4, lr}
 800618a:	4b0b      	ldr	r3, [pc, #44]	@ (80061b8 <global_stdio_init.part.0+0x30>)
 800618c:	4c0b      	ldr	r4, [pc, #44]	@ (80061bc <global_stdio_init.part.0+0x34>)
 800618e:	4a0c      	ldr	r2, [pc, #48]	@ (80061c0 <global_stdio_init.part.0+0x38>)
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	4620      	mov	r0, r4
 8006194:	2200      	movs	r2, #0
 8006196:	2104      	movs	r1, #4
 8006198:	f7ff ff94 	bl	80060c4 <std>
 800619c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80061a0:	2201      	movs	r2, #1
 80061a2:	2109      	movs	r1, #9
 80061a4:	f7ff ff8e 	bl	80060c4 <std>
 80061a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80061ac:	2202      	movs	r2, #2
 80061ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061b2:	2112      	movs	r1, #18
 80061b4:	f7ff bf86 	b.w	80060c4 <std>
 80061b8:	2000051c 	.word	0x2000051c
 80061bc:	200003e4 	.word	0x200003e4
 80061c0:	08006131 	.word	0x08006131

080061c4 <__sfp_lock_acquire>:
 80061c4:	4801      	ldr	r0, [pc, #4]	@ (80061cc <__sfp_lock_acquire+0x8>)
 80061c6:	f000 b8e2 	b.w	800638e <__retarget_lock_acquire_recursive>
 80061ca:	bf00      	nop
 80061cc:	20000521 	.word	0x20000521

080061d0 <__sfp_lock_release>:
 80061d0:	4801      	ldr	r0, [pc, #4]	@ (80061d8 <__sfp_lock_release+0x8>)
 80061d2:	f000 b8dd 	b.w	8006390 <__retarget_lock_release_recursive>
 80061d6:	bf00      	nop
 80061d8:	20000521 	.word	0x20000521

080061dc <__sinit>:
 80061dc:	b510      	push	{r4, lr}
 80061de:	4604      	mov	r4, r0
 80061e0:	f7ff fff0 	bl	80061c4 <__sfp_lock_acquire>
 80061e4:	6a23      	ldr	r3, [r4, #32]
 80061e6:	b11b      	cbz	r3, 80061f0 <__sinit+0x14>
 80061e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061ec:	f7ff bff0 	b.w	80061d0 <__sfp_lock_release>
 80061f0:	4b04      	ldr	r3, [pc, #16]	@ (8006204 <__sinit+0x28>)
 80061f2:	6223      	str	r3, [r4, #32]
 80061f4:	4b04      	ldr	r3, [pc, #16]	@ (8006208 <__sinit+0x2c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1f5      	bne.n	80061e8 <__sinit+0xc>
 80061fc:	f7ff ffc4 	bl	8006188 <global_stdio_init.part.0>
 8006200:	e7f2      	b.n	80061e8 <__sinit+0xc>
 8006202:	bf00      	nop
 8006204:	08006149 	.word	0x08006149
 8006208:	2000051c 	.word	0x2000051c

0800620c <_fwalk_sglue>:
 800620c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006210:	4607      	mov	r7, r0
 8006212:	4688      	mov	r8, r1
 8006214:	4614      	mov	r4, r2
 8006216:	2600      	movs	r6, #0
 8006218:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800621c:	f1b9 0901 	subs.w	r9, r9, #1
 8006220:	d505      	bpl.n	800622e <_fwalk_sglue+0x22>
 8006222:	6824      	ldr	r4, [r4, #0]
 8006224:	2c00      	cmp	r4, #0
 8006226:	d1f7      	bne.n	8006218 <_fwalk_sglue+0xc>
 8006228:	4630      	mov	r0, r6
 800622a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800622e:	89ab      	ldrh	r3, [r5, #12]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d907      	bls.n	8006244 <_fwalk_sglue+0x38>
 8006234:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006238:	3301      	adds	r3, #1
 800623a:	d003      	beq.n	8006244 <_fwalk_sglue+0x38>
 800623c:	4629      	mov	r1, r5
 800623e:	4638      	mov	r0, r7
 8006240:	47c0      	blx	r8
 8006242:	4306      	orrs	r6, r0
 8006244:	3568      	adds	r5, #104	@ 0x68
 8006246:	e7e9      	b.n	800621c <_fwalk_sglue+0x10>

08006248 <iprintf>:
 8006248:	b40f      	push	{r0, r1, r2, r3}
 800624a:	b507      	push	{r0, r1, r2, lr}
 800624c:	4906      	ldr	r1, [pc, #24]	@ (8006268 <iprintf+0x20>)
 800624e:	ab04      	add	r3, sp, #16
 8006250:	6808      	ldr	r0, [r1, #0]
 8006252:	f853 2b04 	ldr.w	r2, [r3], #4
 8006256:	6881      	ldr	r1, [r0, #8]
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	f000 ff23 	bl	80070a4 <_vfiprintf_r>
 800625e:	b003      	add	sp, #12
 8006260:	f85d eb04 	ldr.w	lr, [sp], #4
 8006264:	b004      	add	sp, #16
 8006266:	4770      	bx	lr
 8006268:	20000018 	.word	0x20000018

0800626c <_puts_r>:
 800626c:	6a03      	ldr	r3, [r0, #32]
 800626e:	b570      	push	{r4, r5, r6, lr}
 8006270:	6884      	ldr	r4, [r0, #8]
 8006272:	4605      	mov	r5, r0
 8006274:	460e      	mov	r6, r1
 8006276:	b90b      	cbnz	r3, 800627c <_puts_r+0x10>
 8006278:	f7ff ffb0 	bl	80061dc <__sinit>
 800627c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800627e:	07db      	lsls	r3, r3, #31
 8006280:	d405      	bmi.n	800628e <_puts_r+0x22>
 8006282:	89a3      	ldrh	r3, [r4, #12]
 8006284:	0598      	lsls	r0, r3, #22
 8006286:	d402      	bmi.n	800628e <_puts_r+0x22>
 8006288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800628a:	f000 f880 	bl	800638e <__retarget_lock_acquire_recursive>
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	0719      	lsls	r1, r3, #28
 8006292:	d502      	bpl.n	800629a <_puts_r+0x2e>
 8006294:	6923      	ldr	r3, [r4, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d135      	bne.n	8006306 <_puts_r+0x9a>
 800629a:	4621      	mov	r1, r4
 800629c:	4628      	mov	r0, r5
 800629e:	f001 fd77 	bl	8007d90 <__swsetup_r>
 80062a2:	b380      	cbz	r0, 8006306 <_puts_r+0x9a>
 80062a4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80062a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062aa:	07da      	lsls	r2, r3, #31
 80062ac:	d405      	bmi.n	80062ba <_puts_r+0x4e>
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	059b      	lsls	r3, r3, #22
 80062b2:	d402      	bmi.n	80062ba <_puts_r+0x4e>
 80062b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062b6:	f000 f86b 	bl	8006390 <__retarget_lock_release_recursive>
 80062ba:	4628      	mov	r0, r5
 80062bc:	bd70      	pop	{r4, r5, r6, pc}
 80062be:	2b00      	cmp	r3, #0
 80062c0:	da04      	bge.n	80062cc <_puts_r+0x60>
 80062c2:	69a2      	ldr	r2, [r4, #24]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	dc17      	bgt.n	80062f8 <_puts_r+0x8c>
 80062c8:	290a      	cmp	r1, #10
 80062ca:	d015      	beq.n	80062f8 <_puts_r+0x8c>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	6022      	str	r2, [r4, #0]
 80062d2:	7019      	strb	r1, [r3, #0]
 80062d4:	68a3      	ldr	r3, [r4, #8]
 80062d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062da:	3b01      	subs	r3, #1
 80062dc:	60a3      	str	r3, [r4, #8]
 80062de:	2900      	cmp	r1, #0
 80062e0:	d1ed      	bne.n	80062be <_puts_r+0x52>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	da11      	bge.n	800630a <_puts_r+0x9e>
 80062e6:	4622      	mov	r2, r4
 80062e8:	210a      	movs	r1, #10
 80062ea:	4628      	mov	r0, r5
 80062ec:	f001 fd11 	bl	8007d12 <__swbuf_r>
 80062f0:	3001      	adds	r0, #1
 80062f2:	d0d7      	beq.n	80062a4 <_puts_r+0x38>
 80062f4:	250a      	movs	r5, #10
 80062f6:	e7d7      	b.n	80062a8 <_puts_r+0x3c>
 80062f8:	4622      	mov	r2, r4
 80062fa:	4628      	mov	r0, r5
 80062fc:	f001 fd09 	bl	8007d12 <__swbuf_r>
 8006300:	3001      	adds	r0, #1
 8006302:	d1e7      	bne.n	80062d4 <_puts_r+0x68>
 8006304:	e7ce      	b.n	80062a4 <_puts_r+0x38>
 8006306:	3e01      	subs	r6, #1
 8006308:	e7e4      	b.n	80062d4 <_puts_r+0x68>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	6022      	str	r2, [r4, #0]
 8006310:	220a      	movs	r2, #10
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	e7ee      	b.n	80062f4 <_puts_r+0x88>
	...

08006318 <puts>:
 8006318:	4b02      	ldr	r3, [pc, #8]	@ (8006324 <puts+0xc>)
 800631a:	4601      	mov	r1, r0
 800631c:	6818      	ldr	r0, [r3, #0]
 800631e:	f7ff bfa5 	b.w	800626c <_puts_r>
 8006322:	bf00      	nop
 8006324:	20000018 	.word	0x20000018

08006328 <memset>:
 8006328:	4402      	add	r2, r0
 800632a:	4603      	mov	r3, r0
 800632c:	4293      	cmp	r3, r2
 800632e:	d100      	bne.n	8006332 <memset+0xa>
 8006330:	4770      	bx	lr
 8006332:	f803 1b01 	strb.w	r1, [r3], #1
 8006336:	e7f9      	b.n	800632c <memset+0x4>

08006338 <__errno>:
 8006338:	4b01      	ldr	r3, [pc, #4]	@ (8006340 <__errno+0x8>)
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	20000018 	.word	0x20000018

08006344 <__libc_init_array>:
 8006344:	b570      	push	{r4, r5, r6, lr}
 8006346:	4d0d      	ldr	r5, [pc, #52]	@ (800637c <__libc_init_array+0x38>)
 8006348:	4c0d      	ldr	r4, [pc, #52]	@ (8006380 <__libc_init_array+0x3c>)
 800634a:	1b64      	subs	r4, r4, r5
 800634c:	10a4      	asrs	r4, r4, #2
 800634e:	2600      	movs	r6, #0
 8006350:	42a6      	cmp	r6, r4
 8006352:	d109      	bne.n	8006368 <__libc_init_array+0x24>
 8006354:	4d0b      	ldr	r5, [pc, #44]	@ (8006384 <__libc_init_array+0x40>)
 8006356:	4c0c      	ldr	r4, [pc, #48]	@ (8006388 <__libc_init_array+0x44>)
 8006358:	f001 ff50 	bl	80081fc <_init>
 800635c:	1b64      	subs	r4, r4, r5
 800635e:	10a4      	asrs	r4, r4, #2
 8006360:	2600      	movs	r6, #0
 8006362:	42a6      	cmp	r6, r4
 8006364:	d105      	bne.n	8006372 <__libc_init_array+0x2e>
 8006366:	bd70      	pop	{r4, r5, r6, pc}
 8006368:	f855 3b04 	ldr.w	r3, [r5], #4
 800636c:	4798      	blx	r3
 800636e:	3601      	adds	r6, #1
 8006370:	e7ee      	b.n	8006350 <__libc_init_array+0xc>
 8006372:	f855 3b04 	ldr.w	r3, [r5], #4
 8006376:	4798      	blx	r3
 8006378:	3601      	adds	r6, #1
 800637a:	e7f2      	b.n	8006362 <__libc_init_array+0x1e>
 800637c:	080086a4 	.word	0x080086a4
 8006380:	080086a4 	.word	0x080086a4
 8006384:	080086a4 	.word	0x080086a4
 8006388:	080086a8 	.word	0x080086a8

0800638c <__retarget_lock_init_recursive>:
 800638c:	4770      	bx	lr

0800638e <__retarget_lock_acquire_recursive>:
 800638e:	4770      	bx	lr

08006390 <__retarget_lock_release_recursive>:
 8006390:	4770      	bx	lr
	...

08006394 <_localeconv_r>:
 8006394:	4800      	ldr	r0, [pc, #0]	@ (8006398 <_localeconv_r+0x4>)
 8006396:	4770      	bx	lr
 8006398:	20000158 	.word	0x20000158

0800639c <quorem>:
 800639c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a0:	6903      	ldr	r3, [r0, #16]
 80063a2:	690c      	ldr	r4, [r1, #16]
 80063a4:	42a3      	cmp	r3, r4
 80063a6:	4607      	mov	r7, r0
 80063a8:	db7e      	blt.n	80064a8 <quorem+0x10c>
 80063aa:	3c01      	subs	r4, #1
 80063ac:	f101 0814 	add.w	r8, r1, #20
 80063b0:	00a3      	lsls	r3, r4, #2
 80063b2:	f100 0514 	add.w	r5, r0, #20
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063bc:	9301      	str	r3, [sp, #4]
 80063be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063c6:	3301      	adds	r3, #1
 80063c8:	429a      	cmp	r2, r3
 80063ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80063d2:	d32e      	bcc.n	8006432 <quorem+0x96>
 80063d4:	f04f 0a00 	mov.w	sl, #0
 80063d8:	46c4      	mov	ip, r8
 80063da:	46ae      	mov	lr, r5
 80063dc:	46d3      	mov	fp, sl
 80063de:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063e2:	b298      	uxth	r0, r3
 80063e4:	fb06 a000 	mla	r0, r6, r0, sl
 80063e8:	0c02      	lsrs	r2, r0, #16
 80063ea:	0c1b      	lsrs	r3, r3, #16
 80063ec:	fb06 2303 	mla	r3, r6, r3, r2
 80063f0:	f8de 2000 	ldr.w	r2, [lr]
 80063f4:	b280      	uxth	r0, r0
 80063f6:	b292      	uxth	r2, r2
 80063f8:	1a12      	subs	r2, r2, r0
 80063fa:	445a      	add	r2, fp
 80063fc:	f8de 0000 	ldr.w	r0, [lr]
 8006400:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006404:	b29b      	uxth	r3, r3
 8006406:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800640a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800640e:	b292      	uxth	r2, r2
 8006410:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006414:	45e1      	cmp	r9, ip
 8006416:	f84e 2b04 	str.w	r2, [lr], #4
 800641a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800641e:	d2de      	bcs.n	80063de <quorem+0x42>
 8006420:	9b00      	ldr	r3, [sp, #0]
 8006422:	58eb      	ldr	r3, [r5, r3]
 8006424:	b92b      	cbnz	r3, 8006432 <quorem+0x96>
 8006426:	9b01      	ldr	r3, [sp, #4]
 8006428:	3b04      	subs	r3, #4
 800642a:	429d      	cmp	r5, r3
 800642c:	461a      	mov	r2, r3
 800642e:	d32f      	bcc.n	8006490 <quorem+0xf4>
 8006430:	613c      	str	r4, [r7, #16]
 8006432:	4638      	mov	r0, r7
 8006434:	f001 fb22 	bl	8007a7c <__mcmp>
 8006438:	2800      	cmp	r0, #0
 800643a:	db25      	blt.n	8006488 <quorem+0xec>
 800643c:	4629      	mov	r1, r5
 800643e:	2000      	movs	r0, #0
 8006440:	f858 2b04 	ldr.w	r2, [r8], #4
 8006444:	f8d1 c000 	ldr.w	ip, [r1]
 8006448:	fa1f fe82 	uxth.w	lr, r2
 800644c:	fa1f f38c 	uxth.w	r3, ip
 8006450:	eba3 030e 	sub.w	r3, r3, lr
 8006454:	4403      	add	r3, r0
 8006456:	0c12      	lsrs	r2, r2, #16
 8006458:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800645c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006460:	b29b      	uxth	r3, r3
 8006462:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006466:	45c1      	cmp	r9, r8
 8006468:	f841 3b04 	str.w	r3, [r1], #4
 800646c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006470:	d2e6      	bcs.n	8006440 <quorem+0xa4>
 8006472:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006476:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800647a:	b922      	cbnz	r2, 8006486 <quorem+0xea>
 800647c:	3b04      	subs	r3, #4
 800647e:	429d      	cmp	r5, r3
 8006480:	461a      	mov	r2, r3
 8006482:	d30b      	bcc.n	800649c <quorem+0x100>
 8006484:	613c      	str	r4, [r7, #16]
 8006486:	3601      	adds	r6, #1
 8006488:	4630      	mov	r0, r6
 800648a:	b003      	add	sp, #12
 800648c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006490:	6812      	ldr	r2, [r2, #0]
 8006492:	3b04      	subs	r3, #4
 8006494:	2a00      	cmp	r2, #0
 8006496:	d1cb      	bne.n	8006430 <quorem+0x94>
 8006498:	3c01      	subs	r4, #1
 800649a:	e7c6      	b.n	800642a <quorem+0x8e>
 800649c:	6812      	ldr	r2, [r2, #0]
 800649e:	3b04      	subs	r3, #4
 80064a0:	2a00      	cmp	r2, #0
 80064a2:	d1ef      	bne.n	8006484 <quorem+0xe8>
 80064a4:	3c01      	subs	r4, #1
 80064a6:	e7ea      	b.n	800647e <quorem+0xe2>
 80064a8:	2000      	movs	r0, #0
 80064aa:	e7ee      	b.n	800648a <quorem+0xee>
 80064ac:	0000      	movs	r0, r0
	...

080064b0 <_dtoa_r>:
 80064b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	69c7      	ldr	r7, [r0, #28]
 80064b6:	b097      	sub	sp, #92	@ 0x5c
 80064b8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80064bc:	ec55 4b10 	vmov	r4, r5, d0
 80064c0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80064c2:	9107      	str	r1, [sp, #28]
 80064c4:	4681      	mov	r9, r0
 80064c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80064c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80064ca:	b97f      	cbnz	r7, 80064ec <_dtoa_r+0x3c>
 80064cc:	2010      	movs	r0, #16
 80064ce:	f000 ff01 	bl	80072d4 <malloc>
 80064d2:	4602      	mov	r2, r0
 80064d4:	f8c9 001c 	str.w	r0, [r9, #28]
 80064d8:	b920      	cbnz	r0, 80064e4 <_dtoa_r+0x34>
 80064da:	4ba9      	ldr	r3, [pc, #676]	@ (8006780 <_dtoa_r+0x2d0>)
 80064dc:	21ef      	movs	r1, #239	@ 0xef
 80064de:	48a9      	ldr	r0, [pc, #676]	@ (8006784 <_dtoa_r+0x2d4>)
 80064e0:	f001 fd94 	bl	800800c <__assert_func>
 80064e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80064e8:	6007      	str	r7, [r0, #0]
 80064ea:	60c7      	str	r7, [r0, #12]
 80064ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064f0:	6819      	ldr	r1, [r3, #0]
 80064f2:	b159      	cbz	r1, 800650c <_dtoa_r+0x5c>
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	604a      	str	r2, [r1, #4]
 80064f8:	2301      	movs	r3, #1
 80064fa:	4093      	lsls	r3, r2
 80064fc:	608b      	str	r3, [r1, #8]
 80064fe:	4648      	mov	r0, r9
 8006500:	f001 f88a 	bl	8007618 <_Bfree>
 8006504:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	1e2b      	subs	r3, r5, #0
 800650e:	bfb9      	ittee	lt
 8006510:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006514:	9305      	strlt	r3, [sp, #20]
 8006516:	2300      	movge	r3, #0
 8006518:	6033      	strge	r3, [r6, #0]
 800651a:	9f05      	ldr	r7, [sp, #20]
 800651c:	4b9a      	ldr	r3, [pc, #616]	@ (8006788 <_dtoa_r+0x2d8>)
 800651e:	bfbc      	itt	lt
 8006520:	2201      	movlt	r2, #1
 8006522:	6032      	strlt	r2, [r6, #0]
 8006524:	43bb      	bics	r3, r7
 8006526:	d112      	bne.n	800654e <_dtoa_r+0x9e>
 8006528:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800652a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006534:	4323      	orrs	r3, r4
 8006536:	f000 855a 	beq.w	8006fee <_dtoa_r+0xb3e>
 800653a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800653c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800679c <_dtoa_r+0x2ec>
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 855c 	beq.w	8006ffe <_dtoa_r+0xb4e>
 8006546:	f10a 0303 	add.w	r3, sl, #3
 800654a:	f000 bd56 	b.w	8006ffa <_dtoa_r+0xb4a>
 800654e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006552:	2200      	movs	r2, #0
 8006554:	ec51 0b17 	vmov	r0, r1, d7
 8006558:	2300      	movs	r3, #0
 800655a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800655e:	f7fa fadb 	bl	8000b18 <__aeabi_dcmpeq>
 8006562:	4680      	mov	r8, r0
 8006564:	b158      	cbz	r0, 800657e <_dtoa_r+0xce>
 8006566:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006568:	2301      	movs	r3, #1
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800656e:	b113      	cbz	r3, 8006576 <_dtoa_r+0xc6>
 8006570:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006572:	4b86      	ldr	r3, [pc, #536]	@ (800678c <_dtoa_r+0x2dc>)
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80067a0 <_dtoa_r+0x2f0>
 800657a:	f000 bd40 	b.w	8006ffe <_dtoa_r+0xb4e>
 800657e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006582:	aa14      	add	r2, sp, #80	@ 0x50
 8006584:	a915      	add	r1, sp, #84	@ 0x54
 8006586:	4648      	mov	r0, r9
 8006588:	f001 fb28 	bl	8007bdc <__d2b>
 800658c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006590:	9002      	str	r0, [sp, #8]
 8006592:	2e00      	cmp	r6, #0
 8006594:	d078      	beq.n	8006688 <_dtoa_r+0x1d8>
 8006596:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006598:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800659c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80065a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80065a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80065ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80065b0:	4619      	mov	r1, r3
 80065b2:	2200      	movs	r2, #0
 80065b4:	4b76      	ldr	r3, [pc, #472]	@ (8006790 <_dtoa_r+0x2e0>)
 80065b6:	f7f9 fe8f 	bl	80002d8 <__aeabi_dsub>
 80065ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8006768 <_dtoa_r+0x2b8>)
 80065bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c0:	f7fa f842 	bl	8000648 <__aeabi_dmul>
 80065c4:	a36a      	add	r3, pc, #424	@ (adr r3, 8006770 <_dtoa_r+0x2c0>)
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	f7f9 fe87 	bl	80002dc <__adddf3>
 80065ce:	4604      	mov	r4, r0
 80065d0:	4630      	mov	r0, r6
 80065d2:	460d      	mov	r5, r1
 80065d4:	f7f9 ffce 	bl	8000574 <__aeabi_i2d>
 80065d8:	a367      	add	r3, pc, #412	@ (adr r3, 8006778 <_dtoa_r+0x2c8>)
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	f7fa f833 	bl	8000648 <__aeabi_dmul>
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4620      	mov	r0, r4
 80065e8:	4629      	mov	r1, r5
 80065ea:	f7f9 fe77 	bl	80002dc <__adddf3>
 80065ee:	4604      	mov	r4, r0
 80065f0:	460d      	mov	r5, r1
 80065f2:	f7fa fad9 	bl	8000ba8 <__aeabi_d2iz>
 80065f6:	2200      	movs	r2, #0
 80065f8:	4607      	mov	r7, r0
 80065fa:	2300      	movs	r3, #0
 80065fc:	4620      	mov	r0, r4
 80065fe:	4629      	mov	r1, r5
 8006600:	f7fa fa94 	bl	8000b2c <__aeabi_dcmplt>
 8006604:	b140      	cbz	r0, 8006618 <_dtoa_r+0x168>
 8006606:	4638      	mov	r0, r7
 8006608:	f7f9 ffb4 	bl	8000574 <__aeabi_i2d>
 800660c:	4622      	mov	r2, r4
 800660e:	462b      	mov	r3, r5
 8006610:	f7fa fa82 	bl	8000b18 <__aeabi_dcmpeq>
 8006614:	b900      	cbnz	r0, 8006618 <_dtoa_r+0x168>
 8006616:	3f01      	subs	r7, #1
 8006618:	2f16      	cmp	r7, #22
 800661a:	d852      	bhi.n	80066c2 <_dtoa_r+0x212>
 800661c:	4b5d      	ldr	r3, [pc, #372]	@ (8006794 <_dtoa_r+0x2e4>)
 800661e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800662a:	f7fa fa7f 	bl	8000b2c <__aeabi_dcmplt>
 800662e:	2800      	cmp	r0, #0
 8006630:	d049      	beq.n	80066c6 <_dtoa_r+0x216>
 8006632:	3f01      	subs	r7, #1
 8006634:	2300      	movs	r3, #0
 8006636:	9310      	str	r3, [sp, #64]	@ 0x40
 8006638:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800663a:	1b9b      	subs	r3, r3, r6
 800663c:	1e5a      	subs	r2, r3, #1
 800663e:	bf45      	ittet	mi
 8006640:	f1c3 0301 	rsbmi	r3, r3, #1
 8006644:	9300      	strmi	r3, [sp, #0]
 8006646:	2300      	movpl	r3, #0
 8006648:	2300      	movmi	r3, #0
 800664a:	9206      	str	r2, [sp, #24]
 800664c:	bf54      	ite	pl
 800664e:	9300      	strpl	r3, [sp, #0]
 8006650:	9306      	strmi	r3, [sp, #24]
 8006652:	2f00      	cmp	r7, #0
 8006654:	db39      	blt.n	80066ca <_dtoa_r+0x21a>
 8006656:	9b06      	ldr	r3, [sp, #24]
 8006658:	970d      	str	r7, [sp, #52]	@ 0x34
 800665a:	443b      	add	r3, r7
 800665c:	9306      	str	r3, [sp, #24]
 800665e:	2300      	movs	r3, #0
 8006660:	9308      	str	r3, [sp, #32]
 8006662:	9b07      	ldr	r3, [sp, #28]
 8006664:	2b09      	cmp	r3, #9
 8006666:	d863      	bhi.n	8006730 <_dtoa_r+0x280>
 8006668:	2b05      	cmp	r3, #5
 800666a:	bfc4      	itt	gt
 800666c:	3b04      	subgt	r3, #4
 800666e:	9307      	strgt	r3, [sp, #28]
 8006670:	9b07      	ldr	r3, [sp, #28]
 8006672:	f1a3 0302 	sub.w	r3, r3, #2
 8006676:	bfcc      	ite	gt
 8006678:	2400      	movgt	r4, #0
 800667a:	2401      	movle	r4, #1
 800667c:	2b03      	cmp	r3, #3
 800667e:	d863      	bhi.n	8006748 <_dtoa_r+0x298>
 8006680:	e8df f003 	tbb	[pc, r3]
 8006684:	2b375452 	.word	0x2b375452
 8006688:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800668c:	441e      	add	r6, r3
 800668e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006692:	2b20      	cmp	r3, #32
 8006694:	bfc1      	itttt	gt
 8006696:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800669a:	409f      	lslgt	r7, r3
 800669c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80066a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80066a4:	bfd6      	itet	le
 80066a6:	f1c3 0320 	rsble	r3, r3, #32
 80066aa:	ea47 0003 	orrgt.w	r0, r7, r3
 80066ae:	fa04 f003 	lslle.w	r0, r4, r3
 80066b2:	f7f9 ff4f 	bl	8000554 <__aeabi_ui2d>
 80066b6:	2201      	movs	r2, #1
 80066b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80066bc:	3e01      	subs	r6, #1
 80066be:	9212      	str	r2, [sp, #72]	@ 0x48
 80066c0:	e776      	b.n	80065b0 <_dtoa_r+0x100>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e7b7      	b.n	8006636 <_dtoa_r+0x186>
 80066c6:	9010      	str	r0, [sp, #64]	@ 0x40
 80066c8:	e7b6      	b.n	8006638 <_dtoa_r+0x188>
 80066ca:	9b00      	ldr	r3, [sp, #0]
 80066cc:	1bdb      	subs	r3, r3, r7
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	427b      	negs	r3, r7
 80066d2:	9308      	str	r3, [sp, #32]
 80066d4:	2300      	movs	r3, #0
 80066d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80066d8:	e7c3      	b.n	8006662 <_dtoa_r+0x1b2>
 80066da:	2301      	movs	r3, #1
 80066dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80066de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066e0:	eb07 0b03 	add.w	fp, r7, r3
 80066e4:	f10b 0301 	add.w	r3, fp, #1
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	9303      	str	r3, [sp, #12]
 80066ec:	bfb8      	it	lt
 80066ee:	2301      	movlt	r3, #1
 80066f0:	e006      	b.n	8006700 <_dtoa_r+0x250>
 80066f2:	2301      	movs	r3, #1
 80066f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	dd28      	ble.n	800674e <_dtoa_r+0x29e>
 80066fc:	469b      	mov	fp, r3
 80066fe:	9303      	str	r3, [sp, #12]
 8006700:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006704:	2100      	movs	r1, #0
 8006706:	2204      	movs	r2, #4
 8006708:	f102 0514 	add.w	r5, r2, #20
 800670c:	429d      	cmp	r5, r3
 800670e:	d926      	bls.n	800675e <_dtoa_r+0x2ae>
 8006710:	6041      	str	r1, [r0, #4]
 8006712:	4648      	mov	r0, r9
 8006714:	f000 ff40 	bl	8007598 <_Balloc>
 8006718:	4682      	mov	sl, r0
 800671a:	2800      	cmp	r0, #0
 800671c:	d142      	bne.n	80067a4 <_dtoa_r+0x2f4>
 800671e:	4b1e      	ldr	r3, [pc, #120]	@ (8006798 <_dtoa_r+0x2e8>)
 8006720:	4602      	mov	r2, r0
 8006722:	f240 11af 	movw	r1, #431	@ 0x1af
 8006726:	e6da      	b.n	80064de <_dtoa_r+0x2e>
 8006728:	2300      	movs	r3, #0
 800672a:	e7e3      	b.n	80066f4 <_dtoa_r+0x244>
 800672c:	2300      	movs	r3, #0
 800672e:	e7d5      	b.n	80066dc <_dtoa_r+0x22c>
 8006730:	2401      	movs	r4, #1
 8006732:	2300      	movs	r3, #0
 8006734:	9307      	str	r3, [sp, #28]
 8006736:	9409      	str	r4, [sp, #36]	@ 0x24
 8006738:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800673c:	2200      	movs	r2, #0
 800673e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006742:	2312      	movs	r3, #18
 8006744:	920c      	str	r2, [sp, #48]	@ 0x30
 8006746:	e7db      	b.n	8006700 <_dtoa_r+0x250>
 8006748:	2301      	movs	r3, #1
 800674a:	9309      	str	r3, [sp, #36]	@ 0x24
 800674c:	e7f4      	b.n	8006738 <_dtoa_r+0x288>
 800674e:	f04f 0b01 	mov.w	fp, #1
 8006752:	f8cd b00c 	str.w	fp, [sp, #12]
 8006756:	465b      	mov	r3, fp
 8006758:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800675c:	e7d0      	b.n	8006700 <_dtoa_r+0x250>
 800675e:	3101      	adds	r1, #1
 8006760:	0052      	lsls	r2, r2, #1
 8006762:	e7d1      	b.n	8006708 <_dtoa_r+0x258>
 8006764:	f3af 8000 	nop.w
 8006768:	636f4361 	.word	0x636f4361
 800676c:	3fd287a7 	.word	0x3fd287a7
 8006770:	8b60c8b3 	.word	0x8b60c8b3
 8006774:	3fc68a28 	.word	0x3fc68a28
 8006778:	509f79fb 	.word	0x509f79fb
 800677c:	3fd34413 	.word	0x3fd34413
 8006780:	08008369 	.word	0x08008369
 8006784:	08008380 	.word	0x08008380
 8006788:	7ff00000 	.word	0x7ff00000
 800678c:	08008339 	.word	0x08008339
 8006790:	3ff80000 	.word	0x3ff80000
 8006794:	080084d0 	.word	0x080084d0
 8006798:	080083d8 	.word	0x080083d8
 800679c:	08008365 	.word	0x08008365
 80067a0:	08008338 	.word	0x08008338
 80067a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80067a8:	6018      	str	r0, [r3, #0]
 80067aa:	9b03      	ldr	r3, [sp, #12]
 80067ac:	2b0e      	cmp	r3, #14
 80067ae:	f200 80a1 	bhi.w	80068f4 <_dtoa_r+0x444>
 80067b2:	2c00      	cmp	r4, #0
 80067b4:	f000 809e 	beq.w	80068f4 <_dtoa_r+0x444>
 80067b8:	2f00      	cmp	r7, #0
 80067ba:	dd33      	ble.n	8006824 <_dtoa_r+0x374>
 80067bc:	4b9c      	ldr	r3, [pc, #624]	@ (8006a30 <_dtoa_r+0x580>)
 80067be:	f007 020f 	and.w	r2, r7, #15
 80067c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067c6:	ed93 7b00 	vldr	d7, [r3]
 80067ca:	05f8      	lsls	r0, r7, #23
 80067cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80067d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80067d4:	d516      	bpl.n	8006804 <_dtoa_r+0x354>
 80067d6:	4b97      	ldr	r3, [pc, #604]	@ (8006a34 <_dtoa_r+0x584>)
 80067d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80067dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067e0:	f7fa f85c 	bl	800089c <__aeabi_ddiv>
 80067e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067e8:	f004 040f 	and.w	r4, r4, #15
 80067ec:	2603      	movs	r6, #3
 80067ee:	4d91      	ldr	r5, [pc, #580]	@ (8006a34 <_dtoa_r+0x584>)
 80067f0:	b954      	cbnz	r4, 8006808 <_dtoa_r+0x358>
 80067f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80067f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067fa:	f7fa f84f 	bl	800089c <__aeabi_ddiv>
 80067fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006802:	e028      	b.n	8006856 <_dtoa_r+0x3a6>
 8006804:	2602      	movs	r6, #2
 8006806:	e7f2      	b.n	80067ee <_dtoa_r+0x33e>
 8006808:	07e1      	lsls	r1, r4, #31
 800680a:	d508      	bpl.n	800681e <_dtoa_r+0x36e>
 800680c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006810:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006814:	f7f9 ff18 	bl	8000648 <__aeabi_dmul>
 8006818:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800681c:	3601      	adds	r6, #1
 800681e:	1064      	asrs	r4, r4, #1
 8006820:	3508      	adds	r5, #8
 8006822:	e7e5      	b.n	80067f0 <_dtoa_r+0x340>
 8006824:	f000 80af 	beq.w	8006986 <_dtoa_r+0x4d6>
 8006828:	427c      	negs	r4, r7
 800682a:	4b81      	ldr	r3, [pc, #516]	@ (8006a30 <_dtoa_r+0x580>)
 800682c:	4d81      	ldr	r5, [pc, #516]	@ (8006a34 <_dtoa_r+0x584>)
 800682e:	f004 020f 	and.w	r2, r4, #15
 8006832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800683e:	f7f9 ff03 	bl	8000648 <__aeabi_dmul>
 8006842:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006846:	1124      	asrs	r4, r4, #4
 8006848:	2300      	movs	r3, #0
 800684a:	2602      	movs	r6, #2
 800684c:	2c00      	cmp	r4, #0
 800684e:	f040 808f 	bne.w	8006970 <_dtoa_r+0x4c0>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1d3      	bne.n	80067fe <_dtoa_r+0x34e>
 8006856:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006858:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 8094 	beq.w	800698a <_dtoa_r+0x4da>
 8006862:	4b75      	ldr	r3, [pc, #468]	@ (8006a38 <_dtoa_r+0x588>)
 8006864:	2200      	movs	r2, #0
 8006866:	4620      	mov	r0, r4
 8006868:	4629      	mov	r1, r5
 800686a:	f7fa f95f 	bl	8000b2c <__aeabi_dcmplt>
 800686e:	2800      	cmp	r0, #0
 8006870:	f000 808b 	beq.w	800698a <_dtoa_r+0x4da>
 8006874:	9b03      	ldr	r3, [sp, #12]
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 8087 	beq.w	800698a <_dtoa_r+0x4da>
 800687c:	f1bb 0f00 	cmp.w	fp, #0
 8006880:	dd34      	ble.n	80068ec <_dtoa_r+0x43c>
 8006882:	4620      	mov	r0, r4
 8006884:	4b6d      	ldr	r3, [pc, #436]	@ (8006a3c <_dtoa_r+0x58c>)
 8006886:	2200      	movs	r2, #0
 8006888:	4629      	mov	r1, r5
 800688a:	f7f9 fedd 	bl	8000648 <__aeabi_dmul>
 800688e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006892:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006896:	3601      	adds	r6, #1
 8006898:	465c      	mov	r4, fp
 800689a:	4630      	mov	r0, r6
 800689c:	f7f9 fe6a 	bl	8000574 <__aeabi_i2d>
 80068a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068a4:	f7f9 fed0 	bl	8000648 <__aeabi_dmul>
 80068a8:	4b65      	ldr	r3, [pc, #404]	@ (8006a40 <_dtoa_r+0x590>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	f7f9 fd16 	bl	80002dc <__adddf3>
 80068b0:	4605      	mov	r5, r0
 80068b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80068b6:	2c00      	cmp	r4, #0
 80068b8:	d16a      	bne.n	8006990 <_dtoa_r+0x4e0>
 80068ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068be:	4b61      	ldr	r3, [pc, #388]	@ (8006a44 <_dtoa_r+0x594>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	f7f9 fd09 	bl	80002d8 <__aeabi_dsub>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068ce:	462a      	mov	r2, r5
 80068d0:	4633      	mov	r3, r6
 80068d2:	f7fa f949 	bl	8000b68 <__aeabi_dcmpgt>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	f040 8298 	bne.w	8006e0c <_dtoa_r+0x95c>
 80068dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068e0:	462a      	mov	r2, r5
 80068e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80068e6:	f7fa f921 	bl	8000b2c <__aeabi_dcmplt>
 80068ea:	bb38      	cbnz	r0, 800693c <_dtoa_r+0x48c>
 80068ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80068f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80068f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f2c0 8157 	blt.w	8006baa <_dtoa_r+0x6fa>
 80068fc:	2f0e      	cmp	r7, #14
 80068fe:	f300 8154 	bgt.w	8006baa <_dtoa_r+0x6fa>
 8006902:	4b4b      	ldr	r3, [pc, #300]	@ (8006a30 <_dtoa_r+0x580>)
 8006904:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006908:	ed93 7b00 	vldr	d7, [r3]
 800690c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800690e:	2b00      	cmp	r3, #0
 8006910:	ed8d 7b00 	vstr	d7, [sp]
 8006914:	f280 80e5 	bge.w	8006ae2 <_dtoa_r+0x632>
 8006918:	9b03      	ldr	r3, [sp, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f300 80e1 	bgt.w	8006ae2 <_dtoa_r+0x632>
 8006920:	d10c      	bne.n	800693c <_dtoa_r+0x48c>
 8006922:	4b48      	ldr	r3, [pc, #288]	@ (8006a44 <_dtoa_r+0x594>)
 8006924:	2200      	movs	r2, #0
 8006926:	ec51 0b17 	vmov	r0, r1, d7
 800692a:	f7f9 fe8d 	bl	8000648 <__aeabi_dmul>
 800692e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006932:	f7fa f90f 	bl	8000b54 <__aeabi_dcmpge>
 8006936:	2800      	cmp	r0, #0
 8006938:	f000 8266 	beq.w	8006e08 <_dtoa_r+0x958>
 800693c:	2400      	movs	r4, #0
 800693e:	4625      	mov	r5, r4
 8006940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006942:	4656      	mov	r6, sl
 8006944:	ea6f 0803 	mvn.w	r8, r3
 8006948:	2700      	movs	r7, #0
 800694a:	4621      	mov	r1, r4
 800694c:	4648      	mov	r0, r9
 800694e:	f000 fe63 	bl	8007618 <_Bfree>
 8006952:	2d00      	cmp	r5, #0
 8006954:	f000 80bd 	beq.w	8006ad2 <_dtoa_r+0x622>
 8006958:	b12f      	cbz	r7, 8006966 <_dtoa_r+0x4b6>
 800695a:	42af      	cmp	r7, r5
 800695c:	d003      	beq.n	8006966 <_dtoa_r+0x4b6>
 800695e:	4639      	mov	r1, r7
 8006960:	4648      	mov	r0, r9
 8006962:	f000 fe59 	bl	8007618 <_Bfree>
 8006966:	4629      	mov	r1, r5
 8006968:	4648      	mov	r0, r9
 800696a:	f000 fe55 	bl	8007618 <_Bfree>
 800696e:	e0b0      	b.n	8006ad2 <_dtoa_r+0x622>
 8006970:	07e2      	lsls	r2, r4, #31
 8006972:	d505      	bpl.n	8006980 <_dtoa_r+0x4d0>
 8006974:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006978:	f7f9 fe66 	bl	8000648 <__aeabi_dmul>
 800697c:	3601      	adds	r6, #1
 800697e:	2301      	movs	r3, #1
 8006980:	1064      	asrs	r4, r4, #1
 8006982:	3508      	adds	r5, #8
 8006984:	e762      	b.n	800684c <_dtoa_r+0x39c>
 8006986:	2602      	movs	r6, #2
 8006988:	e765      	b.n	8006856 <_dtoa_r+0x3a6>
 800698a:	9c03      	ldr	r4, [sp, #12]
 800698c:	46b8      	mov	r8, r7
 800698e:	e784      	b.n	800689a <_dtoa_r+0x3ea>
 8006990:	4b27      	ldr	r3, [pc, #156]	@ (8006a30 <_dtoa_r+0x580>)
 8006992:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006994:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006998:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800699c:	4454      	add	r4, sl
 800699e:	2900      	cmp	r1, #0
 80069a0:	d054      	beq.n	8006a4c <_dtoa_r+0x59c>
 80069a2:	4929      	ldr	r1, [pc, #164]	@ (8006a48 <_dtoa_r+0x598>)
 80069a4:	2000      	movs	r0, #0
 80069a6:	f7f9 ff79 	bl	800089c <__aeabi_ddiv>
 80069aa:	4633      	mov	r3, r6
 80069ac:	462a      	mov	r2, r5
 80069ae:	f7f9 fc93 	bl	80002d8 <__aeabi_dsub>
 80069b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80069b6:	4656      	mov	r6, sl
 80069b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069bc:	f7fa f8f4 	bl	8000ba8 <__aeabi_d2iz>
 80069c0:	4605      	mov	r5, r0
 80069c2:	f7f9 fdd7 	bl	8000574 <__aeabi_i2d>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069ce:	f7f9 fc83 	bl	80002d8 <__aeabi_dsub>
 80069d2:	3530      	adds	r5, #48	@ 0x30
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069dc:	f806 5b01 	strb.w	r5, [r6], #1
 80069e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80069e4:	f7fa f8a2 	bl	8000b2c <__aeabi_dcmplt>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d172      	bne.n	8006ad2 <_dtoa_r+0x622>
 80069ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069f0:	4911      	ldr	r1, [pc, #68]	@ (8006a38 <_dtoa_r+0x588>)
 80069f2:	2000      	movs	r0, #0
 80069f4:	f7f9 fc70 	bl	80002d8 <__aeabi_dsub>
 80069f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80069fc:	f7fa f896 	bl	8000b2c <__aeabi_dcmplt>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	f040 80b4 	bne.w	8006b6e <_dtoa_r+0x6be>
 8006a06:	42a6      	cmp	r6, r4
 8006a08:	f43f af70 	beq.w	80068ec <_dtoa_r+0x43c>
 8006a0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006a10:	4b0a      	ldr	r3, [pc, #40]	@ (8006a3c <_dtoa_r+0x58c>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	f7f9 fe18 	bl	8000648 <__aeabi_dmul>
 8006a18:	4b08      	ldr	r3, [pc, #32]	@ (8006a3c <_dtoa_r+0x58c>)
 8006a1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a1e:	2200      	movs	r2, #0
 8006a20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a24:	f7f9 fe10 	bl	8000648 <__aeabi_dmul>
 8006a28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a2c:	e7c4      	b.n	80069b8 <_dtoa_r+0x508>
 8006a2e:	bf00      	nop
 8006a30:	080084d0 	.word	0x080084d0
 8006a34:	080084a8 	.word	0x080084a8
 8006a38:	3ff00000 	.word	0x3ff00000
 8006a3c:	40240000 	.word	0x40240000
 8006a40:	401c0000 	.word	0x401c0000
 8006a44:	40140000 	.word	0x40140000
 8006a48:	3fe00000 	.word	0x3fe00000
 8006a4c:	4631      	mov	r1, r6
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f7f9 fdfa 	bl	8000648 <__aeabi_dmul>
 8006a54:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a58:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006a5a:	4656      	mov	r6, sl
 8006a5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a60:	f7fa f8a2 	bl	8000ba8 <__aeabi_d2iz>
 8006a64:	4605      	mov	r5, r0
 8006a66:	f7f9 fd85 	bl	8000574 <__aeabi_i2d>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a72:	f7f9 fc31 	bl	80002d8 <__aeabi_dsub>
 8006a76:	3530      	adds	r5, #48	@ 0x30
 8006a78:	f806 5b01 	strb.w	r5, [r6], #1
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	42a6      	cmp	r6, r4
 8006a82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	d124      	bne.n	8006ad6 <_dtoa_r+0x626>
 8006a8c:	4baf      	ldr	r3, [pc, #700]	@ (8006d4c <_dtoa_r+0x89c>)
 8006a8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006a92:	f7f9 fc23 	bl	80002dc <__adddf3>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a9e:	f7fa f863 	bl	8000b68 <__aeabi_dcmpgt>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d163      	bne.n	8006b6e <_dtoa_r+0x6be>
 8006aa6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006aaa:	49a8      	ldr	r1, [pc, #672]	@ (8006d4c <_dtoa_r+0x89c>)
 8006aac:	2000      	movs	r0, #0
 8006aae:	f7f9 fc13 	bl	80002d8 <__aeabi_dsub>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aba:	f7fa f837 	bl	8000b2c <__aeabi_dcmplt>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	f43f af14 	beq.w	80068ec <_dtoa_r+0x43c>
 8006ac4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006ac6:	1e73      	subs	r3, r6, #1
 8006ac8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006aca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ace:	2b30      	cmp	r3, #48	@ 0x30
 8006ad0:	d0f8      	beq.n	8006ac4 <_dtoa_r+0x614>
 8006ad2:	4647      	mov	r7, r8
 8006ad4:	e03b      	b.n	8006b4e <_dtoa_r+0x69e>
 8006ad6:	4b9e      	ldr	r3, [pc, #632]	@ (8006d50 <_dtoa_r+0x8a0>)
 8006ad8:	f7f9 fdb6 	bl	8000648 <__aeabi_dmul>
 8006adc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ae0:	e7bc      	b.n	8006a5c <_dtoa_r+0x5ac>
 8006ae2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006ae6:	4656      	mov	r6, sl
 8006ae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006aec:	4620      	mov	r0, r4
 8006aee:	4629      	mov	r1, r5
 8006af0:	f7f9 fed4 	bl	800089c <__aeabi_ddiv>
 8006af4:	f7fa f858 	bl	8000ba8 <__aeabi_d2iz>
 8006af8:	4680      	mov	r8, r0
 8006afa:	f7f9 fd3b 	bl	8000574 <__aeabi_i2d>
 8006afe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b02:	f7f9 fda1 	bl	8000648 <__aeabi_dmul>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006b12:	f7f9 fbe1 	bl	80002d8 <__aeabi_dsub>
 8006b16:	f806 4b01 	strb.w	r4, [r6], #1
 8006b1a:	9d03      	ldr	r5, [sp, #12]
 8006b1c:	eba6 040a 	sub.w	r4, r6, sl
 8006b20:	42a5      	cmp	r5, r4
 8006b22:	4602      	mov	r2, r0
 8006b24:	460b      	mov	r3, r1
 8006b26:	d133      	bne.n	8006b90 <_dtoa_r+0x6e0>
 8006b28:	f7f9 fbd8 	bl	80002dc <__adddf3>
 8006b2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b30:	4604      	mov	r4, r0
 8006b32:	460d      	mov	r5, r1
 8006b34:	f7fa f818 	bl	8000b68 <__aeabi_dcmpgt>
 8006b38:	b9c0      	cbnz	r0, 8006b6c <_dtoa_r+0x6bc>
 8006b3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b3e:	4620      	mov	r0, r4
 8006b40:	4629      	mov	r1, r5
 8006b42:	f7f9 ffe9 	bl	8000b18 <__aeabi_dcmpeq>
 8006b46:	b110      	cbz	r0, 8006b4e <_dtoa_r+0x69e>
 8006b48:	f018 0f01 	tst.w	r8, #1
 8006b4c:	d10e      	bne.n	8006b6c <_dtoa_r+0x6bc>
 8006b4e:	9902      	ldr	r1, [sp, #8]
 8006b50:	4648      	mov	r0, r9
 8006b52:	f000 fd61 	bl	8007618 <_Bfree>
 8006b56:	2300      	movs	r3, #0
 8006b58:	7033      	strb	r3, [r6, #0]
 8006b5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006b5c:	3701      	adds	r7, #1
 8006b5e:	601f      	str	r7, [r3, #0]
 8006b60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 824b 	beq.w	8006ffe <_dtoa_r+0xb4e>
 8006b68:	601e      	str	r6, [r3, #0]
 8006b6a:	e248      	b.n	8006ffe <_dtoa_r+0xb4e>
 8006b6c:	46b8      	mov	r8, r7
 8006b6e:	4633      	mov	r3, r6
 8006b70:	461e      	mov	r6, r3
 8006b72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b76:	2a39      	cmp	r2, #57	@ 0x39
 8006b78:	d106      	bne.n	8006b88 <_dtoa_r+0x6d8>
 8006b7a:	459a      	cmp	sl, r3
 8006b7c:	d1f8      	bne.n	8006b70 <_dtoa_r+0x6c0>
 8006b7e:	2230      	movs	r2, #48	@ 0x30
 8006b80:	f108 0801 	add.w	r8, r8, #1
 8006b84:	f88a 2000 	strb.w	r2, [sl]
 8006b88:	781a      	ldrb	r2, [r3, #0]
 8006b8a:	3201      	adds	r2, #1
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	e7a0      	b.n	8006ad2 <_dtoa_r+0x622>
 8006b90:	4b6f      	ldr	r3, [pc, #444]	@ (8006d50 <_dtoa_r+0x8a0>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	f7f9 fd58 	bl	8000648 <__aeabi_dmul>
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	4604      	mov	r4, r0
 8006b9e:	460d      	mov	r5, r1
 8006ba0:	f7f9 ffba 	bl	8000b18 <__aeabi_dcmpeq>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d09f      	beq.n	8006ae8 <_dtoa_r+0x638>
 8006ba8:	e7d1      	b.n	8006b4e <_dtoa_r+0x69e>
 8006baa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bac:	2a00      	cmp	r2, #0
 8006bae:	f000 80ea 	beq.w	8006d86 <_dtoa_r+0x8d6>
 8006bb2:	9a07      	ldr	r2, [sp, #28]
 8006bb4:	2a01      	cmp	r2, #1
 8006bb6:	f300 80cd 	bgt.w	8006d54 <_dtoa_r+0x8a4>
 8006bba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006bbc:	2a00      	cmp	r2, #0
 8006bbe:	f000 80c1 	beq.w	8006d44 <_dtoa_r+0x894>
 8006bc2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006bc6:	9c08      	ldr	r4, [sp, #32]
 8006bc8:	9e00      	ldr	r6, [sp, #0]
 8006bca:	9a00      	ldr	r2, [sp, #0]
 8006bcc:	441a      	add	r2, r3
 8006bce:	9200      	str	r2, [sp, #0]
 8006bd0:	9a06      	ldr	r2, [sp, #24]
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	441a      	add	r2, r3
 8006bd6:	4648      	mov	r0, r9
 8006bd8:	9206      	str	r2, [sp, #24]
 8006bda:	f000 fdd1 	bl	8007780 <__i2b>
 8006bde:	4605      	mov	r5, r0
 8006be0:	b166      	cbz	r6, 8006bfc <_dtoa_r+0x74c>
 8006be2:	9b06      	ldr	r3, [sp, #24]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	dd09      	ble.n	8006bfc <_dtoa_r+0x74c>
 8006be8:	42b3      	cmp	r3, r6
 8006bea:	9a00      	ldr	r2, [sp, #0]
 8006bec:	bfa8      	it	ge
 8006bee:	4633      	movge	r3, r6
 8006bf0:	1ad2      	subs	r2, r2, r3
 8006bf2:	9200      	str	r2, [sp, #0]
 8006bf4:	9a06      	ldr	r2, [sp, #24]
 8006bf6:	1af6      	subs	r6, r6, r3
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	9306      	str	r3, [sp, #24]
 8006bfc:	9b08      	ldr	r3, [sp, #32]
 8006bfe:	b30b      	cbz	r3, 8006c44 <_dtoa_r+0x794>
 8006c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 80c6 	beq.w	8006d94 <_dtoa_r+0x8e4>
 8006c08:	2c00      	cmp	r4, #0
 8006c0a:	f000 80c0 	beq.w	8006d8e <_dtoa_r+0x8de>
 8006c0e:	4629      	mov	r1, r5
 8006c10:	4622      	mov	r2, r4
 8006c12:	4648      	mov	r0, r9
 8006c14:	f000 fe6c 	bl	80078f0 <__pow5mult>
 8006c18:	9a02      	ldr	r2, [sp, #8]
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	4648      	mov	r0, r9
 8006c20:	f000 fdc4 	bl	80077ac <__multiply>
 8006c24:	9902      	ldr	r1, [sp, #8]
 8006c26:	4680      	mov	r8, r0
 8006c28:	4648      	mov	r0, r9
 8006c2a:	f000 fcf5 	bl	8007618 <_Bfree>
 8006c2e:	9b08      	ldr	r3, [sp, #32]
 8006c30:	1b1b      	subs	r3, r3, r4
 8006c32:	9308      	str	r3, [sp, #32]
 8006c34:	f000 80b1 	beq.w	8006d9a <_dtoa_r+0x8ea>
 8006c38:	9a08      	ldr	r2, [sp, #32]
 8006c3a:	4641      	mov	r1, r8
 8006c3c:	4648      	mov	r0, r9
 8006c3e:	f000 fe57 	bl	80078f0 <__pow5mult>
 8006c42:	9002      	str	r0, [sp, #8]
 8006c44:	2101      	movs	r1, #1
 8006c46:	4648      	mov	r0, r9
 8006c48:	f000 fd9a 	bl	8007780 <__i2b>
 8006c4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c4e:	4604      	mov	r4, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 81d8 	beq.w	8007006 <_dtoa_r+0xb56>
 8006c56:	461a      	mov	r2, r3
 8006c58:	4601      	mov	r1, r0
 8006c5a:	4648      	mov	r0, r9
 8006c5c:	f000 fe48 	bl	80078f0 <__pow5mult>
 8006c60:	9b07      	ldr	r3, [sp, #28]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	4604      	mov	r4, r0
 8006c66:	f300 809f 	bgt.w	8006da8 <_dtoa_r+0x8f8>
 8006c6a:	9b04      	ldr	r3, [sp, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f040 8097 	bne.w	8006da0 <_dtoa_r+0x8f0>
 8006c72:	9b05      	ldr	r3, [sp, #20]
 8006c74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f040 8093 	bne.w	8006da4 <_dtoa_r+0x8f4>
 8006c7e:	9b05      	ldr	r3, [sp, #20]
 8006c80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c84:	0d1b      	lsrs	r3, r3, #20
 8006c86:	051b      	lsls	r3, r3, #20
 8006c88:	b133      	cbz	r3, 8006c98 <_dtoa_r+0x7e8>
 8006c8a:	9b00      	ldr	r3, [sp, #0]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	9b06      	ldr	r3, [sp, #24]
 8006c92:	3301      	adds	r3, #1
 8006c94:	9306      	str	r3, [sp, #24]
 8006c96:	2301      	movs	r3, #1
 8006c98:	9308      	str	r3, [sp, #32]
 8006c9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 81b8 	beq.w	8007012 <_dtoa_r+0xb62>
 8006ca2:	6923      	ldr	r3, [r4, #16]
 8006ca4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ca8:	6918      	ldr	r0, [r3, #16]
 8006caa:	f000 fd1d 	bl	80076e8 <__hi0bits>
 8006cae:	f1c0 0020 	rsb	r0, r0, #32
 8006cb2:	9b06      	ldr	r3, [sp, #24]
 8006cb4:	4418      	add	r0, r3
 8006cb6:	f010 001f 	ands.w	r0, r0, #31
 8006cba:	f000 8082 	beq.w	8006dc2 <_dtoa_r+0x912>
 8006cbe:	f1c0 0320 	rsb	r3, r0, #32
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	dd73      	ble.n	8006dae <_dtoa_r+0x8fe>
 8006cc6:	9b00      	ldr	r3, [sp, #0]
 8006cc8:	f1c0 001c 	rsb	r0, r0, #28
 8006ccc:	4403      	add	r3, r0
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	9b06      	ldr	r3, [sp, #24]
 8006cd2:	4403      	add	r3, r0
 8006cd4:	4406      	add	r6, r0
 8006cd6:	9306      	str	r3, [sp, #24]
 8006cd8:	9b00      	ldr	r3, [sp, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	dd05      	ble.n	8006cea <_dtoa_r+0x83a>
 8006cde:	9902      	ldr	r1, [sp, #8]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	4648      	mov	r0, r9
 8006ce4:	f000 fe5e 	bl	80079a4 <__lshift>
 8006ce8:	9002      	str	r0, [sp, #8]
 8006cea:	9b06      	ldr	r3, [sp, #24]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dd05      	ble.n	8006cfc <_dtoa_r+0x84c>
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	4648      	mov	r0, r9
 8006cf6:	f000 fe55 	bl	80079a4 <__lshift>
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d061      	beq.n	8006dc6 <_dtoa_r+0x916>
 8006d02:	9802      	ldr	r0, [sp, #8]
 8006d04:	4621      	mov	r1, r4
 8006d06:	f000 feb9 	bl	8007a7c <__mcmp>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	da5b      	bge.n	8006dc6 <_dtoa_r+0x916>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	9902      	ldr	r1, [sp, #8]
 8006d12:	220a      	movs	r2, #10
 8006d14:	4648      	mov	r0, r9
 8006d16:	f000 fca1 	bl	800765c <__multadd>
 8006d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d1c:	9002      	str	r0, [sp, #8]
 8006d1e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 8177 	beq.w	8007016 <_dtoa_r+0xb66>
 8006d28:	4629      	mov	r1, r5
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	220a      	movs	r2, #10
 8006d2e:	4648      	mov	r0, r9
 8006d30:	f000 fc94 	bl	800765c <__multadd>
 8006d34:	f1bb 0f00 	cmp.w	fp, #0
 8006d38:	4605      	mov	r5, r0
 8006d3a:	dc6f      	bgt.n	8006e1c <_dtoa_r+0x96c>
 8006d3c:	9b07      	ldr	r3, [sp, #28]
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	dc49      	bgt.n	8006dd6 <_dtoa_r+0x926>
 8006d42:	e06b      	b.n	8006e1c <_dtoa_r+0x96c>
 8006d44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d4a:	e73c      	b.n	8006bc6 <_dtoa_r+0x716>
 8006d4c:	3fe00000 	.word	0x3fe00000
 8006d50:	40240000 	.word	0x40240000
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	1e5c      	subs	r4, r3, #1
 8006d58:	9b08      	ldr	r3, [sp, #32]
 8006d5a:	42a3      	cmp	r3, r4
 8006d5c:	db09      	blt.n	8006d72 <_dtoa_r+0x8c2>
 8006d5e:	1b1c      	subs	r4, r3, r4
 8006d60:	9b03      	ldr	r3, [sp, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f6bf af30 	bge.w	8006bc8 <_dtoa_r+0x718>
 8006d68:	9b00      	ldr	r3, [sp, #0]
 8006d6a:	9a03      	ldr	r2, [sp, #12]
 8006d6c:	1a9e      	subs	r6, r3, r2
 8006d6e:	2300      	movs	r3, #0
 8006d70:	e72b      	b.n	8006bca <_dtoa_r+0x71a>
 8006d72:	9b08      	ldr	r3, [sp, #32]
 8006d74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006d76:	9408      	str	r4, [sp, #32]
 8006d78:	1ae3      	subs	r3, r4, r3
 8006d7a:	441a      	add	r2, r3
 8006d7c:	9e00      	ldr	r6, [sp, #0]
 8006d7e:	9b03      	ldr	r3, [sp, #12]
 8006d80:	920d      	str	r2, [sp, #52]	@ 0x34
 8006d82:	2400      	movs	r4, #0
 8006d84:	e721      	b.n	8006bca <_dtoa_r+0x71a>
 8006d86:	9c08      	ldr	r4, [sp, #32]
 8006d88:	9e00      	ldr	r6, [sp, #0]
 8006d8a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006d8c:	e728      	b.n	8006be0 <_dtoa_r+0x730>
 8006d8e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006d92:	e751      	b.n	8006c38 <_dtoa_r+0x788>
 8006d94:	9a08      	ldr	r2, [sp, #32]
 8006d96:	9902      	ldr	r1, [sp, #8]
 8006d98:	e750      	b.n	8006c3c <_dtoa_r+0x78c>
 8006d9a:	f8cd 8008 	str.w	r8, [sp, #8]
 8006d9e:	e751      	b.n	8006c44 <_dtoa_r+0x794>
 8006da0:	2300      	movs	r3, #0
 8006da2:	e779      	b.n	8006c98 <_dtoa_r+0x7e8>
 8006da4:	9b04      	ldr	r3, [sp, #16]
 8006da6:	e777      	b.n	8006c98 <_dtoa_r+0x7e8>
 8006da8:	2300      	movs	r3, #0
 8006daa:	9308      	str	r3, [sp, #32]
 8006dac:	e779      	b.n	8006ca2 <_dtoa_r+0x7f2>
 8006dae:	d093      	beq.n	8006cd8 <_dtoa_r+0x828>
 8006db0:	9a00      	ldr	r2, [sp, #0]
 8006db2:	331c      	adds	r3, #28
 8006db4:	441a      	add	r2, r3
 8006db6:	9200      	str	r2, [sp, #0]
 8006db8:	9a06      	ldr	r2, [sp, #24]
 8006dba:	441a      	add	r2, r3
 8006dbc:	441e      	add	r6, r3
 8006dbe:	9206      	str	r2, [sp, #24]
 8006dc0:	e78a      	b.n	8006cd8 <_dtoa_r+0x828>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	e7f4      	b.n	8006db0 <_dtoa_r+0x900>
 8006dc6:	9b03      	ldr	r3, [sp, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	46b8      	mov	r8, r7
 8006dcc:	dc20      	bgt.n	8006e10 <_dtoa_r+0x960>
 8006dce:	469b      	mov	fp, r3
 8006dd0:	9b07      	ldr	r3, [sp, #28]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	dd1e      	ble.n	8006e14 <_dtoa_r+0x964>
 8006dd6:	f1bb 0f00 	cmp.w	fp, #0
 8006dda:	f47f adb1 	bne.w	8006940 <_dtoa_r+0x490>
 8006dde:	4621      	mov	r1, r4
 8006de0:	465b      	mov	r3, fp
 8006de2:	2205      	movs	r2, #5
 8006de4:	4648      	mov	r0, r9
 8006de6:	f000 fc39 	bl	800765c <__multadd>
 8006dea:	4601      	mov	r1, r0
 8006dec:	4604      	mov	r4, r0
 8006dee:	9802      	ldr	r0, [sp, #8]
 8006df0:	f000 fe44 	bl	8007a7c <__mcmp>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	f77f ada3 	ble.w	8006940 <_dtoa_r+0x490>
 8006dfa:	4656      	mov	r6, sl
 8006dfc:	2331      	movs	r3, #49	@ 0x31
 8006dfe:	f806 3b01 	strb.w	r3, [r6], #1
 8006e02:	f108 0801 	add.w	r8, r8, #1
 8006e06:	e59f      	b.n	8006948 <_dtoa_r+0x498>
 8006e08:	9c03      	ldr	r4, [sp, #12]
 8006e0a:	46b8      	mov	r8, r7
 8006e0c:	4625      	mov	r5, r4
 8006e0e:	e7f4      	b.n	8006dfa <_dtoa_r+0x94a>
 8006e10:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 8101 	beq.w	800701e <_dtoa_r+0xb6e>
 8006e1c:	2e00      	cmp	r6, #0
 8006e1e:	dd05      	ble.n	8006e2c <_dtoa_r+0x97c>
 8006e20:	4629      	mov	r1, r5
 8006e22:	4632      	mov	r2, r6
 8006e24:	4648      	mov	r0, r9
 8006e26:	f000 fdbd 	bl	80079a4 <__lshift>
 8006e2a:	4605      	mov	r5, r0
 8006e2c:	9b08      	ldr	r3, [sp, #32]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d05c      	beq.n	8006eec <_dtoa_r+0xa3c>
 8006e32:	6869      	ldr	r1, [r5, #4]
 8006e34:	4648      	mov	r0, r9
 8006e36:	f000 fbaf 	bl	8007598 <_Balloc>
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	b928      	cbnz	r0, 8006e4a <_dtoa_r+0x99a>
 8006e3e:	4b82      	ldr	r3, [pc, #520]	@ (8007048 <_dtoa_r+0xb98>)
 8006e40:	4602      	mov	r2, r0
 8006e42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e46:	f7ff bb4a 	b.w	80064de <_dtoa_r+0x2e>
 8006e4a:	692a      	ldr	r2, [r5, #16]
 8006e4c:	3202      	adds	r2, #2
 8006e4e:	0092      	lsls	r2, r2, #2
 8006e50:	f105 010c 	add.w	r1, r5, #12
 8006e54:	300c      	adds	r0, #12
 8006e56:	f001 f8cb 	bl	8007ff0 <memcpy>
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4648      	mov	r0, r9
 8006e60:	f000 fda0 	bl	80079a4 <__lshift>
 8006e64:	f10a 0301 	add.w	r3, sl, #1
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	eb0a 030b 	add.w	r3, sl, fp
 8006e6e:	9308      	str	r3, [sp, #32]
 8006e70:	9b04      	ldr	r3, [sp, #16]
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	462f      	mov	r7, r5
 8006e78:	9306      	str	r3, [sp, #24]
 8006e7a:	4605      	mov	r5, r0
 8006e7c:	9b00      	ldr	r3, [sp, #0]
 8006e7e:	9802      	ldr	r0, [sp, #8]
 8006e80:	4621      	mov	r1, r4
 8006e82:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8006e86:	f7ff fa89 	bl	800639c <quorem>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	3330      	adds	r3, #48	@ 0x30
 8006e8e:	9003      	str	r0, [sp, #12]
 8006e90:	4639      	mov	r1, r7
 8006e92:	9802      	ldr	r0, [sp, #8]
 8006e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e96:	f000 fdf1 	bl	8007a7c <__mcmp>
 8006e9a:	462a      	mov	r2, r5
 8006e9c:	9004      	str	r0, [sp, #16]
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	4648      	mov	r0, r9
 8006ea2:	f000 fe07 	bl	8007ab4 <__mdiff>
 8006ea6:	68c2      	ldr	r2, [r0, #12]
 8006ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eaa:	4606      	mov	r6, r0
 8006eac:	bb02      	cbnz	r2, 8006ef0 <_dtoa_r+0xa40>
 8006eae:	4601      	mov	r1, r0
 8006eb0:	9802      	ldr	r0, [sp, #8]
 8006eb2:	f000 fde3 	bl	8007a7c <__mcmp>
 8006eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb8:	4602      	mov	r2, r0
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4648      	mov	r0, r9
 8006ebe:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ec2:	f000 fba9 	bl	8007618 <_Bfree>
 8006ec6:	9b07      	ldr	r3, [sp, #28]
 8006ec8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006eca:	9e00      	ldr	r6, [sp, #0]
 8006ecc:	ea42 0103 	orr.w	r1, r2, r3
 8006ed0:	9b06      	ldr	r3, [sp, #24]
 8006ed2:	4319      	orrs	r1, r3
 8006ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed6:	d10d      	bne.n	8006ef4 <_dtoa_r+0xa44>
 8006ed8:	2b39      	cmp	r3, #57	@ 0x39
 8006eda:	d027      	beq.n	8006f2c <_dtoa_r+0xa7c>
 8006edc:	9a04      	ldr	r2, [sp, #16]
 8006ede:	2a00      	cmp	r2, #0
 8006ee0:	dd01      	ble.n	8006ee6 <_dtoa_r+0xa36>
 8006ee2:	9b03      	ldr	r3, [sp, #12]
 8006ee4:	3331      	adds	r3, #49	@ 0x31
 8006ee6:	f88b 3000 	strb.w	r3, [fp]
 8006eea:	e52e      	b.n	800694a <_dtoa_r+0x49a>
 8006eec:	4628      	mov	r0, r5
 8006eee:	e7b9      	b.n	8006e64 <_dtoa_r+0x9b4>
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	e7e2      	b.n	8006eba <_dtoa_r+0xa0a>
 8006ef4:	9904      	ldr	r1, [sp, #16]
 8006ef6:	2900      	cmp	r1, #0
 8006ef8:	db04      	blt.n	8006f04 <_dtoa_r+0xa54>
 8006efa:	9807      	ldr	r0, [sp, #28]
 8006efc:	4301      	orrs	r1, r0
 8006efe:	9806      	ldr	r0, [sp, #24]
 8006f00:	4301      	orrs	r1, r0
 8006f02:	d120      	bne.n	8006f46 <_dtoa_r+0xa96>
 8006f04:	2a00      	cmp	r2, #0
 8006f06:	ddee      	ble.n	8006ee6 <_dtoa_r+0xa36>
 8006f08:	9902      	ldr	r1, [sp, #8]
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	4648      	mov	r0, r9
 8006f10:	f000 fd48 	bl	80079a4 <__lshift>
 8006f14:	4621      	mov	r1, r4
 8006f16:	9002      	str	r0, [sp, #8]
 8006f18:	f000 fdb0 	bl	8007a7c <__mcmp>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	9b00      	ldr	r3, [sp, #0]
 8006f20:	dc02      	bgt.n	8006f28 <_dtoa_r+0xa78>
 8006f22:	d1e0      	bne.n	8006ee6 <_dtoa_r+0xa36>
 8006f24:	07da      	lsls	r2, r3, #31
 8006f26:	d5de      	bpl.n	8006ee6 <_dtoa_r+0xa36>
 8006f28:	2b39      	cmp	r3, #57	@ 0x39
 8006f2a:	d1da      	bne.n	8006ee2 <_dtoa_r+0xa32>
 8006f2c:	2339      	movs	r3, #57	@ 0x39
 8006f2e:	f88b 3000 	strb.w	r3, [fp]
 8006f32:	4633      	mov	r3, r6
 8006f34:	461e      	mov	r6, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f3c:	2a39      	cmp	r2, #57	@ 0x39
 8006f3e:	d04e      	beq.n	8006fde <_dtoa_r+0xb2e>
 8006f40:	3201      	adds	r2, #1
 8006f42:	701a      	strb	r2, [r3, #0]
 8006f44:	e501      	b.n	800694a <_dtoa_r+0x49a>
 8006f46:	2a00      	cmp	r2, #0
 8006f48:	dd03      	ble.n	8006f52 <_dtoa_r+0xaa2>
 8006f4a:	2b39      	cmp	r3, #57	@ 0x39
 8006f4c:	d0ee      	beq.n	8006f2c <_dtoa_r+0xa7c>
 8006f4e:	3301      	adds	r3, #1
 8006f50:	e7c9      	b.n	8006ee6 <_dtoa_r+0xa36>
 8006f52:	9a00      	ldr	r2, [sp, #0]
 8006f54:	9908      	ldr	r1, [sp, #32]
 8006f56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f5a:	428a      	cmp	r2, r1
 8006f5c:	d028      	beq.n	8006fb0 <_dtoa_r+0xb00>
 8006f5e:	9902      	ldr	r1, [sp, #8]
 8006f60:	2300      	movs	r3, #0
 8006f62:	220a      	movs	r2, #10
 8006f64:	4648      	mov	r0, r9
 8006f66:	f000 fb79 	bl	800765c <__multadd>
 8006f6a:	42af      	cmp	r7, r5
 8006f6c:	9002      	str	r0, [sp, #8]
 8006f6e:	f04f 0300 	mov.w	r3, #0
 8006f72:	f04f 020a 	mov.w	r2, #10
 8006f76:	4639      	mov	r1, r7
 8006f78:	4648      	mov	r0, r9
 8006f7a:	d107      	bne.n	8006f8c <_dtoa_r+0xadc>
 8006f7c:	f000 fb6e 	bl	800765c <__multadd>
 8006f80:	4607      	mov	r7, r0
 8006f82:	4605      	mov	r5, r0
 8006f84:	9b00      	ldr	r3, [sp, #0]
 8006f86:	3301      	adds	r3, #1
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	e777      	b.n	8006e7c <_dtoa_r+0x9cc>
 8006f8c:	f000 fb66 	bl	800765c <__multadd>
 8006f90:	4629      	mov	r1, r5
 8006f92:	4607      	mov	r7, r0
 8006f94:	2300      	movs	r3, #0
 8006f96:	220a      	movs	r2, #10
 8006f98:	4648      	mov	r0, r9
 8006f9a:	f000 fb5f 	bl	800765c <__multadd>
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	e7f0      	b.n	8006f84 <_dtoa_r+0xad4>
 8006fa2:	f1bb 0f00 	cmp.w	fp, #0
 8006fa6:	bfcc      	ite	gt
 8006fa8:	465e      	movgt	r6, fp
 8006faa:	2601      	movle	r6, #1
 8006fac:	4456      	add	r6, sl
 8006fae:	2700      	movs	r7, #0
 8006fb0:	9902      	ldr	r1, [sp, #8]
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	4648      	mov	r0, r9
 8006fb8:	f000 fcf4 	bl	80079a4 <__lshift>
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	9002      	str	r0, [sp, #8]
 8006fc0:	f000 fd5c 	bl	8007a7c <__mcmp>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	dcb4      	bgt.n	8006f32 <_dtoa_r+0xa82>
 8006fc8:	d102      	bne.n	8006fd0 <_dtoa_r+0xb20>
 8006fca:	9b00      	ldr	r3, [sp, #0]
 8006fcc:	07db      	lsls	r3, r3, #31
 8006fce:	d4b0      	bmi.n	8006f32 <_dtoa_r+0xa82>
 8006fd0:	4633      	mov	r3, r6
 8006fd2:	461e      	mov	r6, r3
 8006fd4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fd8:	2a30      	cmp	r2, #48	@ 0x30
 8006fda:	d0fa      	beq.n	8006fd2 <_dtoa_r+0xb22>
 8006fdc:	e4b5      	b.n	800694a <_dtoa_r+0x49a>
 8006fde:	459a      	cmp	sl, r3
 8006fe0:	d1a8      	bne.n	8006f34 <_dtoa_r+0xa84>
 8006fe2:	2331      	movs	r3, #49	@ 0x31
 8006fe4:	f108 0801 	add.w	r8, r8, #1
 8006fe8:	f88a 3000 	strb.w	r3, [sl]
 8006fec:	e4ad      	b.n	800694a <_dtoa_r+0x49a>
 8006fee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ff0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800704c <_dtoa_r+0xb9c>
 8006ff4:	b11b      	cbz	r3, 8006ffe <_dtoa_r+0xb4e>
 8006ff6:	f10a 0308 	add.w	r3, sl, #8
 8006ffa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	4650      	mov	r0, sl
 8007000:	b017      	add	sp, #92	@ 0x5c
 8007002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007006:	9b07      	ldr	r3, [sp, #28]
 8007008:	2b01      	cmp	r3, #1
 800700a:	f77f ae2e 	ble.w	8006c6a <_dtoa_r+0x7ba>
 800700e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007010:	9308      	str	r3, [sp, #32]
 8007012:	2001      	movs	r0, #1
 8007014:	e64d      	b.n	8006cb2 <_dtoa_r+0x802>
 8007016:	f1bb 0f00 	cmp.w	fp, #0
 800701a:	f77f aed9 	ble.w	8006dd0 <_dtoa_r+0x920>
 800701e:	4656      	mov	r6, sl
 8007020:	9802      	ldr	r0, [sp, #8]
 8007022:	4621      	mov	r1, r4
 8007024:	f7ff f9ba 	bl	800639c <quorem>
 8007028:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800702c:	f806 3b01 	strb.w	r3, [r6], #1
 8007030:	eba6 020a 	sub.w	r2, r6, sl
 8007034:	4593      	cmp	fp, r2
 8007036:	ddb4      	ble.n	8006fa2 <_dtoa_r+0xaf2>
 8007038:	9902      	ldr	r1, [sp, #8]
 800703a:	2300      	movs	r3, #0
 800703c:	220a      	movs	r2, #10
 800703e:	4648      	mov	r0, r9
 8007040:	f000 fb0c 	bl	800765c <__multadd>
 8007044:	9002      	str	r0, [sp, #8]
 8007046:	e7eb      	b.n	8007020 <_dtoa_r+0xb70>
 8007048:	080083d8 	.word	0x080083d8
 800704c:	0800835c 	.word	0x0800835c

08007050 <__sfputc_r>:
 8007050:	6893      	ldr	r3, [r2, #8]
 8007052:	3b01      	subs	r3, #1
 8007054:	2b00      	cmp	r3, #0
 8007056:	b410      	push	{r4}
 8007058:	6093      	str	r3, [r2, #8]
 800705a:	da08      	bge.n	800706e <__sfputc_r+0x1e>
 800705c:	6994      	ldr	r4, [r2, #24]
 800705e:	42a3      	cmp	r3, r4
 8007060:	db01      	blt.n	8007066 <__sfputc_r+0x16>
 8007062:	290a      	cmp	r1, #10
 8007064:	d103      	bne.n	800706e <__sfputc_r+0x1e>
 8007066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800706a:	f000 be52 	b.w	8007d12 <__swbuf_r>
 800706e:	6813      	ldr	r3, [r2, #0]
 8007070:	1c58      	adds	r0, r3, #1
 8007072:	6010      	str	r0, [r2, #0]
 8007074:	7019      	strb	r1, [r3, #0]
 8007076:	4608      	mov	r0, r1
 8007078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800707c:	4770      	bx	lr

0800707e <__sfputs_r>:
 800707e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007080:	4606      	mov	r6, r0
 8007082:	460f      	mov	r7, r1
 8007084:	4614      	mov	r4, r2
 8007086:	18d5      	adds	r5, r2, r3
 8007088:	42ac      	cmp	r4, r5
 800708a:	d101      	bne.n	8007090 <__sfputs_r+0x12>
 800708c:	2000      	movs	r0, #0
 800708e:	e007      	b.n	80070a0 <__sfputs_r+0x22>
 8007090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007094:	463a      	mov	r2, r7
 8007096:	4630      	mov	r0, r6
 8007098:	f7ff ffda 	bl	8007050 <__sfputc_r>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d1f3      	bne.n	8007088 <__sfputs_r+0xa>
 80070a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070a4 <_vfiprintf_r>:
 80070a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	460d      	mov	r5, r1
 80070aa:	b09d      	sub	sp, #116	@ 0x74
 80070ac:	4614      	mov	r4, r2
 80070ae:	4698      	mov	r8, r3
 80070b0:	4606      	mov	r6, r0
 80070b2:	b118      	cbz	r0, 80070bc <_vfiprintf_r+0x18>
 80070b4:	6a03      	ldr	r3, [r0, #32]
 80070b6:	b90b      	cbnz	r3, 80070bc <_vfiprintf_r+0x18>
 80070b8:	f7ff f890 	bl	80061dc <__sinit>
 80070bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070be:	07d9      	lsls	r1, r3, #31
 80070c0:	d405      	bmi.n	80070ce <_vfiprintf_r+0x2a>
 80070c2:	89ab      	ldrh	r3, [r5, #12]
 80070c4:	059a      	lsls	r2, r3, #22
 80070c6:	d402      	bmi.n	80070ce <_vfiprintf_r+0x2a>
 80070c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070ca:	f7ff f960 	bl	800638e <__retarget_lock_acquire_recursive>
 80070ce:	89ab      	ldrh	r3, [r5, #12]
 80070d0:	071b      	lsls	r3, r3, #28
 80070d2:	d501      	bpl.n	80070d8 <_vfiprintf_r+0x34>
 80070d4:	692b      	ldr	r3, [r5, #16]
 80070d6:	b99b      	cbnz	r3, 8007100 <_vfiprintf_r+0x5c>
 80070d8:	4629      	mov	r1, r5
 80070da:	4630      	mov	r0, r6
 80070dc:	f000 fe58 	bl	8007d90 <__swsetup_r>
 80070e0:	b170      	cbz	r0, 8007100 <_vfiprintf_r+0x5c>
 80070e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070e4:	07dc      	lsls	r4, r3, #31
 80070e6:	d504      	bpl.n	80070f2 <_vfiprintf_r+0x4e>
 80070e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070ec:	b01d      	add	sp, #116	@ 0x74
 80070ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f2:	89ab      	ldrh	r3, [r5, #12]
 80070f4:	0598      	lsls	r0, r3, #22
 80070f6:	d4f7      	bmi.n	80070e8 <_vfiprintf_r+0x44>
 80070f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070fa:	f7ff f949 	bl	8006390 <__retarget_lock_release_recursive>
 80070fe:	e7f3      	b.n	80070e8 <_vfiprintf_r+0x44>
 8007100:	2300      	movs	r3, #0
 8007102:	9309      	str	r3, [sp, #36]	@ 0x24
 8007104:	2320      	movs	r3, #32
 8007106:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800710a:	f8cd 800c 	str.w	r8, [sp, #12]
 800710e:	2330      	movs	r3, #48	@ 0x30
 8007110:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80072c0 <_vfiprintf_r+0x21c>
 8007114:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007118:	f04f 0901 	mov.w	r9, #1
 800711c:	4623      	mov	r3, r4
 800711e:	469a      	mov	sl, r3
 8007120:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007124:	b10a      	cbz	r2, 800712a <_vfiprintf_r+0x86>
 8007126:	2a25      	cmp	r2, #37	@ 0x25
 8007128:	d1f9      	bne.n	800711e <_vfiprintf_r+0x7a>
 800712a:	ebba 0b04 	subs.w	fp, sl, r4
 800712e:	d00b      	beq.n	8007148 <_vfiprintf_r+0xa4>
 8007130:	465b      	mov	r3, fp
 8007132:	4622      	mov	r2, r4
 8007134:	4629      	mov	r1, r5
 8007136:	4630      	mov	r0, r6
 8007138:	f7ff ffa1 	bl	800707e <__sfputs_r>
 800713c:	3001      	adds	r0, #1
 800713e:	f000 80a7 	beq.w	8007290 <_vfiprintf_r+0x1ec>
 8007142:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007144:	445a      	add	r2, fp
 8007146:	9209      	str	r2, [sp, #36]	@ 0x24
 8007148:	f89a 3000 	ldrb.w	r3, [sl]
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 809f 	beq.w	8007290 <_vfiprintf_r+0x1ec>
 8007152:	2300      	movs	r3, #0
 8007154:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800715c:	f10a 0a01 	add.w	sl, sl, #1
 8007160:	9304      	str	r3, [sp, #16]
 8007162:	9307      	str	r3, [sp, #28]
 8007164:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007168:	931a      	str	r3, [sp, #104]	@ 0x68
 800716a:	4654      	mov	r4, sl
 800716c:	2205      	movs	r2, #5
 800716e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007172:	4853      	ldr	r0, [pc, #332]	@ (80072c0 <_vfiprintf_r+0x21c>)
 8007174:	f7f9 f854 	bl	8000220 <memchr>
 8007178:	9a04      	ldr	r2, [sp, #16]
 800717a:	b9d8      	cbnz	r0, 80071b4 <_vfiprintf_r+0x110>
 800717c:	06d1      	lsls	r1, r2, #27
 800717e:	bf44      	itt	mi
 8007180:	2320      	movmi	r3, #32
 8007182:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007186:	0713      	lsls	r3, r2, #28
 8007188:	bf44      	itt	mi
 800718a:	232b      	movmi	r3, #43	@ 0x2b
 800718c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007190:	f89a 3000 	ldrb.w	r3, [sl]
 8007194:	2b2a      	cmp	r3, #42	@ 0x2a
 8007196:	d015      	beq.n	80071c4 <_vfiprintf_r+0x120>
 8007198:	9a07      	ldr	r2, [sp, #28]
 800719a:	4654      	mov	r4, sl
 800719c:	2000      	movs	r0, #0
 800719e:	f04f 0c0a 	mov.w	ip, #10
 80071a2:	4621      	mov	r1, r4
 80071a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071a8:	3b30      	subs	r3, #48	@ 0x30
 80071aa:	2b09      	cmp	r3, #9
 80071ac:	d94b      	bls.n	8007246 <_vfiprintf_r+0x1a2>
 80071ae:	b1b0      	cbz	r0, 80071de <_vfiprintf_r+0x13a>
 80071b0:	9207      	str	r2, [sp, #28]
 80071b2:	e014      	b.n	80071de <_vfiprintf_r+0x13a>
 80071b4:	eba0 0308 	sub.w	r3, r0, r8
 80071b8:	fa09 f303 	lsl.w	r3, r9, r3
 80071bc:	4313      	orrs	r3, r2
 80071be:	9304      	str	r3, [sp, #16]
 80071c0:	46a2      	mov	sl, r4
 80071c2:	e7d2      	b.n	800716a <_vfiprintf_r+0xc6>
 80071c4:	9b03      	ldr	r3, [sp, #12]
 80071c6:	1d19      	adds	r1, r3, #4
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	9103      	str	r1, [sp, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	bfbb      	ittet	lt
 80071d0:	425b      	neglt	r3, r3
 80071d2:	f042 0202 	orrlt.w	r2, r2, #2
 80071d6:	9307      	strge	r3, [sp, #28]
 80071d8:	9307      	strlt	r3, [sp, #28]
 80071da:	bfb8      	it	lt
 80071dc:	9204      	strlt	r2, [sp, #16]
 80071de:	7823      	ldrb	r3, [r4, #0]
 80071e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80071e2:	d10a      	bne.n	80071fa <_vfiprintf_r+0x156>
 80071e4:	7863      	ldrb	r3, [r4, #1]
 80071e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80071e8:	d132      	bne.n	8007250 <_vfiprintf_r+0x1ac>
 80071ea:	9b03      	ldr	r3, [sp, #12]
 80071ec:	1d1a      	adds	r2, r3, #4
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	9203      	str	r2, [sp, #12]
 80071f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80071f6:	3402      	adds	r4, #2
 80071f8:	9305      	str	r3, [sp, #20]
 80071fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80072d0 <_vfiprintf_r+0x22c>
 80071fe:	7821      	ldrb	r1, [r4, #0]
 8007200:	2203      	movs	r2, #3
 8007202:	4650      	mov	r0, sl
 8007204:	f7f9 f80c 	bl	8000220 <memchr>
 8007208:	b138      	cbz	r0, 800721a <_vfiprintf_r+0x176>
 800720a:	9b04      	ldr	r3, [sp, #16]
 800720c:	eba0 000a 	sub.w	r0, r0, sl
 8007210:	2240      	movs	r2, #64	@ 0x40
 8007212:	4082      	lsls	r2, r0
 8007214:	4313      	orrs	r3, r2
 8007216:	3401      	adds	r4, #1
 8007218:	9304      	str	r3, [sp, #16]
 800721a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800721e:	4829      	ldr	r0, [pc, #164]	@ (80072c4 <_vfiprintf_r+0x220>)
 8007220:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007224:	2206      	movs	r2, #6
 8007226:	f7f8 fffb 	bl	8000220 <memchr>
 800722a:	2800      	cmp	r0, #0
 800722c:	d03f      	beq.n	80072ae <_vfiprintf_r+0x20a>
 800722e:	4b26      	ldr	r3, [pc, #152]	@ (80072c8 <_vfiprintf_r+0x224>)
 8007230:	bb1b      	cbnz	r3, 800727a <_vfiprintf_r+0x1d6>
 8007232:	9b03      	ldr	r3, [sp, #12]
 8007234:	3307      	adds	r3, #7
 8007236:	f023 0307 	bic.w	r3, r3, #7
 800723a:	3308      	adds	r3, #8
 800723c:	9303      	str	r3, [sp, #12]
 800723e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007240:	443b      	add	r3, r7
 8007242:	9309      	str	r3, [sp, #36]	@ 0x24
 8007244:	e76a      	b.n	800711c <_vfiprintf_r+0x78>
 8007246:	fb0c 3202 	mla	r2, ip, r2, r3
 800724a:	460c      	mov	r4, r1
 800724c:	2001      	movs	r0, #1
 800724e:	e7a8      	b.n	80071a2 <_vfiprintf_r+0xfe>
 8007250:	2300      	movs	r3, #0
 8007252:	3401      	adds	r4, #1
 8007254:	9305      	str	r3, [sp, #20]
 8007256:	4619      	mov	r1, r3
 8007258:	f04f 0c0a 	mov.w	ip, #10
 800725c:	4620      	mov	r0, r4
 800725e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007262:	3a30      	subs	r2, #48	@ 0x30
 8007264:	2a09      	cmp	r2, #9
 8007266:	d903      	bls.n	8007270 <_vfiprintf_r+0x1cc>
 8007268:	2b00      	cmp	r3, #0
 800726a:	d0c6      	beq.n	80071fa <_vfiprintf_r+0x156>
 800726c:	9105      	str	r1, [sp, #20]
 800726e:	e7c4      	b.n	80071fa <_vfiprintf_r+0x156>
 8007270:	fb0c 2101 	mla	r1, ip, r1, r2
 8007274:	4604      	mov	r4, r0
 8007276:	2301      	movs	r3, #1
 8007278:	e7f0      	b.n	800725c <_vfiprintf_r+0x1b8>
 800727a:	ab03      	add	r3, sp, #12
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	462a      	mov	r2, r5
 8007280:	4b12      	ldr	r3, [pc, #72]	@ (80072cc <_vfiprintf_r+0x228>)
 8007282:	a904      	add	r1, sp, #16
 8007284:	4630      	mov	r0, r6
 8007286:	f7fe fb67 	bl	8005958 <_printf_float>
 800728a:	4607      	mov	r7, r0
 800728c:	1c78      	adds	r0, r7, #1
 800728e:	d1d6      	bne.n	800723e <_vfiprintf_r+0x19a>
 8007290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007292:	07d9      	lsls	r1, r3, #31
 8007294:	d405      	bmi.n	80072a2 <_vfiprintf_r+0x1fe>
 8007296:	89ab      	ldrh	r3, [r5, #12]
 8007298:	059a      	lsls	r2, r3, #22
 800729a:	d402      	bmi.n	80072a2 <_vfiprintf_r+0x1fe>
 800729c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800729e:	f7ff f877 	bl	8006390 <__retarget_lock_release_recursive>
 80072a2:	89ab      	ldrh	r3, [r5, #12]
 80072a4:	065b      	lsls	r3, r3, #25
 80072a6:	f53f af1f 	bmi.w	80070e8 <_vfiprintf_r+0x44>
 80072aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072ac:	e71e      	b.n	80070ec <_vfiprintf_r+0x48>
 80072ae:	ab03      	add	r3, sp, #12
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	462a      	mov	r2, r5
 80072b4:	4b05      	ldr	r3, [pc, #20]	@ (80072cc <_vfiprintf_r+0x228>)
 80072b6:	a904      	add	r1, sp, #16
 80072b8:	4630      	mov	r0, r6
 80072ba:	f7fe fde5 	bl	8005e88 <_printf_i>
 80072be:	e7e4      	b.n	800728a <_vfiprintf_r+0x1e6>
 80072c0:	080083e9 	.word	0x080083e9
 80072c4:	080083f3 	.word	0x080083f3
 80072c8:	08005959 	.word	0x08005959
 80072cc:	0800707f 	.word	0x0800707f
 80072d0:	080083ef 	.word	0x080083ef

080072d4 <malloc>:
 80072d4:	4b02      	ldr	r3, [pc, #8]	@ (80072e0 <malloc+0xc>)
 80072d6:	4601      	mov	r1, r0
 80072d8:	6818      	ldr	r0, [r3, #0]
 80072da:	f000 b825 	b.w	8007328 <_malloc_r>
 80072de:	bf00      	nop
 80072e0:	20000018 	.word	0x20000018

080072e4 <sbrk_aligned>:
 80072e4:	b570      	push	{r4, r5, r6, lr}
 80072e6:	4e0f      	ldr	r6, [pc, #60]	@ (8007324 <sbrk_aligned+0x40>)
 80072e8:	460c      	mov	r4, r1
 80072ea:	6831      	ldr	r1, [r6, #0]
 80072ec:	4605      	mov	r5, r0
 80072ee:	b911      	cbnz	r1, 80072f6 <sbrk_aligned+0x12>
 80072f0:	f000 fe3a 	bl	8007f68 <_sbrk_r>
 80072f4:	6030      	str	r0, [r6, #0]
 80072f6:	4621      	mov	r1, r4
 80072f8:	4628      	mov	r0, r5
 80072fa:	f000 fe35 	bl	8007f68 <_sbrk_r>
 80072fe:	1c43      	adds	r3, r0, #1
 8007300:	d103      	bne.n	800730a <sbrk_aligned+0x26>
 8007302:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007306:	4620      	mov	r0, r4
 8007308:	bd70      	pop	{r4, r5, r6, pc}
 800730a:	1cc4      	adds	r4, r0, #3
 800730c:	f024 0403 	bic.w	r4, r4, #3
 8007310:	42a0      	cmp	r0, r4
 8007312:	d0f8      	beq.n	8007306 <sbrk_aligned+0x22>
 8007314:	1a21      	subs	r1, r4, r0
 8007316:	4628      	mov	r0, r5
 8007318:	f000 fe26 	bl	8007f68 <_sbrk_r>
 800731c:	3001      	adds	r0, #1
 800731e:	d1f2      	bne.n	8007306 <sbrk_aligned+0x22>
 8007320:	e7ef      	b.n	8007302 <sbrk_aligned+0x1e>
 8007322:	bf00      	nop
 8007324:	20000524 	.word	0x20000524

08007328 <_malloc_r>:
 8007328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800732c:	1ccd      	adds	r5, r1, #3
 800732e:	f025 0503 	bic.w	r5, r5, #3
 8007332:	3508      	adds	r5, #8
 8007334:	2d0c      	cmp	r5, #12
 8007336:	bf38      	it	cc
 8007338:	250c      	movcc	r5, #12
 800733a:	2d00      	cmp	r5, #0
 800733c:	4606      	mov	r6, r0
 800733e:	db01      	blt.n	8007344 <_malloc_r+0x1c>
 8007340:	42a9      	cmp	r1, r5
 8007342:	d904      	bls.n	800734e <_malloc_r+0x26>
 8007344:	230c      	movs	r3, #12
 8007346:	6033      	str	r3, [r6, #0]
 8007348:	2000      	movs	r0, #0
 800734a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800734e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007424 <_malloc_r+0xfc>
 8007352:	f000 f915 	bl	8007580 <__malloc_lock>
 8007356:	f8d8 3000 	ldr.w	r3, [r8]
 800735a:	461c      	mov	r4, r3
 800735c:	bb44      	cbnz	r4, 80073b0 <_malloc_r+0x88>
 800735e:	4629      	mov	r1, r5
 8007360:	4630      	mov	r0, r6
 8007362:	f7ff ffbf 	bl	80072e4 <sbrk_aligned>
 8007366:	1c43      	adds	r3, r0, #1
 8007368:	4604      	mov	r4, r0
 800736a:	d158      	bne.n	800741e <_malloc_r+0xf6>
 800736c:	f8d8 4000 	ldr.w	r4, [r8]
 8007370:	4627      	mov	r7, r4
 8007372:	2f00      	cmp	r7, #0
 8007374:	d143      	bne.n	80073fe <_malloc_r+0xd6>
 8007376:	2c00      	cmp	r4, #0
 8007378:	d04b      	beq.n	8007412 <_malloc_r+0xea>
 800737a:	6823      	ldr	r3, [r4, #0]
 800737c:	4639      	mov	r1, r7
 800737e:	4630      	mov	r0, r6
 8007380:	eb04 0903 	add.w	r9, r4, r3
 8007384:	f000 fdf0 	bl	8007f68 <_sbrk_r>
 8007388:	4581      	cmp	r9, r0
 800738a:	d142      	bne.n	8007412 <_malloc_r+0xea>
 800738c:	6821      	ldr	r1, [r4, #0]
 800738e:	1a6d      	subs	r5, r5, r1
 8007390:	4629      	mov	r1, r5
 8007392:	4630      	mov	r0, r6
 8007394:	f7ff ffa6 	bl	80072e4 <sbrk_aligned>
 8007398:	3001      	adds	r0, #1
 800739a:	d03a      	beq.n	8007412 <_malloc_r+0xea>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	442b      	add	r3, r5
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	f8d8 3000 	ldr.w	r3, [r8]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	bb62      	cbnz	r2, 8007404 <_malloc_r+0xdc>
 80073aa:	f8c8 7000 	str.w	r7, [r8]
 80073ae:	e00f      	b.n	80073d0 <_malloc_r+0xa8>
 80073b0:	6822      	ldr	r2, [r4, #0]
 80073b2:	1b52      	subs	r2, r2, r5
 80073b4:	d420      	bmi.n	80073f8 <_malloc_r+0xd0>
 80073b6:	2a0b      	cmp	r2, #11
 80073b8:	d917      	bls.n	80073ea <_malloc_r+0xc2>
 80073ba:	1961      	adds	r1, r4, r5
 80073bc:	42a3      	cmp	r3, r4
 80073be:	6025      	str	r5, [r4, #0]
 80073c0:	bf18      	it	ne
 80073c2:	6059      	strne	r1, [r3, #4]
 80073c4:	6863      	ldr	r3, [r4, #4]
 80073c6:	bf08      	it	eq
 80073c8:	f8c8 1000 	streq.w	r1, [r8]
 80073cc:	5162      	str	r2, [r4, r5]
 80073ce:	604b      	str	r3, [r1, #4]
 80073d0:	4630      	mov	r0, r6
 80073d2:	f000 f8db 	bl	800758c <__malloc_unlock>
 80073d6:	f104 000b 	add.w	r0, r4, #11
 80073da:	1d23      	adds	r3, r4, #4
 80073dc:	f020 0007 	bic.w	r0, r0, #7
 80073e0:	1ac2      	subs	r2, r0, r3
 80073e2:	bf1c      	itt	ne
 80073e4:	1a1b      	subne	r3, r3, r0
 80073e6:	50a3      	strne	r3, [r4, r2]
 80073e8:	e7af      	b.n	800734a <_malloc_r+0x22>
 80073ea:	6862      	ldr	r2, [r4, #4]
 80073ec:	42a3      	cmp	r3, r4
 80073ee:	bf0c      	ite	eq
 80073f0:	f8c8 2000 	streq.w	r2, [r8]
 80073f4:	605a      	strne	r2, [r3, #4]
 80073f6:	e7eb      	b.n	80073d0 <_malloc_r+0xa8>
 80073f8:	4623      	mov	r3, r4
 80073fa:	6864      	ldr	r4, [r4, #4]
 80073fc:	e7ae      	b.n	800735c <_malloc_r+0x34>
 80073fe:	463c      	mov	r4, r7
 8007400:	687f      	ldr	r7, [r7, #4]
 8007402:	e7b6      	b.n	8007372 <_malloc_r+0x4a>
 8007404:	461a      	mov	r2, r3
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	42a3      	cmp	r3, r4
 800740a:	d1fb      	bne.n	8007404 <_malloc_r+0xdc>
 800740c:	2300      	movs	r3, #0
 800740e:	6053      	str	r3, [r2, #4]
 8007410:	e7de      	b.n	80073d0 <_malloc_r+0xa8>
 8007412:	230c      	movs	r3, #12
 8007414:	6033      	str	r3, [r6, #0]
 8007416:	4630      	mov	r0, r6
 8007418:	f000 f8b8 	bl	800758c <__malloc_unlock>
 800741c:	e794      	b.n	8007348 <_malloc_r+0x20>
 800741e:	6005      	str	r5, [r0, #0]
 8007420:	e7d6      	b.n	80073d0 <_malloc_r+0xa8>
 8007422:	bf00      	nop
 8007424:	20000528 	.word	0x20000528

08007428 <__sflush_r>:
 8007428:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800742c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007430:	0716      	lsls	r6, r2, #28
 8007432:	4605      	mov	r5, r0
 8007434:	460c      	mov	r4, r1
 8007436:	d454      	bmi.n	80074e2 <__sflush_r+0xba>
 8007438:	684b      	ldr	r3, [r1, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	dc02      	bgt.n	8007444 <__sflush_r+0x1c>
 800743e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007440:	2b00      	cmp	r3, #0
 8007442:	dd48      	ble.n	80074d6 <__sflush_r+0xae>
 8007444:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007446:	2e00      	cmp	r6, #0
 8007448:	d045      	beq.n	80074d6 <__sflush_r+0xae>
 800744a:	2300      	movs	r3, #0
 800744c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007450:	682f      	ldr	r7, [r5, #0]
 8007452:	6a21      	ldr	r1, [r4, #32]
 8007454:	602b      	str	r3, [r5, #0]
 8007456:	d030      	beq.n	80074ba <__sflush_r+0x92>
 8007458:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	0759      	lsls	r1, r3, #29
 800745e:	d505      	bpl.n	800746c <__sflush_r+0x44>
 8007460:	6863      	ldr	r3, [r4, #4]
 8007462:	1ad2      	subs	r2, r2, r3
 8007464:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007466:	b10b      	cbz	r3, 800746c <__sflush_r+0x44>
 8007468:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800746a:	1ad2      	subs	r2, r2, r3
 800746c:	2300      	movs	r3, #0
 800746e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007470:	6a21      	ldr	r1, [r4, #32]
 8007472:	4628      	mov	r0, r5
 8007474:	47b0      	blx	r6
 8007476:	1c43      	adds	r3, r0, #1
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	d106      	bne.n	800748a <__sflush_r+0x62>
 800747c:	6829      	ldr	r1, [r5, #0]
 800747e:	291d      	cmp	r1, #29
 8007480:	d82b      	bhi.n	80074da <__sflush_r+0xb2>
 8007482:	4a2a      	ldr	r2, [pc, #168]	@ (800752c <__sflush_r+0x104>)
 8007484:	40ca      	lsrs	r2, r1
 8007486:	07d6      	lsls	r6, r2, #31
 8007488:	d527      	bpl.n	80074da <__sflush_r+0xb2>
 800748a:	2200      	movs	r2, #0
 800748c:	6062      	str	r2, [r4, #4]
 800748e:	04d9      	lsls	r1, r3, #19
 8007490:	6922      	ldr	r2, [r4, #16]
 8007492:	6022      	str	r2, [r4, #0]
 8007494:	d504      	bpl.n	80074a0 <__sflush_r+0x78>
 8007496:	1c42      	adds	r2, r0, #1
 8007498:	d101      	bne.n	800749e <__sflush_r+0x76>
 800749a:	682b      	ldr	r3, [r5, #0]
 800749c:	b903      	cbnz	r3, 80074a0 <__sflush_r+0x78>
 800749e:	6560      	str	r0, [r4, #84]	@ 0x54
 80074a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074a2:	602f      	str	r7, [r5, #0]
 80074a4:	b1b9      	cbz	r1, 80074d6 <__sflush_r+0xae>
 80074a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074aa:	4299      	cmp	r1, r3
 80074ac:	d002      	beq.n	80074b4 <__sflush_r+0x8c>
 80074ae:	4628      	mov	r0, r5
 80074b0:	f000 fdde 	bl	8008070 <_free_r>
 80074b4:	2300      	movs	r3, #0
 80074b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80074b8:	e00d      	b.n	80074d6 <__sflush_r+0xae>
 80074ba:	2301      	movs	r3, #1
 80074bc:	4628      	mov	r0, r5
 80074be:	47b0      	blx	r6
 80074c0:	4602      	mov	r2, r0
 80074c2:	1c50      	adds	r0, r2, #1
 80074c4:	d1c9      	bne.n	800745a <__sflush_r+0x32>
 80074c6:	682b      	ldr	r3, [r5, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0c6      	beq.n	800745a <__sflush_r+0x32>
 80074cc:	2b1d      	cmp	r3, #29
 80074ce:	d001      	beq.n	80074d4 <__sflush_r+0xac>
 80074d0:	2b16      	cmp	r3, #22
 80074d2:	d11e      	bne.n	8007512 <__sflush_r+0xea>
 80074d4:	602f      	str	r7, [r5, #0]
 80074d6:	2000      	movs	r0, #0
 80074d8:	e022      	b.n	8007520 <__sflush_r+0xf8>
 80074da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074de:	b21b      	sxth	r3, r3
 80074e0:	e01b      	b.n	800751a <__sflush_r+0xf2>
 80074e2:	690f      	ldr	r7, [r1, #16]
 80074e4:	2f00      	cmp	r7, #0
 80074e6:	d0f6      	beq.n	80074d6 <__sflush_r+0xae>
 80074e8:	0793      	lsls	r3, r2, #30
 80074ea:	680e      	ldr	r6, [r1, #0]
 80074ec:	bf08      	it	eq
 80074ee:	694b      	ldreq	r3, [r1, #20]
 80074f0:	600f      	str	r7, [r1, #0]
 80074f2:	bf18      	it	ne
 80074f4:	2300      	movne	r3, #0
 80074f6:	eba6 0807 	sub.w	r8, r6, r7
 80074fa:	608b      	str	r3, [r1, #8]
 80074fc:	f1b8 0f00 	cmp.w	r8, #0
 8007500:	dde9      	ble.n	80074d6 <__sflush_r+0xae>
 8007502:	6a21      	ldr	r1, [r4, #32]
 8007504:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007506:	4643      	mov	r3, r8
 8007508:	463a      	mov	r2, r7
 800750a:	4628      	mov	r0, r5
 800750c:	47b0      	blx	r6
 800750e:	2800      	cmp	r0, #0
 8007510:	dc08      	bgt.n	8007524 <__sflush_r+0xfc>
 8007512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800751a:	81a3      	strh	r3, [r4, #12]
 800751c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007524:	4407      	add	r7, r0
 8007526:	eba8 0800 	sub.w	r8, r8, r0
 800752a:	e7e7      	b.n	80074fc <__sflush_r+0xd4>
 800752c:	20400001 	.word	0x20400001

08007530 <_fflush_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	690b      	ldr	r3, [r1, #16]
 8007534:	4605      	mov	r5, r0
 8007536:	460c      	mov	r4, r1
 8007538:	b913      	cbnz	r3, 8007540 <_fflush_r+0x10>
 800753a:	2500      	movs	r5, #0
 800753c:	4628      	mov	r0, r5
 800753e:	bd38      	pop	{r3, r4, r5, pc}
 8007540:	b118      	cbz	r0, 800754a <_fflush_r+0x1a>
 8007542:	6a03      	ldr	r3, [r0, #32]
 8007544:	b90b      	cbnz	r3, 800754a <_fflush_r+0x1a>
 8007546:	f7fe fe49 	bl	80061dc <__sinit>
 800754a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0f3      	beq.n	800753a <_fflush_r+0xa>
 8007552:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007554:	07d0      	lsls	r0, r2, #31
 8007556:	d404      	bmi.n	8007562 <_fflush_r+0x32>
 8007558:	0599      	lsls	r1, r3, #22
 800755a:	d402      	bmi.n	8007562 <_fflush_r+0x32>
 800755c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800755e:	f7fe ff16 	bl	800638e <__retarget_lock_acquire_recursive>
 8007562:	4628      	mov	r0, r5
 8007564:	4621      	mov	r1, r4
 8007566:	f7ff ff5f 	bl	8007428 <__sflush_r>
 800756a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800756c:	07da      	lsls	r2, r3, #31
 800756e:	4605      	mov	r5, r0
 8007570:	d4e4      	bmi.n	800753c <_fflush_r+0xc>
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	059b      	lsls	r3, r3, #22
 8007576:	d4e1      	bmi.n	800753c <_fflush_r+0xc>
 8007578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800757a:	f7fe ff09 	bl	8006390 <__retarget_lock_release_recursive>
 800757e:	e7dd      	b.n	800753c <_fflush_r+0xc>

08007580 <__malloc_lock>:
 8007580:	4801      	ldr	r0, [pc, #4]	@ (8007588 <__malloc_lock+0x8>)
 8007582:	f7fe bf04 	b.w	800638e <__retarget_lock_acquire_recursive>
 8007586:	bf00      	nop
 8007588:	20000520 	.word	0x20000520

0800758c <__malloc_unlock>:
 800758c:	4801      	ldr	r0, [pc, #4]	@ (8007594 <__malloc_unlock+0x8>)
 800758e:	f7fe beff 	b.w	8006390 <__retarget_lock_release_recursive>
 8007592:	bf00      	nop
 8007594:	20000520 	.word	0x20000520

08007598 <_Balloc>:
 8007598:	b570      	push	{r4, r5, r6, lr}
 800759a:	69c6      	ldr	r6, [r0, #28]
 800759c:	4604      	mov	r4, r0
 800759e:	460d      	mov	r5, r1
 80075a0:	b976      	cbnz	r6, 80075c0 <_Balloc+0x28>
 80075a2:	2010      	movs	r0, #16
 80075a4:	f7ff fe96 	bl	80072d4 <malloc>
 80075a8:	4602      	mov	r2, r0
 80075aa:	61e0      	str	r0, [r4, #28]
 80075ac:	b920      	cbnz	r0, 80075b8 <_Balloc+0x20>
 80075ae:	4b18      	ldr	r3, [pc, #96]	@ (8007610 <_Balloc+0x78>)
 80075b0:	4818      	ldr	r0, [pc, #96]	@ (8007614 <_Balloc+0x7c>)
 80075b2:	216b      	movs	r1, #107	@ 0x6b
 80075b4:	f000 fd2a 	bl	800800c <__assert_func>
 80075b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075bc:	6006      	str	r6, [r0, #0]
 80075be:	60c6      	str	r6, [r0, #12]
 80075c0:	69e6      	ldr	r6, [r4, #28]
 80075c2:	68f3      	ldr	r3, [r6, #12]
 80075c4:	b183      	cbz	r3, 80075e8 <_Balloc+0x50>
 80075c6:	69e3      	ldr	r3, [r4, #28]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075ce:	b9b8      	cbnz	r0, 8007600 <_Balloc+0x68>
 80075d0:	2101      	movs	r1, #1
 80075d2:	fa01 f605 	lsl.w	r6, r1, r5
 80075d6:	1d72      	adds	r2, r6, #5
 80075d8:	0092      	lsls	r2, r2, #2
 80075da:	4620      	mov	r0, r4
 80075dc:	f000 fd34 	bl	8008048 <_calloc_r>
 80075e0:	b160      	cbz	r0, 80075fc <_Balloc+0x64>
 80075e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075e6:	e00e      	b.n	8007606 <_Balloc+0x6e>
 80075e8:	2221      	movs	r2, #33	@ 0x21
 80075ea:	2104      	movs	r1, #4
 80075ec:	4620      	mov	r0, r4
 80075ee:	f000 fd2b 	bl	8008048 <_calloc_r>
 80075f2:	69e3      	ldr	r3, [r4, #28]
 80075f4:	60f0      	str	r0, [r6, #12]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1e4      	bne.n	80075c6 <_Balloc+0x2e>
 80075fc:	2000      	movs	r0, #0
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	6802      	ldr	r2, [r0, #0]
 8007602:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007606:	2300      	movs	r3, #0
 8007608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800760c:	e7f7      	b.n	80075fe <_Balloc+0x66>
 800760e:	bf00      	nop
 8007610:	08008369 	.word	0x08008369
 8007614:	080083fa 	.word	0x080083fa

08007618 <_Bfree>:
 8007618:	b570      	push	{r4, r5, r6, lr}
 800761a:	69c6      	ldr	r6, [r0, #28]
 800761c:	4605      	mov	r5, r0
 800761e:	460c      	mov	r4, r1
 8007620:	b976      	cbnz	r6, 8007640 <_Bfree+0x28>
 8007622:	2010      	movs	r0, #16
 8007624:	f7ff fe56 	bl	80072d4 <malloc>
 8007628:	4602      	mov	r2, r0
 800762a:	61e8      	str	r0, [r5, #28]
 800762c:	b920      	cbnz	r0, 8007638 <_Bfree+0x20>
 800762e:	4b09      	ldr	r3, [pc, #36]	@ (8007654 <_Bfree+0x3c>)
 8007630:	4809      	ldr	r0, [pc, #36]	@ (8007658 <_Bfree+0x40>)
 8007632:	218f      	movs	r1, #143	@ 0x8f
 8007634:	f000 fcea 	bl	800800c <__assert_func>
 8007638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800763c:	6006      	str	r6, [r0, #0]
 800763e:	60c6      	str	r6, [r0, #12]
 8007640:	b13c      	cbz	r4, 8007652 <_Bfree+0x3a>
 8007642:	69eb      	ldr	r3, [r5, #28]
 8007644:	6862      	ldr	r2, [r4, #4]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800764c:	6021      	str	r1, [r4, #0]
 800764e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007652:	bd70      	pop	{r4, r5, r6, pc}
 8007654:	08008369 	.word	0x08008369
 8007658:	080083fa 	.word	0x080083fa

0800765c <__multadd>:
 800765c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007660:	690d      	ldr	r5, [r1, #16]
 8007662:	4607      	mov	r7, r0
 8007664:	460c      	mov	r4, r1
 8007666:	461e      	mov	r6, r3
 8007668:	f101 0c14 	add.w	ip, r1, #20
 800766c:	2000      	movs	r0, #0
 800766e:	f8dc 3000 	ldr.w	r3, [ip]
 8007672:	b299      	uxth	r1, r3
 8007674:	fb02 6101 	mla	r1, r2, r1, r6
 8007678:	0c1e      	lsrs	r6, r3, #16
 800767a:	0c0b      	lsrs	r3, r1, #16
 800767c:	fb02 3306 	mla	r3, r2, r6, r3
 8007680:	b289      	uxth	r1, r1
 8007682:	3001      	adds	r0, #1
 8007684:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007688:	4285      	cmp	r5, r0
 800768a:	f84c 1b04 	str.w	r1, [ip], #4
 800768e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007692:	dcec      	bgt.n	800766e <__multadd+0x12>
 8007694:	b30e      	cbz	r6, 80076da <__multadd+0x7e>
 8007696:	68a3      	ldr	r3, [r4, #8]
 8007698:	42ab      	cmp	r3, r5
 800769a:	dc19      	bgt.n	80076d0 <__multadd+0x74>
 800769c:	6861      	ldr	r1, [r4, #4]
 800769e:	4638      	mov	r0, r7
 80076a0:	3101      	adds	r1, #1
 80076a2:	f7ff ff79 	bl	8007598 <_Balloc>
 80076a6:	4680      	mov	r8, r0
 80076a8:	b928      	cbnz	r0, 80076b6 <__multadd+0x5a>
 80076aa:	4602      	mov	r2, r0
 80076ac:	4b0c      	ldr	r3, [pc, #48]	@ (80076e0 <__multadd+0x84>)
 80076ae:	480d      	ldr	r0, [pc, #52]	@ (80076e4 <__multadd+0x88>)
 80076b0:	21ba      	movs	r1, #186	@ 0xba
 80076b2:	f000 fcab 	bl	800800c <__assert_func>
 80076b6:	6922      	ldr	r2, [r4, #16]
 80076b8:	3202      	adds	r2, #2
 80076ba:	f104 010c 	add.w	r1, r4, #12
 80076be:	0092      	lsls	r2, r2, #2
 80076c0:	300c      	adds	r0, #12
 80076c2:	f000 fc95 	bl	8007ff0 <memcpy>
 80076c6:	4621      	mov	r1, r4
 80076c8:	4638      	mov	r0, r7
 80076ca:	f7ff ffa5 	bl	8007618 <_Bfree>
 80076ce:	4644      	mov	r4, r8
 80076d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076d4:	3501      	adds	r5, #1
 80076d6:	615e      	str	r6, [r3, #20]
 80076d8:	6125      	str	r5, [r4, #16]
 80076da:	4620      	mov	r0, r4
 80076dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e0:	080083d8 	.word	0x080083d8
 80076e4:	080083fa 	.word	0x080083fa

080076e8 <__hi0bits>:
 80076e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80076ec:	4603      	mov	r3, r0
 80076ee:	bf36      	itet	cc
 80076f0:	0403      	lslcc	r3, r0, #16
 80076f2:	2000      	movcs	r0, #0
 80076f4:	2010      	movcc	r0, #16
 80076f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076fa:	bf3c      	itt	cc
 80076fc:	021b      	lslcc	r3, r3, #8
 80076fe:	3008      	addcc	r0, #8
 8007700:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007704:	bf3c      	itt	cc
 8007706:	011b      	lslcc	r3, r3, #4
 8007708:	3004      	addcc	r0, #4
 800770a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800770e:	bf3c      	itt	cc
 8007710:	009b      	lslcc	r3, r3, #2
 8007712:	3002      	addcc	r0, #2
 8007714:	2b00      	cmp	r3, #0
 8007716:	db05      	blt.n	8007724 <__hi0bits+0x3c>
 8007718:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800771c:	f100 0001 	add.w	r0, r0, #1
 8007720:	bf08      	it	eq
 8007722:	2020      	moveq	r0, #32
 8007724:	4770      	bx	lr

08007726 <__lo0bits>:
 8007726:	6803      	ldr	r3, [r0, #0]
 8007728:	4602      	mov	r2, r0
 800772a:	f013 0007 	ands.w	r0, r3, #7
 800772e:	d00b      	beq.n	8007748 <__lo0bits+0x22>
 8007730:	07d9      	lsls	r1, r3, #31
 8007732:	d421      	bmi.n	8007778 <__lo0bits+0x52>
 8007734:	0798      	lsls	r0, r3, #30
 8007736:	bf49      	itett	mi
 8007738:	085b      	lsrmi	r3, r3, #1
 800773a:	089b      	lsrpl	r3, r3, #2
 800773c:	2001      	movmi	r0, #1
 800773e:	6013      	strmi	r3, [r2, #0]
 8007740:	bf5c      	itt	pl
 8007742:	6013      	strpl	r3, [r2, #0]
 8007744:	2002      	movpl	r0, #2
 8007746:	4770      	bx	lr
 8007748:	b299      	uxth	r1, r3
 800774a:	b909      	cbnz	r1, 8007750 <__lo0bits+0x2a>
 800774c:	0c1b      	lsrs	r3, r3, #16
 800774e:	2010      	movs	r0, #16
 8007750:	b2d9      	uxtb	r1, r3
 8007752:	b909      	cbnz	r1, 8007758 <__lo0bits+0x32>
 8007754:	3008      	adds	r0, #8
 8007756:	0a1b      	lsrs	r3, r3, #8
 8007758:	0719      	lsls	r1, r3, #28
 800775a:	bf04      	itt	eq
 800775c:	091b      	lsreq	r3, r3, #4
 800775e:	3004      	addeq	r0, #4
 8007760:	0799      	lsls	r1, r3, #30
 8007762:	bf04      	itt	eq
 8007764:	089b      	lsreq	r3, r3, #2
 8007766:	3002      	addeq	r0, #2
 8007768:	07d9      	lsls	r1, r3, #31
 800776a:	d403      	bmi.n	8007774 <__lo0bits+0x4e>
 800776c:	085b      	lsrs	r3, r3, #1
 800776e:	f100 0001 	add.w	r0, r0, #1
 8007772:	d003      	beq.n	800777c <__lo0bits+0x56>
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	4770      	bx	lr
 8007778:	2000      	movs	r0, #0
 800777a:	4770      	bx	lr
 800777c:	2020      	movs	r0, #32
 800777e:	4770      	bx	lr

08007780 <__i2b>:
 8007780:	b510      	push	{r4, lr}
 8007782:	460c      	mov	r4, r1
 8007784:	2101      	movs	r1, #1
 8007786:	f7ff ff07 	bl	8007598 <_Balloc>
 800778a:	4602      	mov	r2, r0
 800778c:	b928      	cbnz	r0, 800779a <__i2b+0x1a>
 800778e:	4b05      	ldr	r3, [pc, #20]	@ (80077a4 <__i2b+0x24>)
 8007790:	4805      	ldr	r0, [pc, #20]	@ (80077a8 <__i2b+0x28>)
 8007792:	f240 1145 	movw	r1, #325	@ 0x145
 8007796:	f000 fc39 	bl	800800c <__assert_func>
 800779a:	2301      	movs	r3, #1
 800779c:	6144      	str	r4, [r0, #20]
 800779e:	6103      	str	r3, [r0, #16]
 80077a0:	bd10      	pop	{r4, pc}
 80077a2:	bf00      	nop
 80077a4:	080083d8 	.word	0x080083d8
 80077a8:	080083fa 	.word	0x080083fa

080077ac <__multiply>:
 80077ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b0:	4617      	mov	r7, r2
 80077b2:	690a      	ldr	r2, [r1, #16]
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	bfa8      	it	ge
 80077ba:	463b      	movge	r3, r7
 80077bc:	4689      	mov	r9, r1
 80077be:	bfa4      	itt	ge
 80077c0:	460f      	movge	r7, r1
 80077c2:	4699      	movge	r9, r3
 80077c4:	693d      	ldr	r5, [r7, #16]
 80077c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	6879      	ldr	r1, [r7, #4]
 80077ce:	eb05 060a 	add.w	r6, r5, sl
 80077d2:	42b3      	cmp	r3, r6
 80077d4:	b085      	sub	sp, #20
 80077d6:	bfb8      	it	lt
 80077d8:	3101      	addlt	r1, #1
 80077da:	f7ff fedd 	bl	8007598 <_Balloc>
 80077de:	b930      	cbnz	r0, 80077ee <__multiply+0x42>
 80077e0:	4602      	mov	r2, r0
 80077e2:	4b41      	ldr	r3, [pc, #260]	@ (80078e8 <__multiply+0x13c>)
 80077e4:	4841      	ldr	r0, [pc, #260]	@ (80078ec <__multiply+0x140>)
 80077e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80077ea:	f000 fc0f 	bl	800800c <__assert_func>
 80077ee:	f100 0414 	add.w	r4, r0, #20
 80077f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80077f6:	4623      	mov	r3, r4
 80077f8:	2200      	movs	r2, #0
 80077fa:	4573      	cmp	r3, lr
 80077fc:	d320      	bcc.n	8007840 <__multiply+0x94>
 80077fe:	f107 0814 	add.w	r8, r7, #20
 8007802:	f109 0114 	add.w	r1, r9, #20
 8007806:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800780a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800780e:	9302      	str	r3, [sp, #8]
 8007810:	1beb      	subs	r3, r5, r7
 8007812:	3b15      	subs	r3, #21
 8007814:	f023 0303 	bic.w	r3, r3, #3
 8007818:	3304      	adds	r3, #4
 800781a:	3715      	adds	r7, #21
 800781c:	42bd      	cmp	r5, r7
 800781e:	bf38      	it	cc
 8007820:	2304      	movcc	r3, #4
 8007822:	9301      	str	r3, [sp, #4]
 8007824:	9b02      	ldr	r3, [sp, #8]
 8007826:	9103      	str	r1, [sp, #12]
 8007828:	428b      	cmp	r3, r1
 800782a:	d80c      	bhi.n	8007846 <__multiply+0x9a>
 800782c:	2e00      	cmp	r6, #0
 800782e:	dd03      	ble.n	8007838 <__multiply+0x8c>
 8007830:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007834:	2b00      	cmp	r3, #0
 8007836:	d055      	beq.n	80078e4 <__multiply+0x138>
 8007838:	6106      	str	r6, [r0, #16]
 800783a:	b005      	add	sp, #20
 800783c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007840:	f843 2b04 	str.w	r2, [r3], #4
 8007844:	e7d9      	b.n	80077fa <__multiply+0x4e>
 8007846:	f8b1 a000 	ldrh.w	sl, [r1]
 800784a:	f1ba 0f00 	cmp.w	sl, #0
 800784e:	d01f      	beq.n	8007890 <__multiply+0xe4>
 8007850:	46c4      	mov	ip, r8
 8007852:	46a1      	mov	r9, r4
 8007854:	2700      	movs	r7, #0
 8007856:	f85c 2b04 	ldr.w	r2, [ip], #4
 800785a:	f8d9 3000 	ldr.w	r3, [r9]
 800785e:	fa1f fb82 	uxth.w	fp, r2
 8007862:	b29b      	uxth	r3, r3
 8007864:	fb0a 330b 	mla	r3, sl, fp, r3
 8007868:	443b      	add	r3, r7
 800786a:	f8d9 7000 	ldr.w	r7, [r9]
 800786e:	0c12      	lsrs	r2, r2, #16
 8007870:	0c3f      	lsrs	r7, r7, #16
 8007872:	fb0a 7202 	mla	r2, sl, r2, r7
 8007876:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800787a:	b29b      	uxth	r3, r3
 800787c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007880:	4565      	cmp	r5, ip
 8007882:	f849 3b04 	str.w	r3, [r9], #4
 8007886:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800788a:	d8e4      	bhi.n	8007856 <__multiply+0xaa>
 800788c:	9b01      	ldr	r3, [sp, #4]
 800788e:	50e7      	str	r7, [r4, r3]
 8007890:	9b03      	ldr	r3, [sp, #12]
 8007892:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007896:	3104      	adds	r1, #4
 8007898:	f1b9 0f00 	cmp.w	r9, #0
 800789c:	d020      	beq.n	80078e0 <__multiply+0x134>
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	4647      	mov	r7, r8
 80078a2:	46a4      	mov	ip, r4
 80078a4:	f04f 0a00 	mov.w	sl, #0
 80078a8:	f8b7 b000 	ldrh.w	fp, [r7]
 80078ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80078b0:	fb09 220b 	mla	r2, r9, fp, r2
 80078b4:	4452      	add	r2, sl
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078bc:	f84c 3b04 	str.w	r3, [ip], #4
 80078c0:	f857 3b04 	ldr.w	r3, [r7], #4
 80078c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078c8:	f8bc 3000 	ldrh.w	r3, [ip]
 80078cc:	fb09 330a 	mla	r3, r9, sl, r3
 80078d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80078d4:	42bd      	cmp	r5, r7
 80078d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078da:	d8e5      	bhi.n	80078a8 <__multiply+0xfc>
 80078dc:	9a01      	ldr	r2, [sp, #4]
 80078de:	50a3      	str	r3, [r4, r2]
 80078e0:	3404      	adds	r4, #4
 80078e2:	e79f      	b.n	8007824 <__multiply+0x78>
 80078e4:	3e01      	subs	r6, #1
 80078e6:	e7a1      	b.n	800782c <__multiply+0x80>
 80078e8:	080083d8 	.word	0x080083d8
 80078ec:	080083fa 	.word	0x080083fa

080078f0 <__pow5mult>:
 80078f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f4:	4615      	mov	r5, r2
 80078f6:	f012 0203 	ands.w	r2, r2, #3
 80078fa:	4607      	mov	r7, r0
 80078fc:	460e      	mov	r6, r1
 80078fe:	d007      	beq.n	8007910 <__pow5mult+0x20>
 8007900:	4c25      	ldr	r4, [pc, #148]	@ (8007998 <__pow5mult+0xa8>)
 8007902:	3a01      	subs	r2, #1
 8007904:	2300      	movs	r3, #0
 8007906:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800790a:	f7ff fea7 	bl	800765c <__multadd>
 800790e:	4606      	mov	r6, r0
 8007910:	10ad      	asrs	r5, r5, #2
 8007912:	d03d      	beq.n	8007990 <__pow5mult+0xa0>
 8007914:	69fc      	ldr	r4, [r7, #28]
 8007916:	b97c      	cbnz	r4, 8007938 <__pow5mult+0x48>
 8007918:	2010      	movs	r0, #16
 800791a:	f7ff fcdb 	bl	80072d4 <malloc>
 800791e:	4602      	mov	r2, r0
 8007920:	61f8      	str	r0, [r7, #28]
 8007922:	b928      	cbnz	r0, 8007930 <__pow5mult+0x40>
 8007924:	4b1d      	ldr	r3, [pc, #116]	@ (800799c <__pow5mult+0xac>)
 8007926:	481e      	ldr	r0, [pc, #120]	@ (80079a0 <__pow5mult+0xb0>)
 8007928:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800792c:	f000 fb6e 	bl	800800c <__assert_func>
 8007930:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007934:	6004      	str	r4, [r0, #0]
 8007936:	60c4      	str	r4, [r0, #12]
 8007938:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800793c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007940:	b94c      	cbnz	r4, 8007956 <__pow5mult+0x66>
 8007942:	f240 2171 	movw	r1, #625	@ 0x271
 8007946:	4638      	mov	r0, r7
 8007948:	f7ff ff1a 	bl	8007780 <__i2b>
 800794c:	2300      	movs	r3, #0
 800794e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007952:	4604      	mov	r4, r0
 8007954:	6003      	str	r3, [r0, #0]
 8007956:	f04f 0900 	mov.w	r9, #0
 800795a:	07eb      	lsls	r3, r5, #31
 800795c:	d50a      	bpl.n	8007974 <__pow5mult+0x84>
 800795e:	4631      	mov	r1, r6
 8007960:	4622      	mov	r2, r4
 8007962:	4638      	mov	r0, r7
 8007964:	f7ff ff22 	bl	80077ac <__multiply>
 8007968:	4631      	mov	r1, r6
 800796a:	4680      	mov	r8, r0
 800796c:	4638      	mov	r0, r7
 800796e:	f7ff fe53 	bl	8007618 <_Bfree>
 8007972:	4646      	mov	r6, r8
 8007974:	106d      	asrs	r5, r5, #1
 8007976:	d00b      	beq.n	8007990 <__pow5mult+0xa0>
 8007978:	6820      	ldr	r0, [r4, #0]
 800797a:	b938      	cbnz	r0, 800798c <__pow5mult+0x9c>
 800797c:	4622      	mov	r2, r4
 800797e:	4621      	mov	r1, r4
 8007980:	4638      	mov	r0, r7
 8007982:	f7ff ff13 	bl	80077ac <__multiply>
 8007986:	6020      	str	r0, [r4, #0]
 8007988:	f8c0 9000 	str.w	r9, [r0]
 800798c:	4604      	mov	r4, r0
 800798e:	e7e4      	b.n	800795a <__pow5mult+0x6a>
 8007990:	4630      	mov	r0, r6
 8007992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007996:	bf00      	nop
 8007998:	0800849c 	.word	0x0800849c
 800799c:	08008369 	.word	0x08008369
 80079a0:	080083fa 	.word	0x080083fa

080079a4 <__lshift>:
 80079a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a8:	460c      	mov	r4, r1
 80079aa:	6849      	ldr	r1, [r1, #4]
 80079ac:	6923      	ldr	r3, [r4, #16]
 80079ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079b2:	68a3      	ldr	r3, [r4, #8]
 80079b4:	4607      	mov	r7, r0
 80079b6:	4691      	mov	r9, r2
 80079b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079bc:	f108 0601 	add.w	r6, r8, #1
 80079c0:	42b3      	cmp	r3, r6
 80079c2:	db0b      	blt.n	80079dc <__lshift+0x38>
 80079c4:	4638      	mov	r0, r7
 80079c6:	f7ff fde7 	bl	8007598 <_Balloc>
 80079ca:	4605      	mov	r5, r0
 80079cc:	b948      	cbnz	r0, 80079e2 <__lshift+0x3e>
 80079ce:	4602      	mov	r2, r0
 80079d0:	4b28      	ldr	r3, [pc, #160]	@ (8007a74 <__lshift+0xd0>)
 80079d2:	4829      	ldr	r0, [pc, #164]	@ (8007a78 <__lshift+0xd4>)
 80079d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80079d8:	f000 fb18 	bl	800800c <__assert_func>
 80079dc:	3101      	adds	r1, #1
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	e7ee      	b.n	80079c0 <__lshift+0x1c>
 80079e2:	2300      	movs	r3, #0
 80079e4:	f100 0114 	add.w	r1, r0, #20
 80079e8:	f100 0210 	add.w	r2, r0, #16
 80079ec:	4618      	mov	r0, r3
 80079ee:	4553      	cmp	r3, sl
 80079f0:	db33      	blt.n	8007a5a <__lshift+0xb6>
 80079f2:	6920      	ldr	r0, [r4, #16]
 80079f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079f8:	f104 0314 	add.w	r3, r4, #20
 80079fc:	f019 091f 	ands.w	r9, r9, #31
 8007a00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a08:	d02b      	beq.n	8007a62 <__lshift+0xbe>
 8007a0a:	f1c9 0e20 	rsb	lr, r9, #32
 8007a0e:	468a      	mov	sl, r1
 8007a10:	2200      	movs	r2, #0
 8007a12:	6818      	ldr	r0, [r3, #0]
 8007a14:	fa00 f009 	lsl.w	r0, r0, r9
 8007a18:	4310      	orrs	r0, r2
 8007a1a:	f84a 0b04 	str.w	r0, [sl], #4
 8007a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a22:	459c      	cmp	ip, r3
 8007a24:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a28:	d8f3      	bhi.n	8007a12 <__lshift+0x6e>
 8007a2a:	ebac 0304 	sub.w	r3, ip, r4
 8007a2e:	3b15      	subs	r3, #21
 8007a30:	f023 0303 	bic.w	r3, r3, #3
 8007a34:	3304      	adds	r3, #4
 8007a36:	f104 0015 	add.w	r0, r4, #21
 8007a3a:	4560      	cmp	r0, ip
 8007a3c:	bf88      	it	hi
 8007a3e:	2304      	movhi	r3, #4
 8007a40:	50ca      	str	r2, [r1, r3]
 8007a42:	b10a      	cbz	r2, 8007a48 <__lshift+0xa4>
 8007a44:	f108 0602 	add.w	r6, r8, #2
 8007a48:	3e01      	subs	r6, #1
 8007a4a:	4638      	mov	r0, r7
 8007a4c:	612e      	str	r6, [r5, #16]
 8007a4e:	4621      	mov	r1, r4
 8007a50:	f7ff fde2 	bl	8007618 <_Bfree>
 8007a54:	4628      	mov	r0, r5
 8007a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a5e:	3301      	adds	r3, #1
 8007a60:	e7c5      	b.n	80079ee <__lshift+0x4a>
 8007a62:	3904      	subs	r1, #4
 8007a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a68:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a6c:	459c      	cmp	ip, r3
 8007a6e:	d8f9      	bhi.n	8007a64 <__lshift+0xc0>
 8007a70:	e7ea      	b.n	8007a48 <__lshift+0xa4>
 8007a72:	bf00      	nop
 8007a74:	080083d8 	.word	0x080083d8
 8007a78:	080083fa 	.word	0x080083fa

08007a7c <__mcmp>:
 8007a7c:	690a      	ldr	r2, [r1, #16]
 8007a7e:	4603      	mov	r3, r0
 8007a80:	6900      	ldr	r0, [r0, #16]
 8007a82:	1a80      	subs	r0, r0, r2
 8007a84:	b530      	push	{r4, r5, lr}
 8007a86:	d10e      	bne.n	8007aa6 <__mcmp+0x2a>
 8007a88:	3314      	adds	r3, #20
 8007a8a:	3114      	adds	r1, #20
 8007a8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a9c:	4295      	cmp	r5, r2
 8007a9e:	d003      	beq.n	8007aa8 <__mcmp+0x2c>
 8007aa0:	d205      	bcs.n	8007aae <__mcmp+0x32>
 8007aa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007aa6:	bd30      	pop	{r4, r5, pc}
 8007aa8:	42a3      	cmp	r3, r4
 8007aaa:	d3f3      	bcc.n	8007a94 <__mcmp+0x18>
 8007aac:	e7fb      	b.n	8007aa6 <__mcmp+0x2a>
 8007aae:	2001      	movs	r0, #1
 8007ab0:	e7f9      	b.n	8007aa6 <__mcmp+0x2a>
	...

08007ab4 <__mdiff>:
 8007ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab8:	4689      	mov	r9, r1
 8007aba:	4606      	mov	r6, r0
 8007abc:	4611      	mov	r1, r2
 8007abe:	4648      	mov	r0, r9
 8007ac0:	4614      	mov	r4, r2
 8007ac2:	f7ff ffdb 	bl	8007a7c <__mcmp>
 8007ac6:	1e05      	subs	r5, r0, #0
 8007ac8:	d112      	bne.n	8007af0 <__mdiff+0x3c>
 8007aca:	4629      	mov	r1, r5
 8007acc:	4630      	mov	r0, r6
 8007ace:	f7ff fd63 	bl	8007598 <_Balloc>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	b928      	cbnz	r0, 8007ae2 <__mdiff+0x2e>
 8007ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8007bd4 <__mdiff+0x120>)
 8007ad8:	f240 2137 	movw	r1, #567	@ 0x237
 8007adc:	483e      	ldr	r0, [pc, #248]	@ (8007bd8 <__mdiff+0x124>)
 8007ade:	f000 fa95 	bl	800800c <__assert_func>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ae8:	4610      	mov	r0, r2
 8007aea:	b003      	add	sp, #12
 8007aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af0:	bfbc      	itt	lt
 8007af2:	464b      	movlt	r3, r9
 8007af4:	46a1      	movlt	r9, r4
 8007af6:	4630      	mov	r0, r6
 8007af8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007afc:	bfba      	itte	lt
 8007afe:	461c      	movlt	r4, r3
 8007b00:	2501      	movlt	r5, #1
 8007b02:	2500      	movge	r5, #0
 8007b04:	f7ff fd48 	bl	8007598 <_Balloc>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	b918      	cbnz	r0, 8007b14 <__mdiff+0x60>
 8007b0c:	4b31      	ldr	r3, [pc, #196]	@ (8007bd4 <__mdiff+0x120>)
 8007b0e:	f240 2145 	movw	r1, #581	@ 0x245
 8007b12:	e7e3      	b.n	8007adc <__mdiff+0x28>
 8007b14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007b18:	6926      	ldr	r6, [r4, #16]
 8007b1a:	60c5      	str	r5, [r0, #12]
 8007b1c:	f109 0310 	add.w	r3, r9, #16
 8007b20:	f109 0514 	add.w	r5, r9, #20
 8007b24:	f104 0e14 	add.w	lr, r4, #20
 8007b28:	f100 0b14 	add.w	fp, r0, #20
 8007b2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007b30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	46d9      	mov	r9, fp
 8007b38:	f04f 0c00 	mov.w	ip, #0
 8007b3c:	9b01      	ldr	r3, [sp, #4]
 8007b3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007b42:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007b46:	9301      	str	r3, [sp, #4]
 8007b48:	fa1f f38a 	uxth.w	r3, sl
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	b283      	uxth	r3, r0
 8007b50:	1acb      	subs	r3, r1, r3
 8007b52:	0c00      	lsrs	r0, r0, #16
 8007b54:	4463      	add	r3, ip
 8007b56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007b5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007b64:	4576      	cmp	r6, lr
 8007b66:	f849 3b04 	str.w	r3, [r9], #4
 8007b6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b6e:	d8e5      	bhi.n	8007b3c <__mdiff+0x88>
 8007b70:	1b33      	subs	r3, r6, r4
 8007b72:	3b15      	subs	r3, #21
 8007b74:	f023 0303 	bic.w	r3, r3, #3
 8007b78:	3415      	adds	r4, #21
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	42a6      	cmp	r6, r4
 8007b7e:	bf38      	it	cc
 8007b80:	2304      	movcc	r3, #4
 8007b82:	441d      	add	r5, r3
 8007b84:	445b      	add	r3, fp
 8007b86:	461e      	mov	r6, r3
 8007b88:	462c      	mov	r4, r5
 8007b8a:	4544      	cmp	r4, r8
 8007b8c:	d30e      	bcc.n	8007bac <__mdiff+0xf8>
 8007b8e:	f108 0103 	add.w	r1, r8, #3
 8007b92:	1b49      	subs	r1, r1, r5
 8007b94:	f021 0103 	bic.w	r1, r1, #3
 8007b98:	3d03      	subs	r5, #3
 8007b9a:	45a8      	cmp	r8, r5
 8007b9c:	bf38      	it	cc
 8007b9e:	2100      	movcc	r1, #0
 8007ba0:	440b      	add	r3, r1
 8007ba2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ba6:	b191      	cbz	r1, 8007bce <__mdiff+0x11a>
 8007ba8:	6117      	str	r7, [r2, #16]
 8007baa:	e79d      	b.n	8007ae8 <__mdiff+0x34>
 8007bac:	f854 1b04 	ldr.w	r1, [r4], #4
 8007bb0:	46e6      	mov	lr, ip
 8007bb2:	0c08      	lsrs	r0, r1, #16
 8007bb4:	fa1c fc81 	uxtah	ip, ip, r1
 8007bb8:	4471      	add	r1, lr
 8007bba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007bbe:	b289      	uxth	r1, r1
 8007bc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007bc4:	f846 1b04 	str.w	r1, [r6], #4
 8007bc8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007bcc:	e7dd      	b.n	8007b8a <__mdiff+0xd6>
 8007bce:	3f01      	subs	r7, #1
 8007bd0:	e7e7      	b.n	8007ba2 <__mdiff+0xee>
 8007bd2:	bf00      	nop
 8007bd4:	080083d8 	.word	0x080083d8
 8007bd8:	080083fa 	.word	0x080083fa

08007bdc <__d2b>:
 8007bdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007be0:	460f      	mov	r7, r1
 8007be2:	2101      	movs	r1, #1
 8007be4:	ec59 8b10 	vmov	r8, r9, d0
 8007be8:	4616      	mov	r6, r2
 8007bea:	f7ff fcd5 	bl	8007598 <_Balloc>
 8007bee:	4604      	mov	r4, r0
 8007bf0:	b930      	cbnz	r0, 8007c00 <__d2b+0x24>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	4b23      	ldr	r3, [pc, #140]	@ (8007c84 <__d2b+0xa8>)
 8007bf6:	4824      	ldr	r0, [pc, #144]	@ (8007c88 <__d2b+0xac>)
 8007bf8:	f240 310f 	movw	r1, #783	@ 0x30f
 8007bfc:	f000 fa06 	bl	800800c <__assert_func>
 8007c00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c08:	b10d      	cbz	r5, 8007c0e <__d2b+0x32>
 8007c0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c0e:	9301      	str	r3, [sp, #4]
 8007c10:	f1b8 0300 	subs.w	r3, r8, #0
 8007c14:	d023      	beq.n	8007c5e <__d2b+0x82>
 8007c16:	4668      	mov	r0, sp
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	f7ff fd84 	bl	8007726 <__lo0bits>
 8007c1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007c22:	b1d0      	cbz	r0, 8007c5a <__d2b+0x7e>
 8007c24:	f1c0 0320 	rsb	r3, r0, #32
 8007c28:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2c:	430b      	orrs	r3, r1
 8007c2e:	40c2      	lsrs	r2, r0
 8007c30:	6163      	str	r3, [r4, #20]
 8007c32:	9201      	str	r2, [sp, #4]
 8007c34:	9b01      	ldr	r3, [sp, #4]
 8007c36:	61a3      	str	r3, [r4, #24]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	bf0c      	ite	eq
 8007c3c:	2201      	moveq	r2, #1
 8007c3e:	2202      	movne	r2, #2
 8007c40:	6122      	str	r2, [r4, #16]
 8007c42:	b1a5      	cbz	r5, 8007c6e <__d2b+0x92>
 8007c44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007c48:	4405      	add	r5, r0
 8007c4a:	603d      	str	r5, [r7, #0]
 8007c4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007c50:	6030      	str	r0, [r6, #0]
 8007c52:	4620      	mov	r0, r4
 8007c54:	b003      	add	sp, #12
 8007c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c5a:	6161      	str	r1, [r4, #20]
 8007c5c:	e7ea      	b.n	8007c34 <__d2b+0x58>
 8007c5e:	a801      	add	r0, sp, #4
 8007c60:	f7ff fd61 	bl	8007726 <__lo0bits>
 8007c64:	9b01      	ldr	r3, [sp, #4]
 8007c66:	6163      	str	r3, [r4, #20]
 8007c68:	3020      	adds	r0, #32
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	e7e8      	b.n	8007c40 <__d2b+0x64>
 8007c6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007c76:	6038      	str	r0, [r7, #0]
 8007c78:	6918      	ldr	r0, [r3, #16]
 8007c7a:	f7ff fd35 	bl	80076e8 <__hi0bits>
 8007c7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c82:	e7e5      	b.n	8007c50 <__d2b+0x74>
 8007c84:	080083d8 	.word	0x080083d8
 8007c88:	080083fa 	.word	0x080083fa

08007c8c <__sread>:
 8007c8c:	b510      	push	{r4, lr}
 8007c8e:	460c      	mov	r4, r1
 8007c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c94:	f000 f956 	bl	8007f44 <_read_r>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	bfab      	itete	ge
 8007c9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8007ca0:	181b      	addge	r3, r3, r0
 8007ca2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ca6:	bfac      	ite	ge
 8007ca8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007caa:	81a3      	strhlt	r3, [r4, #12]
 8007cac:	bd10      	pop	{r4, pc}

08007cae <__swrite>:
 8007cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb2:	461f      	mov	r7, r3
 8007cb4:	898b      	ldrh	r3, [r1, #12]
 8007cb6:	05db      	lsls	r3, r3, #23
 8007cb8:	4605      	mov	r5, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	4616      	mov	r6, r2
 8007cbe:	d505      	bpl.n	8007ccc <__swrite+0x1e>
 8007cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f000 f92a 	bl	8007f20 <_lseek_r>
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cd6:	81a3      	strh	r3, [r4, #12]
 8007cd8:	4632      	mov	r2, r6
 8007cda:	463b      	mov	r3, r7
 8007cdc:	4628      	mov	r0, r5
 8007cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce2:	f000 b951 	b.w	8007f88 <_write_r>

08007ce6 <__sseek>:
 8007ce6:	b510      	push	{r4, lr}
 8007ce8:	460c      	mov	r4, r1
 8007cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cee:	f000 f917 	bl	8007f20 <_lseek_r>
 8007cf2:	1c43      	adds	r3, r0, #1
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	bf15      	itete	ne
 8007cf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007cfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007cfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d02:	81a3      	strheq	r3, [r4, #12]
 8007d04:	bf18      	it	ne
 8007d06:	81a3      	strhne	r3, [r4, #12]
 8007d08:	bd10      	pop	{r4, pc}

08007d0a <__sclose>:
 8007d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d0e:	f000 b94d 	b.w	8007fac <_close_r>

08007d12 <__swbuf_r>:
 8007d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d14:	460e      	mov	r6, r1
 8007d16:	4614      	mov	r4, r2
 8007d18:	4605      	mov	r5, r0
 8007d1a:	b118      	cbz	r0, 8007d24 <__swbuf_r+0x12>
 8007d1c:	6a03      	ldr	r3, [r0, #32]
 8007d1e:	b90b      	cbnz	r3, 8007d24 <__swbuf_r+0x12>
 8007d20:	f7fe fa5c 	bl	80061dc <__sinit>
 8007d24:	69a3      	ldr	r3, [r4, #24]
 8007d26:	60a3      	str	r3, [r4, #8]
 8007d28:	89a3      	ldrh	r3, [r4, #12]
 8007d2a:	071a      	lsls	r2, r3, #28
 8007d2c:	d501      	bpl.n	8007d32 <__swbuf_r+0x20>
 8007d2e:	6923      	ldr	r3, [r4, #16]
 8007d30:	b943      	cbnz	r3, 8007d44 <__swbuf_r+0x32>
 8007d32:	4621      	mov	r1, r4
 8007d34:	4628      	mov	r0, r5
 8007d36:	f000 f82b 	bl	8007d90 <__swsetup_r>
 8007d3a:	b118      	cbz	r0, 8007d44 <__swbuf_r+0x32>
 8007d3c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007d40:	4638      	mov	r0, r7
 8007d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d44:	6823      	ldr	r3, [r4, #0]
 8007d46:	6922      	ldr	r2, [r4, #16]
 8007d48:	1a98      	subs	r0, r3, r2
 8007d4a:	6963      	ldr	r3, [r4, #20]
 8007d4c:	b2f6      	uxtb	r6, r6
 8007d4e:	4283      	cmp	r3, r0
 8007d50:	4637      	mov	r7, r6
 8007d52:	dc05      	bgt.n	8007d60 <__swbuf_r+0x4e>
 8007d54:	4621      	mov	r1, r4
 8007d56:	4628      	mov	r0, r5
 8007d58:	f7ff fbea 	bl	8007530 <_fflush_r>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d1ed      	bne.n	8007d3c <__swbuf_r+0x2a>
 8007d60:	68a3      	ldr	r3, [r4, #8]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	60a3      	str	r3, [r4, #8]
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	1c5a      	adds	r2, r3, #1
 8007d6a:	6022      	str	r2, [r4, #0]
 8007d6c:	701e      	strb	r6, [r3, #0]
 8007d6e:	6962      	ldr	r2, [r4, #20]
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d004      	beq.n	8007d80 <__swbuf_r+0x6e>
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	07db      	lsls	r3, r3, #31
 8007d7a:	d5e1      	bpl.n	8007d40 <__swbuf_r+0x2e>
 8007d7c:	2e0a      	cmp	r6, #10
 8007d7e:	d1df      	bne.n	8007d40 <__swbuf_r+0x2e>
 8007d80:	4621      	mov	r1, r4
 8007d82:	4628      	mov	r0, r5
 8007d84:	f7ff fbd4 	bl	8007530 <_fflush_r>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d0d9      	beq.n	8007d40 <__swbuf_r+0x2e>
 8007d8c:	e7d6      	b.n	8007d3c <__swbuf_r+0x2a>
	...

08007d90 <__swsetup_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4b29      	ldr	r3, [pc, #164]	@ (8007e38 <__swsetup_r+0xa8>)
 8007d94:	4605      	mov	r5, r0
 8007d96:	6818      	ldr	r0, [r3, #0]
 8007d98:	460c      	mov	r4, r1
 8007d9a:	b118      	cbz	r0, 8007da4 <__swsetup_r+0x14>
 8007d9c:	6a03      	ldr	r3, [r0, #32]
 8007d9e:	b90b      	cbnz	r3, 8007da4 <__swsetup_r+0x14>
 8007da0:	f7fe fa1c 	bl	80061dc <__sinit>
 8007da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007da8:	0719      	lsls	r1, r3, #28
 8007daa:	d422      	bmi.n	8007df2 <__swsetup_r+0x62>
 8007dac:	06da      	lsls	r2, r3, #27
 8007dae:	d407      	bmi.n	8007dc0 <__swsetup_r+0x30>
 8007db0:	2209      	movs	r2, #9
 8007db2:	602a      	str	r2, [r5, #0]
 8007db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007db8:	81a3      	strh	r3, [r4, #12]
 8007dba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dbe:	e033      	b.n	8007e28 <__swsetup_r+0x98>
 8007dc0:	0758      	lsls	r0, r3, #29
 8007dc2:	d512      	bpl.n	8007dea <__swsetup_r+0x5a>
 8007dc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007dc6:	b141      	cbz	r1, 8007dda <__swsetup_r+0x4a>
 8007dc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007dcc:	4299      	cmp	r1, r3
 8007dce:	d002      	beq.n	8007dd6 <__swsetup_r+0x46>
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	f000 f94d 	bl	8008070 <_free_r>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007de0:	81a3      	strh	r3, [r4, #12]
 8007de2:	2300      	movs	r3, #0
 8007de4:	6063      	str	r3, [r4, #4]
 8007de6:	6923      	ldr	r3, [r4, #16]
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	f043 0308 	orr.w	r3, r3, #8
 8007df0:	81a3      	strh	r3, [r4, #12]
 8007df2:	6923      	ldr	r3, [r4, #16]
 8007df4:	b94b      	cbnz	r3, 8007e0a <__swsetup_r+0x7a>
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e00:	d003      	beq.n	8007e0a <__swsetup_r+0x7a>
 8007e02:	4621      	mov	r1, r4
 8007e04:	4628      	mov	r0, r5
 8007e06:	f000 f83f 	bl	8007e88 <__smakebuf_r>
 8007e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e0e:	f013 0201 	ands.w	r2, r3, #1
 8007e12:	d00a      	beq.n	8007e2a <__swsetup_r+0x9a>
 8007e14:	2200      	movs	r2, #0
 8007e16:	60a2      	str	r2, [r4, #8]
 8007e18:	6962      	ldr	r2, [r4, #20]
 8007e1a:	4252      	negs	r2, r2
 8007e1c:	61a2      	str	r2, [r4, #24]
 8007e1e:	6922      	ldr	r2, [r4, #16]
 8007e20:	b942      	cbnz	r2, 8007e34 <__swsetup_r+0xa4>
 8007e22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e26:	d1c5      	bne.n	8007db4 <__swsetup_r+0x24>
 8007e28:	bd38      	pop	{r3, r4, r5, pc}
 8007e2a:	0799      	lsls	r1, r3, #30
 8007e2c:	bf58      	it	pl
 8007e2e:	6962      	ldrpl	r2, [r4, #20]
 8007e30:	60a2      	str	r2, [r4, #8]
 8007e32:	e7f4      	b.n	8007e1e <__swsetup_r+0x8e>
 8007e34:	2000      	movs	r0, #0
 8007e36:	e7f7      	b.n	8007e28 <__swsetup_r+0x98>
 8007e38:	20000018 	.word	0x20000018

08007e3c <__swhatbuf_r>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	460c      	mov	r4, r1
 8007e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e44:	2900      	cmp	r1, #0
 8007e46:	b096      	sub	sp, #88	@ 0x58
 8007e48:	4615      	mov	r5, r2
 8007e4a:	461e      	mov	r6, r3
 8007e4c:	da0d      	bge.n	8007e6a <__swhatbuf_r+0x2e>
 8007e4e:	89a3      	ldrh	r3, [r4, #12]
 8007e50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e54:	f04f 0100 	mov.w	r1, #0
 8007e58:	bf14      	ite	ne
 8007e5a:	2340      	movne	r3, #64	@ 0x40
 8007e5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e60:	2000      	movs	r0, #0
 8007e62:	6031      	str	r1, [r6, #0]
 8007e64:	602b      	str	r3, [r5, #0]
 8007e66:	b016      	add	sp, #88	@ 0x58
 8007e68:	bd70      	pop	{r4, r5, r6, pc}
 8007e6a:	466a      	mov	r2, sp
 8007e6c:	f000 f8ae 	bl	8007fcc <_fstat_r>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	dbec      	blt.n	8007e4e <__swhatbuf_r+0x12>
 8007e74:	9901      	ldr	r1, [sp, #4]
 8007e76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e7e:	4259      	negs	r1, r3
 8007e80:	4159      	adcs	r1, r3
 8007e82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e86:	e7eb      	b.n	8007e60 <__swhatbuf_r+0x24>

08007e88 <__smakebuf_r>:
 8007e88:	898b      	ldrh	r3, [r1, #12]
 8007e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e8c:	079d      	lsls	r5, r3, #30
 8007e8e:	4606      	mov	r6, r0
 8007e90:	460c      	mov	r4, r1
 8007e92:	d507      	bpl.n	8007ea4 <__smakebuf_r+0x1c>
 8007e94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	6123      	str	r3, [r4, #16]
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	6163      	str	r3, [r4, #20]
 8007ea0:	b003      	add	sp, #12
 8007ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ea4:	ab01      	add	r3, sp, #4
 8007ea6:	466a      	mov	r2, sp
 8007ea8:	f7ff ffc8 	bl	8007e3c <__swhatbuf_r>
 8007eac:	9f00      	ldr	r7, [sp, #0]
 8007eae:	4605      	mov	r5, r0
 8007eb0:	4639      	mov	r1, r7
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7ff fa38 	bl	8007328 <_malloc_r>
 8007eb8:	b948      	cbnz	r0, 8007ece <__smakebuf_r+0x46>
 8007eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ebe:	059a      	lsls	r2, r3, #22
 8007ec0:	d4ee      	bmi.n	8007ea0 <__smakebuf_r+0x18>
 8007ec2:	f023 0303 	bic.w	r3, r3, #3
 8007ec6:	f043 0302 	orr.w	r3, r3, #2
 8007eca:	81a3      	strh	r3, [r4, #12]
 8007ecc:	e7e2      	b.n	8007e94 <__smakebuf_r+0xc>
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	6020      	str	r0, [r4, #0]
 8007ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	9b01      	ldr	r3, [sp, #4]
 8007eda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ede:	b15b      	cbz	r3, 8007ef8 <__smakebuf_r+0x70>
 8007ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f000 f80b 	bl	8007f00 <_isatty_r>
 8007eea:	b128      	cbz	r0, 8007ef8 <__smakebuf_r+0x70>
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	f023 0303 	bic.w	r3, r3, #3
 8007ef2:	f043 0301 	orr.w	r3, r3, #1
 8007ef6:	81a3      	strh	r3, [r4, #12]
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	431d      	orrs	r5, r3
 8007efc:	81a5      	strh	r5, [r4, #12]
 8007efe:	e7cf      	b.n	8007ea0 <__smakebuf_r+0x18>

08007f00 <_isatty_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	4d06      	ldr	r5, [pc, #24]	@ (8007f1c <_isatty_r+0x1c>)
 8007f04:	2300      	movs	r3, #0
 8007f06:	4604      	mov	r4, r0
 8007f08:	4608      	mov	r0, r1
 8007f0a:	602b      	str	r3, [r5, #0]
 8007f0c:	f7f9 fd54 	bl	80019b8 <_isatty>
 8007f10:	1c43      	adds	r3, r0, #1
 8007f12:	d102      	bne.n	8007f1a <_isatty_r+0x1a>
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	b103      	cbz	r3, 8007f1a <_isatty_r+0x1a>
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
 8007f1c:	2000052c 	.word	0x2000052c

08007f20 <_lseek_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4d07      	ldr	r5, [pc, #28]	@ (8007f40 <_lseek_r+0x20>)
 8007f24:	4604      	mov	r4, r0
 8007f26:	4608      	mov	r0, r1
 8007f28:	4611      	mov	r1, r2
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	602a      	str	r2, [r5, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f7f9 fd4d 	bl	80019ce <_lseek>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_lseek_r+0x1e>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_lseek_r+0x1e>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	2000052c 	.word	0x2000052c

08007f44 <_read_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4d07      	ldr	r5, [pc, #28]	@ (8007f64 <_read_r+0x20>)
 8007f48:	4604      	mov	r4, r0
 8007f4a:	4608      	mov	r0, r1
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	2200      	movs	r2, #0
 8007f50:	602a      	str	r2, [r5, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	f7f9 fcdb 	bl	800190e <_read>
 8007f58:	1c43      	adds	r3, r0, #1
 8007f5a:	d102      	bne.n	8007f62 <_read_r+0x1e>
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	b103      	cbz	r3, 8007f62 <_read_r+0x1e>
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	2000052c 	.word	0x2000052c

08007f68 <_sbrk_r>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	4d06      	ldr	r5, [pc, #24]	@ (8007f84 <_sbrk_r+0x1c>)
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	4604      	mov	r4, r0
 8007f70:	4608      	mov	r0, r1
 8007f72:	602b      	str	r3, [r5, #0]
 8007f74:	f7f9 fd38 	bl	80019e8 <_sbrk>
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	d102      	bne.n	8007f82 <_sbrk_r+0x1a>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	b103      	cbz	r3, 8007f82 <_sbrk_r+0x1a>
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	2000052c 	.word	0x2000052c

08007f88 <_write_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	4d07      	ldr	r5, [pc, #28]	@ (8007fa8 <_write_r+0x20>)
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	4608      	mov	r0, r1
 8007f90:	4611      	mov	r1, r2
 8007f92:	2200      	movs	r2, #0
 8007f94:	602a      	str	r2, [r5, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	f7f9 fcd6 	bl	8001948 <_write>
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	d102      	bne.n	8007fa6 <_write_r+0x1e>
 8007fa0:	682b      	ldr	r3, [r5, #0]
 8007fa2:	b103      	cbz	r3, 8007fa6 <_write_r+0x1e>
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	bd38      	pop	{r3, r4, r5, pc}
 8007fa8:	2000052c 	.word	0x2000052c

08007fac <_close_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	4d06      	ldr	r5, [pc, #24]	@ (8007fc8 <_close_r+0x1c>)
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	602b      	str	r3, [r5, #0]
 8007fb8:	f7f9 fce2 	bl	8001980 <_close>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_close_r+0x1a>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_close_r+0x1a>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	2000052c 	.word	0x2000052c

08007fcc <_fstat_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4d07      	ldr	r5, [pc, #28]	@ (8007fec <_fstat_r+0x20>)
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	602b      	str	r3, [r5, #0]
 8007fda:	f7f9 fcdd 	bl	8001998 <_fstat>
 8007fde:	1c43      	adds	r3, r0, #1
 8007fe0:	d102      	bne.n	8007fe8 <_fstat_r+0x1c>
 8007fe2:	682b      	ldr	r3, [r5, #0]
 8007fe4:	b103      	cbz	r3, 8007fe8 <_fstat_r+0x1c>
 8007fe6:	6023      	str	r3, [r4, #0]
 8007fe8:	bd38      	pop	{r3, r4, r5, pc}
 8007fea:	bf00      	nop
 8007fec:	2000052c 	.word	0x2000052c

08007ff0 <memcpy>:
 8007ff0:	440a      	add	r2, r1
 8007ff2:	4291      	cmp	r1, r2
 8007ff4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007ff8:	d100      	bne.n	8007ffc <memcpy+0xc>
 8007ffa:	4770      	bx	lr
 8007ffc:	b510      	push	{r4, lr}
 8007ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008002:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008006:	4291      	cmp	r1, r2
 8008008:	d1f9      	bne.n	8007ffe <memcpy+0xe>
 800800a:	bd10      	pop	{r4, pc}

0800800c <__assert_func>:
 800800c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800800e:	4614      	mov	r4, r2
 8008010:	461a      	mov	r2, r3
 8008012:	4b09      	ldr	r3, [pc, #36]	@ (8008038 <__assert_func+0x2c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4605      	mov	r5, r0
 8008018:	68d8      	ldr	r0, [r3, #12]
 800801a:	b14c      	cbz	r4, 8008030 <__assert_func+0x24>
 800801c:	4b07      	ldr	r3, [pc, #28]	@ (800803c <__assert_func+0x30>)
 800801e:	9100      	str	r1, [sp, #0]
 8008020:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008024:	4906      	ldr	r1, [pc, #24]	@ (8008040 <__assert_func+0x34>)
 8008026:	462b      	mov	r3, r5
 8008028:	f000 f87e 	bl	8008128 <fiprintf>
 800802c:	f000 f89b 	bl	8008166 <abort>
 8008030:	4b04      	ldr	r3, [pc, #16]	@ (8008044 <__assert_func+0x38>)
 8008032:	461c      	mov	r4, r3
 8008034:	e7f3      	b.n	800801e <__assert_func+0x12>
 8008036:	bf00      	nop
 8008038:	20000018 	.word	0x20000018
 800803c:	0800845d 	.word	0x0800845d
 8008040:	0800846a 	.word	0x0800846a
 8008044:	08008498 	.word	0x08008498

08008048 <_calloc_r>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	fba1 5402 	umull	r5, r4, r1, r2
 800804e:	b934      	cbnz	r4, 800805e <_calloc_r+0x16>
 8008050:	4629      	mov	r1, r5
 8008052:	f7ff f969 	bl	8007328 <_malloc_r>
 8008056:	4606      	mov	r6, r0
 8008058:	b928      	cbnz	r0, 8008066 <_calloc_r+0x1e>
 800805a:	4630      	mov	r0, r6
 800805c:	bd70      	pop	{r4, r5, r6, pc}
 800805e:	220c      	movs	r2, #12
 8008060:	6002      	str	r2, [r0, #0]
 8008062:	2600      	movs	r6, #0
 8008064:	e7f9      	b.n	800805a <_calloc_r+0x12>
 8008066:	462a      	mov	r2, r5
 8008068:	4621      	mov	r1, r4
 800806a:	f7fe f95d 	bl	8006328 <memset>
 800806e:	e7f4      	b.n	800805a <_calloc_r+0x12>

08008070 <_free_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	4605      	mov	r5, r0
 8008074:	2900      	cmp	r1, #0
 8008076:	d041      	beq.n	80080fc <_free_r+0x8c>
 8008078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800807c:	1f0c      	subs	r4, r1, #4
 800807e:	2b00      	cmp	r3, #0
 8008080:	bfb8      	it	lt
 8008082:	18e4      	addlt	r4, r4, r3
 8008084:	f7ff fa7c 	bl	8007580 <__malloc_lock>
 8008088:	4a1d      	ldr	r2, [pc, #116]	@ (8008100 <_free_r+0x90>)
 800808a:	6813      	ldr	r3, [r2, #0]
 800808c:	b933      	cbnz	r3, 800809c <_free_r+0x2c>
 800808e:	6063      	str	r3, [r4, #4]
 8008090:	6014      	str	r4, [r2, #0]
 8008092:	4628      	mov	r0, r5
 8008094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008098:	f7ff ba78 	b.w	800758c <__malloc_unlock>
 800809c:	42a3      	cmp	r3, r4
 800809e:	d908      	bls.n	80080b2 <_free_r+0x42>
 80080a0:	6820      	ldr	r0, [r4, #0]
 80080a2:	1821      	adds	r1, r4, r0
 80080a4:	428b      	cmp	r3, r1
 80080a6:	bf01      	itttt	eq
 80080a8:	6819      	ldreq	r1, [r3, #0]
 80080aa:	685b      	ldreq	r3, [r3, #4]
 80080ac:	1809      	addeq	r1, r1, r0
 80080ae:	6021      	streq	r1, [r4, #0]
 80080b0:	e7ed      	b.n	800808e <_free_r+0x1e>
 80080b2:	461a      	mov	r2, r3
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	b10b      	cbz	r3, 80080bc <_free_r+0x4c>
 80080b8:	42a3      	cmp	r3, r4
 80080ba:	d9fa      	bls.n	80080b2 <_free_r+0x42>
 80080bc:	6811      	ldr	r1, [r2, #0]
 80080be:	1850      	adds	r0, r2, r1
 80080c0:	42a0      	cmp	r0, r4
 80080c2:	d10b      	bne.n	80080dc <_free_r+0x6c>
 80080c4:	6820      	ldr	r0, [r4, #0]
 80080c6:	4401      	add	r1, r0
 80080c8:	1850      	adds	r0, r2, r1
 80080ca:	4283      	cmp	r3, r0
 80080cc:	6011      	str	r1, [r2, #0]
 80080ce:	d1e0      	bne.n	8008092 <_free_r+0x22>
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	6053      	str	r3, [r2, #4]
 80080d6:	4408      	add	r0, r1
 80080d8:	6010      	str	r0, [r2, #0]
 80080da:	e7da      	b.n	8008092 <_free_r+0x22>
 80080dc:	d902      	bls.n	80080e4 <_free_r+0x74>
 80080de:	230c      	movs	r3, #12
 80080e0:	602b      	str	r3, [r5, #0]
 80080e2:	e7d6      	b.n	8008092 <_free_r+0x22>
 80080e4:	6820      	ldr	r0, [r4, #0]
 80080e6:	1821      	adds	r1, r4, r0
 80080e8:	428b      	cmp	r3, r1
 80080ea:	bf04      	itt	eq
 80080ec:	6819      	ldreq	r1, [r3, #0]
 80080ee:	685b      	ldreq	r3, [r3, #4]
 80080f0:	6063      	str	r3, [r4, #4]
 80080f2:	bf04      	itt	eq
 80080f4:	1809      	addeq	r1, r1, r0
 80080f6:	6021      	streq	r1, [r4, #0]
 80080f8:	6054      	str	r4, [r2, #4]
 80080fa:	e7ca      	b.n	8008092 <_free_r+0x22>
 80080fc:	bd38      	pop	{r3, r4, r5, pc}
 80080fe:	bf00      	nop
 8008100:	20000528 	.word	0x20000528

08008104 <__ascii_mbtowc>:
 8008104:	b082      	sub	sp, #8
 8008106:	b901      	cbnz	r1, 800810a <__ascii_mbtowc+0x6>
 8008108:	a901      	add	r1, sp, #4
 800810a:	b142      	cbz	r2, 800811e <__ascii_mbtowc+0x1a>
 800810c:	b14b      	cbz	r3, 8008122 <__ascii_mbtowc+0x1e>
 800810e:	7813      	ldrb	r3, [r2, #0]
 8008110:	600b      	str	r3, [r1, #0]
 8008112:	7812      	ldrb	r2, [r2, #0]
 8008114:	1e10      	subs	r0, r2, #0
 8008116:	bf18      	it	ne
 8008118:	2001      	movne	r0, #1
 800811a:	b002      	add	sp, #8
 800811c:	4770      	bx	lr
 800811e:	4610      	mov	r0, r2
 8008120:	e7fb      	b.n	800811a <__ascii_mbtowc+0x16>
 8008122:	f06f 0001 	mvn.w	r0, #1
 8008126:	e7f8      	b.n	800811a <__ascii_mbtowc+0x16>

08008128 <fiprintf>:
 8008128:	b40e      	push	{r1, r2, r3}
 800812a:	b503      	push	{r0, r1, lr}
 800812c:	4601      	mov	r1, r0
 800812e:	ab03      	add	r3, sp, #12
 8008130:	4805      	ldr	r0, [pc, #20]	@ (8008148 <fiprintf+0x20>)
 8008132:	f853 2b04 	ldr.w	r2, [r3], #4
 8008136:	6800      	ldr	r0, [r0, #0]
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	f7fe ffb3 	bl	80070a4 <_vfiprintf_r>
 800813e:	b002      	add	sp, #8
 8008140:	f85d eb04 	ldr.w	lr, [sp], #4
 8008144:	b003      	add	sp, #12
 8008146:	4770      	bx	lr
 8008148:	20000018 	.word	0x20000018

0800814c <__ascii_wctomb>:
 800814c:	4603      	mov	r3, r0
 800814e:	4608      	mov	r0, r1
 8008150:	b141      	cbz	r1, 8008164 <__ascii_wctomb+0x18>
 8008152:	2aff      	cmp	r2, #255	@ 0xff
 8008154:	d904      	bls.n	8008160 <__ascii_wctomb+0x14>
 8008156:	228a      	movs	r2, #138	@ 0x8a
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800815e:	4770      	bx	lr
 8008160:	700a      	strb	r2, [r1, #0]
 8008162:	2001      	movs	r0, #1
 8008164:	4770      	bx	lr

08008166 <abort>:
 8008166:	b508      	push	{r3, lr}
 8008168:	2006      	movs	r0, #6
 800816a:	f000 f82b 	bl	80081c4 <raise>
 800816e:	2001      	movs	r0, #1
 8008170:	f7f9 fbc2 	bl	80018f8 <_exit>

08008174 <_raise_r>:
 8008174:	291f      	cmp	r1, #31
 8008176:	b538      	push	{r3, r4, r5, lr}
 8008178:	4605      	mov	r5, r0
 800817a:	460c      	mov	r4, r1
 800817c:	d904      	bls.n	8008188 <_raise_r+0x14>
 800817e:	2316      	movs	r3, #22
 8008180:	6003      	str	r3, [r0, #0]
 8008182:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800818a:	b112      	cbz	r2, 8008192 <_raise_r+0x1e>
 800818c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008190:	b94b      	cbnz	r3, 80081a6 <_raise_r+0x32>
 8008192:	4628      	mov	r0, r5
 8008194:	f000 f830 	bl	80081f8 <_getpid_r>
 8008198:	4622      	mov	r2, r4
 800819a:	4601      	mov	r1, r0
 800819c:	4628      	mov	r0, r5
 800819e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081a2:	f000 b817 	b.w	80081d4 <_kill_r>
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d00a      	beq.n	80081c0 <_raise_r+0x4c>
 80081aa:	1c59      	adds	r1, r3, #1
 80081ac:	d103      	bne.n	80081b6 <_raise_r+0x42>
 80081ae:	2316      	movs	r3, #22
 80081b0:	6003      	str	r3, [r0, #0]
 80081b2:	2001      	movs	r0, #1
 80081b4:	e7e7      	b.n	8008186 <_raise_r+0x12>
 80081b6:	2100      	movs	r1, #0
 80081b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80081bc:	4620      	mov	r0, r4
 80081be:	4798      	blx	r3
 80081c0:	2000      	movs	r0, #0
 80081c2:	e7e0      	b.n	8008186 <_raise_r+0x12>

080081c4 <raise>:
 80081c4:	4b02      	ldr	r3, [pc, #8]	@ (80081d0 <raise+0xc>)
 80081c6:	4601      	mov	r1, r0
 80081c8:	6818      	ldr	r0, [r3, #0]
 80081ca:	f7ff bfd3 	b.w	8008174 <_raise_r>
 80081ce:	bf00      	nop
 80081d0:	20000018 	.word	0x20000018

080081d4 <_kill_r>:
 80081d4:	b538      	push	{r3, r4, r5, lr}
 80081d6:	4d07      	ldr	r5, [pc, #28]	@ (80081f4 <_kill_r+0x20>)
 80081d8:	2300      	movs	r3, #0
 80081da:	4604      	mov	r4, r0
 80081dc:	4608      	mov	r0, r1
 80081de:	4611      	mov	r1, r2
 80081e0:	602b      	str	r3, [r5, #0]
 80081e2:	f7f9 fb79 	bl	80018d8 <_kill>
 80081e6:	1c43      	adds	r3, r0, #1
 80081e8:	d102      	bne.n	80081f0 <_kill_r+0x1c>
 80081ea:	682b      	ldr	r3, [r5, #0]
 80081ec:	b103      	cbz	r3, 80081f0 <_kill_r+0x1c>
 80081ee:	6023      	str	r3, [r4, #0]
 80081f0:	bd38      	pop	{r3, r4, r5, pc}
 80081f2:	bf00      	nop
 80081f4:	2000052c 	.word	0x2000052c

080081f8 <_getpid_r>:
 80081f8:	f7f9 bb66 	b.w	80018c8 <_getpid>

080081fc <_init>:
 80081fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fe:	bf00      	nop
 8008200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008202:	bc08      	pop	{r3}
 8008204:	469e      	mov	lr, r3
 8008206:	4770      	bx	lr

08008208 <_fini>:
 8008208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820a:	bf00      	nop
 800820c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800820e:	bc08      	pop	{r3}
 8008210:	469e      	mov	lr, r3
 8008212:	4770      	bx	lr
